const {
    create,
    globals
} = require('../../dawn_newest/out/Debug/Debug/dawn.node');
const fs = require('fs');
Object.assign(globalThis, globals);
let navigator = {
    gpu: create([]),
};

if (!navigator.gpu) {
    throw new Error("WebGPU not supported on this browser");
}

function loadShader(file) {
    try {
        const data = fs.readFileSync(file, 'utf8');
        return data;
    } catch (err) {
        console.error('Failed to load shader:', err);
    }
}
const jrovPoabUER = loadShader('../WebGlitch/rsrcs/shaders/compute/1.wgsl');
const vvuQCkvLWaaZ = new Float32Array([-895, -6181, -1451, -6286, 1102, 9518, 1634, -1457, -4894, -8561, -9763, 301, 3919, -2027, -1138, -1187, 3781, -2210, 9560, 7331, -6248, -7785, 4476, 212, 5672, -7627, -1412, -1974, -4938, 5287, -8598, -6713, 4508, -3335, -8110, -5581, -5277, 8831, -7439, 9077, 920, -9050, 2161, -9610, 8809, -4264, 5709, -4927, -8763, 1578, 9388, 963, -2735, 7248, 1552, -580, 373, -2302, 6175, -9791, 2775, 3612, 4900, 9434, 494, -532, 4444, -5591, -4277, -9773, 4777, 1489, -1111, -7780, 5562, 5801, 8123, -3746, 8919, -7719, -3185, 8686, -7125, -4665, -5434, -4488, -6821, -8838, 9875, -7591, -8637, 6911, 8855, -7197, -7784, 3710, 7519, 4459, 8188, 406, -6498, 7951, -5580, -7878, 9101, 7980, -3871, -9047, 7881, -3400, -19, -7585, -9002, 4257, -139, 2528, -1967, 2920, -9767, 9162, -9355, -557, 4923, 7468, -8315, -3232, 3121, 1240, 3291, 6678, -7091, 3257, 5134, 717, 1282, 8370, 2200, -8079, 7316, 8378, 9074, 1332, 9791, -9091, 8425, -9587, 6110, 7306, 1562, -2989, 7192, 6333, -5729, 5621, 7449, 4523, -3935, 9746, 6424, 6830, 6382, 1548, 4312, 4676, -851, 9722, -4575, 605, 7532, -6942, -607, 6501, -7136, -4656, -7178, -4903, -8120, -1688, -8250, 267, -1265, -5824, 9253, -5500, 8393, 8816, 2328, -8077, -8736, 671, 4038, -9517, -6194, -7040, 3411, -4668, 2700, 1536, -1542, 4988, 89, -8084, 9990, 8056, -424, 9938, -9685, -9775, -7968, 3360, 8563, 8743, 4729, -8800, 8402, -4659, 2860, 6839, 1222, -6430, -4235, -4239, -8174, 1282, 3531, -6738, 3752, -99, 1170, 2180, -3577, -7286, 465, -4907, -9025, -5800, 2626, 9763, -5459, 679, 5909, -9625, 5425, 6151, -2940, -5635, -6240, -5600, -7043, 392, 6955, -3285, -6410, 1398, -895, -1292, 4927, -5089, -4037, -22, 2555, 4002, 8255, 5022, -5458, -2305, -7587, 5075, -961, 6465, 4643, 4832, 3673, -4594, -9702, 3309, -4594, 5440, -4459, -181, 9235, 2858, 3808, 170, -364, 7548, -4597, 3502, 7619, -9689, 7804, 4876, 6851, 4661, -5299, -235, -4506, -508, -7610, -7188, 3276, 4847, -156, -8850, 2991, -4846, 2923, -3204, 1663, 8948, 1895, -7021, 8114, -2371, 1958, -9319, 1708, 9162, -4121, 837, -9157, 7046, 7827, 295, 7656, 2634, 4209, 3746, 6449, -1277, 6473, 8198, -4693, -4274, 6546, -9285, 4244, 5624, -2465, -2128, -5103, -1355, 983, 1526, 5402, 8799, 3741, 1660, 2723, -8173, 2365, 711, -7397, -7324, -583, -3500])
const hfIEPt = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const adOwI = new Int8Array([-2856, 3226, 272, 1970, 4291, -9239, -7099, -8531, -5581, -6989, 8067, -2614, -8415, -5262, 4886, -8341, 1967, 3324, -6131, -3189, -6743, 4173, 7919, -8264, 860, 8776, 3170, -988, -251, 8139, 2560, 1868, 3214, -6328, -186, 48, -1533, 3266, 1632, -3128, 7539, 9137, 8955, 5337, 4667, -7335, -4688, -5291, -2199, 2637, -564, 8660, 7580, -2419, 4336, 3664, -9714, 6325, 2209, 947, 8646, -7767, -5144, -3248, -2886, -2891, -6540, -1147, 8399, 3126, -6945, 5315, -5571, 5696, -669, -3445, -8547, -4164, -9816, -6053, 8842, -8615, 3783, 863, -2823, -1056, 3171, -3326, -2990, -4709, 1129, 4766, -3620, 3896, 9021, 4724, -5942, -7439, 9714, -4428, -671, 1542, 3495, -7669, -6759, -6497, -4161, -1185, -1432, 4757, -2539, 3694, -6108, 9556, -3248, 9634, 4654, 2869, -3321, 7933, 1726, 3285, 2790, -2609, 9497, 879, -3889, -9071, -6472, 2951, 2802, -6468, -919, -9595, 8082, -6430, -9705, -2985, -1464, 3663, 8657, 5117, -7673, -7187, -3758, -7250, -4523, 5099, 3644, 850, -9218, -3649, -7439, -8609, 5338, -5563, 5387, 4998, -6375, 5457, -6422, 7079, -7387, -8489, -4524, 3414, 4086, 2623, 78, -964, 5435, -4768, -9979, 288, -8617, 3208, -5606, 4955, -6646, 897, 5959, -1140, -3805, -1873, 3681, -9196, -9943, 1146, -3363, 7805, 5256, -9085, 8859, -1285, -384, -2252, 4077, 2627, 6777, 506, -5745, 2720, 5469, 8369, 34, -5212, -2797, 4097, -799, 9938, 5276, -9779, -5712, 2122, -8029, -5701, 8370, -1044, -5029, -2603, -4479, -765, 3450, -4084, -2272, 9308, -3603, -4124, -947, -919, 352, -4823, 5980, -1491, -2449, 928, -7253, -5926, -3708, -5126, 3204, -3161, 1459, -745, 7210, 342, -9018, -167, -6191, 7454, -9770, -5076, 272, -8496, -1258, -5779, 9358, 6161, -4410, -722, -2845, 7692, 2326, -8236, -6552, -4192, 6660, 965, -188, -8426, 4144, 7927, 6154, 3912, 1276, 6581, -7458, 7572, -2203, 7505, 9410, -2575, 9488, 8828, -4544, 9229, 3517, -7891, 1316, -5289, -1860, 1089, 3410, -3798, 5778, 2604, 8525, -5511, -29, 9964, 9562, -7946, 4632, 2357, -5869, 9027, 3106, -7458, 9281, 7633, -4056, 3091, 8917, 6665, -3452, 5951, 1574, -2404, 9520, -2304, -5634, 7429, 7723, -4597, -1222, -410, 9943, -849, 7400, -3529, 3742, 6992, -4337, -97, 5349, 3726, -8877, -7728, 6752, 9933, 4861, -2099, 5256, 470, 1429, 8841, -6880, -2211, -4961, 1872, -6248, -7569, 517, -5982, -2868, 3902, 5799, -7761, 4942, -9788, -1587, -5655, -4878, -3649, -4882, 4666, -3905, 3985, -2314, -2118, 3042, 7882, 2855, 2376, 7193, 8028, 3637, -8984, 3240, -9748, 4819, -1555, -4207, 6865, -7979, 9890, 3148, -3985, 5960, 6963, 4856, 4381, 7259, 3790, 3555, -7575, 6045, -5700, 5663, 9298, -6303, 7792, 6230, 8710, -7947, 4502, 247, -2696, 1892, 3230, 7164, -7148, -4256, -6519, 9546, -17, 837, 3124, 810, -6435, -739, -4485, -5064, 9939, 6791, -447, 7101, 4301, 6912, 562, -4288, -4039, -2036, -1295, -1772, -3427, -9372, 6481, 7052, -1713, 3415, -6164, 3565, 9856])
const NTgulhj = new Float32Array([-6150, -786, -1139, 3368, -5105, 725, -2683, -320, -5604, -8481, -6547, 211, -7549, -5931, -3159, -1355, -1388, 3331, 4478, -3924, -3557, -8299, 7692, -1239, 1193, 764, 1830, -6707, -7732, 3334, -9725, 1618, 2309, -7745, 6900, 2739, 5611, -2854, 5616, 4039, 8229, 6887, 8735, 2499, 5335, 2950, -652, 7710, -4047, 5661, -4389, 6, 7880, -2814, -6890, 8722, 4974, -2236, -8183, -6021, -6388, 1411, 6408, -9684, 5539, -8242, 933, -6492, -4802, 4388, -5896, -8729, -3772, -8517, -172, -9317, -5338, -4304, -4696, -8384, -1862, -8663, -5522, 1125, -7959, -5137, -6592, 7685, -6088, -9013, 1472, -8878, -1499, -2230, 1546, -8120, 4897, 462, -5069, -4283, 1193, 5634, 7050, 7735, 3780, -6680, 7223, -1997, -8572, 10, -2453, -7467, -2038, -4446, -3412, 5285, -9191, -5493, 5704, 7750, 5170, -3793, 9648, 2961, -6351, 421, -5108, 1298, 7100, -8104, -4273, 4634, -957, 6958, 2642, 7264, 7862, -7505, 8144, -7836, 4364, -7946, 6358, -8654, -2108, 3236, 7835, 8398, -5722, -9778, -4873, 7464, 3464, 996, 2951, -2579, 5118, 2847, 5188, 5818, 9602, -657, 7266, -3529, 1461, -9953, -6748, -9372, -640, -2032, -9840, 4270, 6010, 3099, 7866, 5901, -44, 3848, 7251, 5639, -9060, -5304, 4912, -4545, 7745, -579, -6950, -1775, -3992, 9352, 7874, 8961, -5309, -5430, 7402, -7807, -6438, 7009, 7398, 728, -9897, 8011, 9598, 8323, 6398, 1194, -5658, 5374, -3675, 8889, 4073, -4167, -6460, -5049, -8206, -6139, 2009, 4705, -5484, 8898, 1869, 9288, -3176, -617, 8368, -9454, -9030, -837, -3417, -2994, -3106, 7222, 6699, -7759, 6631, -6130, 9890, 3474, 8460, -5963, 837, 7662, -5569, -1551, 6413, -6452, 6040, -2399, 3966, 7081, -9633, -5546, -3869, 3656, -3102, 641, 9334, 5081, 1218, 3427, -1444, -3852, -4511, 373, 6294, -1273, 3806, 1789, 4733, -684, -5447, 918, -2502, 8976, 7694, -277, -8708, 3838, 5594, 4597, 166, -9910, -1855, 7498, -8136, -4539, 3377, -5358, 3699, 6121, 5178, 4964, -7833, -5666, -5683, 4116, -8293, -2446, -2496, -286, -1879, 3189, 7341, 3495, -306, -4922, -3830, 6282, 3447, -4222, 9752, -1876, 4095, -5607, 3702, 6882, -8763, -1515, -7761, -1443, -8812, -3418, -1195, -5258, 966, 1615, 915, -3536, 1039, 2032, 7722, 8979, 3022, 7200, -733, -9674, 9167, -2193, 4220, 444, 3478, 6975, 919, -1277, 5846, -1381, -8208, 776, 7574, 5173, 3823, 7981, -5257, -5214, -3014, 3565, -2131, -3601, -746, 3557, 2694, -6206, -3851, -7399, -8557, -4584, -3522, 3751, -1744, 451, 4920, -2088, -7986, 7997, -4364, -5262, -9193, 6815, 9493, 907, -238, 7813, -1746, 3310, 2555, 479, -7624, -2629, -1930, -538, -9460, 9897, -3485, 5537, -5346, 8737, -7969, 5808, 5508, 3849, -1109, 2301, 3106, 4814, -4576, 9195, 5102, -2698, 9933, -2425, -1486, 3999, -7708])
const XtvTmoEGaQI = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const nnMMbzqXYS = new Int8Array([1987, 9095, 6732, -3659, 163, -7424, -1924, -3334, 3744, -6580, 6705, 6368, 8541, -6503, 4928, -9808, 4306, 4934, 1198, -5470, -7752, -1574, 8015, -1582, -96, 2121, 5276, -8459, -5400, -6970, -4827, 7366, 4099, 6767, 1166, 1593, -6689, -3119, -3313, 9296, -2830, 3669, 2653, 6131, 2051, -7372, 3560, -41, -3753, -3780, -352, 1718, -921, 1092, -8892, -3374, -853, -67, 1893, 1884, 5397, -1455, -118, -1817, -8407, -9324, -907, 2070, -6222, -7684, 2408, -2456, 310, -6426, -9808, -7901, 6496, 8227, -2034, 3811, 2628, -7764, 9670, 2574, -273, 9705, -7720, 1727, 135, 6235, 5846, -5651, 1002, 1571, 5408, -8774, 756, 753, -3176, -9711, -7837, -5887, 1195, 3024, 3826, 3310, 575, 9634, -4288, -4787, -6492, 5826, 877, -2435, -93, 6224, 32, 6019, 4875, 6624, -2795, -9529, -5027, -1687, 1431, -3843, 8998, -5280, -2727, 852, 4439, 4384, -9001, 4488, 3601, 133, 2259, -2755, 6132, -470, 9102, -3947, 7588, -3803, 7273, -6576, -9486, -960, 6313, -8757, 4087, -5937, 9966, 6518, 9149, 3070, -2225, -9439, -6015, -5695, -5197, -6121, -8684, 9551, 6783, -6958, -1741, -4793, -6128, 7372, -2604, 6661, 4261, -7676, 1645, -797, -6671, -8758, 5392, -3382, 855, 1996, 2655, 7467, 1752, -8711, -6735, -5601, -9769, 5951, 3641, 4975, -2729, -3902, 615, 2351, -2777, 8209, -3995, 5249, 2067, -8783, 2369, -1628, -5927, -2996, -2513, 4866, 7200, -3046, -3015, -4780, -776, -513, 6867, 4923, -2328, 2370, 4585, -1072, 3026, -7528, 612, -5518, 7918, 6694, 4088, 6455, 6947, -2853, -2993, -2171, 4657, -2492, 4437, -7580, -2689, -4347, -6947, 7780, -162, -6789, -5448, -4045, 5006, 560, 7991, 6357, -8213, 5598, -4180, -5346, -286, 7106, -7327, 802, -8169, 251, -666, -4109, 2138, 4140, 1090, 4058, -1333, -1124, 1034, -1135, -5370, -7486, 2964, -590, -3817, 9980, -126, -7847, 7777, 4752, 2382, -8706, -7033, 9119, -3469, 4142, -8797, 2837, 4535, 8035, 6641, -1797, -2379, 5093, -8919, -3499, -2657, 171, -2359, 7195, 37, -7587, -5640, -1019, 8280, -3137, 9708, 496, -3335, 1096, -4303, 7854, 3778, 7014, -4321, 2740, -8806, 3640, -5623, -1772, -6836, 2871, 2965, -529, -2138, 5048, 2477, -7764, -6784, 3572, 5870, -313, 8989, 1048, 3687, -1842, 2212, -7907, -9188, -9270, 7427, 806, 1578, 337, 71, 6373, -5423, 9801, -3030, 465, -6333, -3095, 1731, 7181, 464, 8687, 2323, 1135, -6623, -585, -5960, -4824, -3707, 3939, 7168, 9312, 2184, -310, -3343, 4104, 3722, -8589, 6336, 499, -5271, 6233, -62, -1669, 3097, 2942, 6993, -3002, 5340, 2789, 7290, -4187, 4811, -2447, -8949, 7291, -1382, 3327, -5391, -2866, 4388, -1203, -6716, 176, 8175, 6499, 7956, -979, -4184, -4811, -6487, -9030, 6281, -7084, -2081, -3000, 2819, 6358, 4514, -3096, 6107, -4979, -9651, -8086, 1660, 7510, -5689, -8367, 2426, 1639, 1184, 577, 1545, -7219, 9513, 5071, 3740, 9464, -8632, 606, 4298, -2706, 9989, -9028, -7158, 8793, 5151, 3384, 8469, -9226, -2550, -647, -9031, 2347, -2750, 5130, -4738, -4692, -5106, 8651, 4087, -3833, 5552, -7067, 2115, -1619, 8586, 404, -7464, -8318, 8273, 6314, -9802, 2722, 3353, -6469, -7757, -1602, -2374, 7966])
const QfzAfNWv = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const jhoud = new Float32Array([9177, 5680, 7478, 354, -8079, 6656, 6040, -1531, -5100, 116, -6329, 3649, 6991, 8856, 2354, -4728, 4071, 7348, -6930, 9950, 1379, -9557, -4234, 6430, -6309, 8473, -1181, -3779, -1670, 1296, 3792, 6082, -5996, -83, 635, 5970, -6987, 5860, 5442, 504, -7058, -1999, 3393, 6060, 6240, -1679, 7095, -6052, -2420, 9966, 263, 4846, 8565, -4002, 3600, -6115, -7469, 2637, 5330, 331, 2291, 3713, -1562, -6919, -9902, -1822, 189, -6288, -5067, 9961, 2853, -6192, 8698, 8837, -4355, 9361, -3542, -1562, 3432, 9263, -6374, -5643, -4433, -2039, -582, 534, -4126])
const zTOTuvkfNRad = new Int8Array([-3754, -6123, -3660, -3447, -3001, -5832, 9854, -9956, 691, -5115, 4568, -900, -5802, 8627, 1721, 9063, 2695, 21, -6723, -4697, -8108, -7068, -8969, 2058, -6087, -6305, -6243, 3553, 8264, 1563, -7718, 4625, 8522, 2727, -8784, 7649, 834, -1413, 3783, 2982, 832, -6943, -4553, 3207, -4723, -4247, 65, -5602, 2744, 5990, -9337, -9209, -6889, -5151, -5804, 6205, -4684, 4044, -7190, 501, -4712, -5635, 1719, 4344, -2702, 3812, 9281, -6865, 3799, 4791, -2682, 7485, 7480, 843, -1321, -349, -1188, 9257, 9661, -5107, -9253, -9518, -6376, -8958, 334, 3054, 8114, 2892, -6495, -6564, 5388, -8774, -9255, -1611, 216, -8915, -6057, -2146, 1107, 373])
const GqUMcfoUNjycV = new Float32Array([-7192, -2889, 5141, 5769, -7671, -5950, 5574, -5233, -2628, 5457, 9952, 6206, -1506, -7730, -6902, -3665, 907, -8555, -3844, -789, 8473, 3476, 9770, 6760, -9043, -2066, 9401, 1164, 9442, 8373, 6212, 9046, 143, 1708, -1462, 3025, -6969, -5913, -2657, 7616, 6066, -8159, 8639, 2532, -4476, 1275, -1068, -7414, 9353, -1593, -4868, 1783, -7732, 8798, 9295, 1325, 2853, 3146, -2973, -9002, 9473, -7922, 1975, -5770, -6592, -7672, 4971, 1921, -1439, 9813, 7113, -7876, 129, 3277, -1708, -1414, -8140, 7668, -7230, 5170, -3746, -7463, 7755, 5390, -2514, -3132, 8981, -8456, -1540, -9524, 6138, -2286, 65, 9698, 2549, 5420, -3011, -9906, 316, 1214, 1754, 8783, -8460, 2819, -598, -1719, 7233, -1189, 4278, -987, -2091, -8780, 7336, 7759, 340, -4276, 1335, 1133, -6469, -1040, 1218, -5158, 3776, -3287, -9666, -3869, -4306, 9128, -6639, 3247, 2776, -9967, -7492, 1543, -7609, 29, -3051, -1259, -9928, -8451, -2618, -2145, -5019, 6403, -7884, 506, 737, 2482, 3790, 2128, 1045, 4271, 9811, 8022, -1183, -4695, 6641, 9013, -9184, -3918, 2562, 8436, -2073, 1611, -9940, 3401, -5175, 8176, 5513, -3768, -9181, -7676, 3006, -8051, -1151, -6915, 6803, 7339, 9295, 2513, 1000, 8000, 5278, 1544, -8385, 6863, 4562, -5547, -3309, -3735, 8761])
const ZlXzFXQBfoeuoNyJd = new Float32Array([-9219, 1787, -5801, -9917, -6118, 3520, 8353, 6723, 1764, 4297, 8351, 8684, -5233, 4168, 2413, -2399, 2083, 3149, -4549, 8090, -3287, 994, -1499, -5327, 9653, -2213, -951, -763, -4221, 2971, -7019, -6604, 7717, 3288, -7361, -7758, -9756, -7226, -188, -9052, 2400, -7012, -990, 8743, 9514, 9836, 500, -9447, -9184, -9742, 2122, -5354, -621, 9136, -5657, 6995, 4816, -8603, 2736, -5926, -3912, -2574, -2776, -7262, 4083, 2724, 747, -1713, 3401, 4183, 10000, 6267, -6870, 2755, 2257, -8558, -5891, 9125, -8943, -7172, -8261, 8358, -8479, -2925, 3778, -6971, 6992, -6956, -7206, -520, -675, -6739, -5181, 6325, 5702, 7757, 28, -3784, 2931, -1222, 6812, 7379, -596, 7379, -9137, 6899, 540, -8743, 4748, -6629, 5727, -2144, 4202, 6945, -5695, -3865, 7586, 9620, -3072, 68, -7970, 50, -4552, 1774, 1608, 10000, -6366, -7126, 6431, -7082, -9327, -3999, -4971, -1538, 973, -9757, 4970, -4121, -4861, -9514, 3919, -6957, 9122, 712, -8591, 6403, -7257, 2282, -4064, -61, 9723, 3877, 2273, 5321, -9315, -1246, 4894, -3904, 8081, -7546, 6862, 7122, 91, -5630, 1236, 5883, -849, -4893, -3814, -9417, 5933, 3481, 9920, 2172, -3106, -4218, -6345, 3351, -5622, -2464, -8330, 6946, 385, -9692, 4377, 4013, 950, -7989, 2828, -816, 3040, -1972, -1005, 5632, 9745, 9999, -5685, -748, -1215, 2621, 4456, -6395, -2825, 7416, -6483, 9362, 5716, -458, 7396, 9288, -1647, -2199, 345, -4292, -6017, 5472, 3332, -8223, 4969, -580, -6223, 1246, -3431, -2039, -3824, 7866, 333, 9879, 5478, 5946, 6007, -5107, -9879, 5735])
const xDAprQlbtduOGooElXfZ = new Float32Array([-4266, -9960, 1252, 2548, -2205, 2207, -3393, -2525, 2164, 61, -6650, 9715, 451, -8733, 4597, 8347, -2138, -5632, 5327, 3581, -4586, -6365, 5756, -1625, 2623, -7574, 1621, -5666, 8286, 7440, -3359, -9864, -8819, 8970, -8939, 2836, -7894, 1766, -944, -1466, -2883, 7596, 9915, 6333, 7607, -8116, -4466, -439, 9302, -8190, -1113, 8647, -4220, 6720, -5465, 5086, -721, 6775, 3204, -2017, -9204, -670, -8190, 1855, -8928, 4731, 419, -8242, 7891, 6256, -2618, -2733, 1714, 2121, -3100, 1181, -5808, -3065, 5646, 378, 269, -2079, -9507, 7580, 3001, -327, -3839, -2309, 976, 1959, -4896, -752, -7840, 7370, 850, -1318, -1102, -4003, -434, 7754, 47, 1699, -3517, 7548, -8369, -2523, 8726, 5200, -2662, -546, 4932, -2548, 1896, 6587, -9093, -541, 5458, 4038, 6901, 161, 9860, -9148, 2264, -793, 1739, -5366, 6462, 6751, 9617, 625, 4156, 5615, -5835, 7665, -5996, -1609, -6998, -3279, -5743, 6327, 2659, -1598, 5501, 842, -5055, -1002, -3106, 3251, -8303, -9739, 4998, 6806, -5210, -8414, 4610, 6539, -1898, -8321, 635, 1359, 9123, -6442, -2832, -2831, -7065, -422, 2390, 2495, 2892, -9257, 986, 5821, 9833, 2663, 7702, 522, 536, 8098, -9036, 8250, -6049, -2661, -9762, 798, -782, -7778, -4580, -9673, 407, -969, -9762, -9131, -8716, 7989, -1734, 6777, -3509, 9364, 5672, 7020, -4106, -2229, 1227, 3768, 2057, 326, -1156, -2380, 9242, 8031, -9716, 7597, -6163, 1163, 7896, 5991, -6826, 5497, 2517, 4726, 5405, -4249, -7248, 6871, 5790, 8389, -9419, -4629, 2952, 4230, -2740, 791, 9618, -5319, -3596, 9351, -3648, -9321, -7369, 1338, 7402, -9296, 9181, 9071, 3510, -3769, 5659, 8521, -6629, -1954, 5103, 1052, 2841, -6132, 3300, -8499])
const uTCjexOQe = loadShader('../WebGlitch/rsrcs/shaders/compute/3.wgsl');
const YPkHkDdYgoYnnVwyO = new Int8Array([-4096, -5652, 8183, 6771, -6930, 4561, -1598, 1829, 7041, -934, 4699, -3389, 7766, -7831, 2410, 9422, -7967, -8437, 7413, 8076, 4827, 4957, -1780, -2345, 4717, 7704, 9893, 6779, 8422, -5224, -1742, 8653, -4309, -3701, -914, -4427, 303, 8074, -8850, 6255, -8016, 9917, 1645, 7108, -1775, 9889, -5320, -7344, 5737, -214, 2923, 3471, -3289, -7924, 2062, 6542, 5317, -8254, 7277, 120, -8410, 5117, 8781, -828, 3711, 9883, 1174, -2891, 4091, 2568, -3767, -4543, 5306, -6611, -7883, 6535, -5921, -268, 6956, -6699, -5607, -4105, 4225, -3734, 3968, -7794, -8399, -1686, -7510, 1325, 8942, 8698, -8256, -6597, 8332, 9518, -2130, 6655, -3160, -8909, 8890, 7190, 1174, 1291, -4530, -4950, -2591, -1415, 5087, 6155, -4291, 2273, -8994, -3153, 6897, -5489, -7735, -1640, -1283, -3380, 8006, 84, -3982, -2131, -5116, -1148, 7741, -7076, -2897, -769, 3479, 9717, 9425, -3143, 4450, 6754, -7854, -296, -4060, 3042, 5654, -2644, -4230, 6165, -8839, -3000, 3182, 9391, 8366, 3917, 2683, -6817, -8679, 7541, 4586, 5195, 733, 1030, -9995, 2962, 9064, 3035, 1946, -2393, -5845, -9665, 9297, 1511, -5615, -7211, 6180, 6972, -6896, 1775, 1457, 1115, 9742, 2378, -1518, -2224, -9669, 1933, 2632, 3130, 1289, 877, 4633, 3737, -8673, 561, -6122, 1355, -694, -3482, 6844, -9602, -9681, -5326, -4080, 9984])
const gBeCHjvhgIzP = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/fragment.wgsl');
const iGoXASMXpvDbIWG = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/fragment.wgsl');
const tpelMCMDgjHedr = new Int8Array([-9843, -6406, -7663, 6392, -1123, 1610, 1461, 3789, -9126, -913, -6570, 7900, -9457, 4116, -914, 4226, -646, 7256, 6152, 8465, 8781, 2811, -6480, -5130, -2151, -8816, 3242, -9450, 7546, -5095, -5093, 8266, 9571, 2519, 9410, 27, -8075, -7486, -1411, 319, -9416, -9280, -9318, 2994, -760, -4024, 7074, -3676, -5496, -7253, 310, 2004, 2341, -7572, 943, -5927, 5399, 4391, -9781, -8131, 7435, -3355, -8002, 1975, 3957, -345, -2297, 2298, 2957, -9338, 8593, 8708, 3180, -8880, 3863, 6514, -2126, 49, 9271, 3137, 4016, -3497, -9572, 9261, -6337, 8349, 7319, -9110, -8496, 9233, -342, 3392, -6402, -7007, 5346, 2411, -2866, -4313, 8012, -7288, -7773, 9163, -6522, -2013, 3631, -4357, -6371, -8581, -9166, -883, 9276, 8536, 8236, 5030, 4200, -335, 8925, -7694, 3626, -9848, 2527, -9812, -1108, -2594, 8722, 8436, 4781, -6744, -9234, -4398, -6041, -1225, -1107, -8727, -629, -1343, -169, -9365, -8393, 7418, 1196, 2749, 6535, 9869, 3693, -1814, -170, -2793, 8649, -779, -2156, 4088, 9777, -5492, 3765, -7181, -1154, 2777, -8323, -5539, -5000, -1115, -5917, 5554, -3645, -7199, 5481, -2505, 8671, -1839, 2934, 284, 482, -6986, -1120, 7990, 4313, -5524, -8125, -2020, 5299, 1078, -5412, 4400, 2052, 5282, 1766, -7565, -7333, -4947, -5901, 6014, -3759, -9669, -2575, -5828, 2499, 5569, 5270, -1532, 2441, -2191, -1463, 8887, 1862, -2766, 7202, -2733, -5012, -8956, -2301, -7650, 8189, -1718, -7593, -5252, -9730, -4358, -9633, -7307, 6480, -6088, -5801, -4224, -5166, -5733, 7751, 3877, 4117, -2027, -7853, 6729, -5361, 3473, 9001, -4972, -5781, -1739, 2499, -7411, -3190, -2348, 7530, -1510, -6820, -8759, 2230, -4968, 4382, 3428, 4734, 9829, -6407, 8185, 9515, 6974, -3837, -1526, 8950, 7210, 5064, -1057, -2641, -6405, -9960, 8388, 6763, 7268, -6386, -3088, -6327, -7371, -6498, 5368, -3926, -861, -1228, 5464, 692, 6081, 3292, -6972, 3888, 5487, 8248, -6315, -3256, 2309, -3226, 3847, -1174, 5971, 3485, 5507, -5263, -6553, 3012, 2805, 9910, -6157, 6789, 4472, 7940, 7535, 3002, 2717, -4591, -2837, 4177, -4508, 6940, -3627, 8715, 5127, -5840, 5498, -2750, -726, 7088, -9484, 1127, -3702, -7090, 5395, -2114, 7230, -4683, -2113, -1298, -6588, -9427, -2992, -9346, -72, -9428, 2895, 2798, -6943, -6860, -4258, -4814, 1426, -1502, 6377, -9377, -4973, -5190, -3299, -8315, -9922, 5014, 5357, -3841, 692, -8451, 9120, -2833, 9631, -2357, 5543, -2643, -9251, 6325, 5314, 2907, 7032, 9836, -8155, -1909, 6866, -5821, 1085, 6914, -5960, -8461, 5146, -4756, 2598, 9314, 6712, 7294, -8634, -7471, 4723, 7635, -8095, -3919, -7621, 887, -895, -2277, 9134, 4299, -4433, 2219, -1532, -3009, 1206, -2476, 1120, -2797, 6401, -8042, 8359, -4282, 5055, 5339, -1974, -8841, 5684, 2992, 5911, 8625, 7267, 8048, -2463, 9207, -3255, 1780, -4024])
const buPNlkSIMJykMwmE = loadShader('../WebGlitch/rsrcs/shaders/compute/1.wgsl');
const NuZMnCeCMDdve = new Int8Array([-6834, 3269, 9982, -8281, 5837, 873, 7977, 1032, 1347, -4673, -5755, 6890, -1651, -1387, -2454, -1673, -5919, -614, -9894, -5632, -8812, -2846, 6534, 1174, 3451, -235, 7988, 1976, 7541, -1637, 9828, 4005, -1297, -4355, 9064, -2710, -4525, -4978, 6422, 1700, 3186, 3102, -5884, -4708, 549, 8143, -9655, -5837, 6661, -3347, -7123, 791, 9656, -9635, -2458, 8548, -9477, -7985, -2483, 4541, -5123, 3440, 2909, -2116, -3125, -3096, -2626, -416, 1138, 2319, -69, 7625, 5732, -9297, 479, -3956, -5610, 9628, 5225, 8853, 2100, -4310, -2746, 6043, -2250, 9213, -2071, -8248, -522, 9014, -2246, 1348, 9262, -1304, 7343, 9218, 3627, -8884, -4193, -7909, -1423, -7172, 2032, -9616, -4146, 7665, -2568, -6938, 7308, -9576, -4712, -9839, -5021, -4072, 2224, 6702, -5235, 2962, 6837, -9100, 4959, -927, 9650, 9860, 8851, 7616, 5285, 2132, 4227, -9179, 4720, 8167, 7941, -2556, 383, 1538, 5592, -200, 1292, 6014, -2457, 1870, -1587, 7966, -9484, 4677, -4004, -6081, -3467, 1487, -4110, -9890, -645, 7786, -4770, -8997, -6997, 7659, 2254, -5579, -2780, -988, -6595, -5248, -8622, 4500, 8387, -4215, 2047, 6202, 4581, -3814, -4841, 9326, -3869, 8152, -2929, -5295, -2893, 7126, 448, -7073, -1833, 2253, -9366, 7320, -7633, -1531, 6843, 4574, -2589, 5791, 9607, -1483, -7930, 885, -9681, -6249, 1008, 1425, -9935, -4797, 2219, -9671, -4086, -9297, 8978, 5384, 8357, 8160, 222, -5532, 2630, 5570, -8031, -8429, 2147, -9848, -9768, -7627, -4201, -8188, 6020, -4915, -9083, -8197, 1407, 9086, -8488, 2383, -9150, -2593, 5169, -5580, 1078, -1502, 5942, -2828, 9018, -8750, 255, -6417, 1756, -3023, -5589, 1629, 3795, -8380, 7681, -6493, -7338, -9001, -1732, -7517, 9185, -5362, 850, -8104, 947, 9906, -3523, 1855, -7384, -4645, 3919, 1165, -5939, 1962, -692, 7469, -2323, -2456, -1259, 6030, -8411, -2857, 725, 5028, 4698, -4962, 9885, 1721, -8966, 5505, -1990, -4752, 9255, 113, 911, -9772, 7572, -7608, -3090, 3070, -7522, -9486, -1512, 6928, -6175, 2552, 1242, -6780, -6690, 8886, 9846, -2524, -7028, -879, -1700, 1543, -9954, 22, -5133, 703, -3781, -1252, 4899, -1202, 6469, -5328, -382, -1136, -4879, 22, 8851, 2604, 9558, -4666, -9943, 3162, 3586, 4869, -9236, 9036, -9885, -4874, 9570, 8940, 3873, 4052, 391, 8763, 4765, 8181])
const jsYOUCQHxzwEvdFEUQa = new Int8Array([6795, 8065, 1974, -2348, -2057, 523, 7718, 5669, -8186, -9563, 5743, -1465, -9889, -5952, -7281, -4101, 298, 1847, -6484, 7261, -7640, 598, -7171, 8577, 7056, 8837, -2601, 9526, -4131, -8072, -8827, -8727, 3986, -6441, -386, 4603, -252, 3659, 2482, 4097, 4249, 2813, -6581, 4738, -6445, 2977, 3340, -1077, -3248, 125, -8522, 5742, 3366, -3317, -4110, -3119, 1839, 5074, 1617, 6717, 4506, -5452, 2786, 6291, -7836, 6192, -1167, -8842, 4268, 8077, 4923, -8123, 2902, -1526, 8760, -8977, 3613, -1774, 3785, 3447, -505, 524, 1709, -6839, -3856, -4638, 4531, -8259, 7521, 6841, 928, 2139, -7586, 1222, -4837, 5130, 4754, 9124, -1158, -8007, -223, 2091, 7781, 5627, -9219, -9766, -1816, 5429, -4262, 4216, -215, 8412, -3434, 5357, -8321, -463, -2384, -431, 5058, -8244, -2059, 5781, -1893, 2404, -2551, -1161, -7591, -8934, 3947, 6976, -3619, 1972, -1822, -9305, 1777, -1217, -3453, 3456, 3063, 7075, -9691, -252, -1638, 9147, 9198, 7528, -4817, -9706, -2015, -4056, 8357, 8568, 7508, -7377, 5073, -8220, -6117, 8886, -1888, -7911, 8778, -9121, 7148, 4226, -6218, 5521, -2973, -417, -4404, -5034, -7312, -5973, 3629, -7303, -7519, 4312, -5537, 2151, -6831, 2382, 3202, -3897, 4114, -5281])
const wYiZkaj = new Float32Array([-8939, 8946, 1651, -7590, -6766, -2651, -9321, 9046, -5388, -4814, 6881, -4681, 642, -1990, 7649, 9047, 4900, 7147, -1990, 4013, 5814, -2043, -9964, -1041, 8114, 4978, -2962, -6315, -9637, -1844, 1219, 9368, 7836, -1572, -4592, 8748, 6890, -3481, 6429, 8301, -6428, 3557, 803, -1299, 1197, 9328, 483, 1335, 6743, -9444, 8980, 2545, -7163, -7009, 6794, 150, -8880, 1741, -6985, -2431, 7728, 4914, 5642, 8896, 6297, 5652, 437, 6721, -9095, -4328, -1082, 6074, 4796, -5449, 7519, -6314, -2204, -6207, 8744, -8653, 3972, 4117, 6181, -2873, 8599, 6680, 407, 804, 6666, -6427, -7779, -7014, -9650, -9752, 7103, 4241, 2853, 9500, 1442, -2351, 8943, 8635, -4098, -4808, -9977, -1259, -1675, 6647, -1263, 5432, 8482, -267, 8588, 6852, -5317, -9107, 6648, -4225, -1743, -1846, 6538, 3935, 5055, 4334, -3982, 4954, 6685, -6188, -511, 2360, -8053, 7629, -2257, 5636, -7494, -3678, 4436, -9866, -6260, -5159, 1113, 287, -368, -8177, 537, -3870, -6963, -8722, -4848, -6177, 2290, -421, 9344, -8553, -5306, -9642, -2065, -3534, -5162, 8799, -6251, 8214, 8766, -6773, -6755, -3851, -1261, -1372, -6538, -8271, 4651, 7761, -4602, -4375, 9462, -9321, 587, -248, 6960, 5714, 7559, 8797, 545, 5332, -6451, -826, 341, -4531, 9060, -2755, 6853, 8495, 3962, -2046, -7023, 6423, 3182, -8513, 8245, -5240, -5689, -2688, 4322, -6536, -9818, 8823, -7675, -5366, -4018, -451, -4088, 3197, -6884, -2898, 6328, 1311, -3026, 1420, 1429, -3371, 3225, 3420, -7813, 470, 9003, 4939, 424, 3903, 7326, 2732, 2484, 1569, -2212, -1456, 3598, 8762, -5962, 5952, -7067, 9348, -7375, 6745, -1606, 2890, 8887, 4441, -4050, -6296, -8194, 2695, -2062, -4635, 9556, 3022, 216, -8115, -1820, -4552, 7555, -3234, -5533, 1199, 6392, -2529, -8888, -2864, 6732, 6944, 3583, -3896, 5444, 8073, -1340, 9773, -8474, 8587, -12, -4404, 2940, -9118, 977, -700, 7964, 5355, -7513, -5521, 7268, -6914, 4503, -3406, -9496, -4252, 1914, -9942, 4575, -5618, 6147, 2311, -2154, -4603, 3547, -9707, -5792, 2722, -8226, -7082, -884, 6498, 7840, -3811, -6859, 2521, -4840, -4585, -1410, 1403, -957, 2148, -5961, -3005, 4336, 521, -5588, -9195, 7994, -9883, 8516, -9980, 9547, 3115, -5468, 2403, 7006, 6562, 2451, 6867, -3021, 6023, -6916, -7380, -7318, -5471, -7421, 8283, -2816, 6917, -6905, 9123, -7357, 3491, -2202, 7533, 7891, 8854, -6356, -2621, -1737, 2798, 4788, -6616, 9958, -2347, 1856, 9636, -1229, 6632, 1182, 2080, -3051, 7331, -5468, -9133, -5669, -5965, -8454, -1369, -2703, -5417, -2500, -3067, 4408, -8101, 5179, -5015, 8668, -4709, -2865, 6792, 6098, -157, 5445, 9665, 2012, 1823, -5109, 4071, 6382, -7270, -919, 7395, 4926, -7239, 9109, 786, 2094, -9135, 4714, -8295, -7883, -4733, 4852, -4734, 3546, -3711, 9543, 5071, -1405, -2238, -6513, -7373, -5568, 2776, -3381, -4453, -2863, 1483, 263, 710, 8228, 9913, 4716, -4184, 5539, 641, 2476, -1183, 5245, -9043, 1431, -7907, -892, -4064, -6267, 5542, 9882, 3764, -4557, -2270, 2141, 3598, 7215, -625, -9508, 2574, 8372, 4180, -6034, 6437, 174, -5510, -9817, 9467, -1452, -6984])
const SRxXzCTAG = new Int8Array([-6829, 1285, 5770, 1672, 472, -786, 8221, -2918, 6210, -6790, -1099, -9025, -3158, -3559, 3935, -1629, 3770, 4624, -5807, 874, 7526, -6962, 5850, 9450, 1006, 5748, 235, 4178, 4569, 6900, -6341, 8800])
const jBRbdOMiGc = new Float32Array([-6590, 1308, -9068, 4483, -9789, 3371, -2398, 4370, -8369, 8480, -4265, 9180, -8768, 3445, -6554, 203, 3005, -1640, 6402, 7953, -5577, 3746, 7811, -3904, 8156, -3632, 2575, -9332, 5979, 8257, 2736, -1938, -756, -9497, 320, 131, 6119, 9348, 5791, 8128, 6102, -3493, 8104, -1639, -6088, 2950, -2093, -4137, -398, 6624, 9258, -949, 9349, -5984, 6186, 5959, 1372, -2081, -9248, 2120, -4547, -976, -5060, -589, -1354, 5950, -8059, 8575, -8767, 6934, -7614, -1274, 7361, -5455, -6240, 9764, -7248, -183, 3577, -9049, -9897, 3229, -1835, 615, 7038, -312, -1618, -3162, 3864, 2907, 2404, 8087, -839, -7976, -4322, -8012, 8459, -9966, -9531, -5627, 9868, -7067, -4284, -6942, 280, -5170, -7994, 3662, 9665, -4980, -2784, -6618, 8065, 7014, 47, 9277, 9354, 2051, -7788, 6750, -370, -7926, -2346, -840, -9263, 1293, -443, -2065, 8328, 6870, 8917, -2025, 1224, -3995, -1219, 1548, 982, 8169, -7263, -9950, -7824, 8632, 2810, -5940, 7385, 1238, -3207, 8425, -6246, -9568, -9730, 4293, -2266, 6842, 6995, 912, 7997, 397, 3438, 4582, 4684, -2001, -9938, 3489, 4854, -5039, -8672, -3337, 1204, 1222, 7230, 9255, -6638, -6182, -1355, 3451, 1629, -4083, 8243, 4073, 2982, 9074, -1410, -4987, 3954, 9915, -2801, -6502, 2060, 2190, 4158, 6972, 1399, 6168, 3725, -7640, 3109, -4439, 4807, 1718, -5149, 399, -7384, -3945, 9411, -3753, 7936, -6039, 1528, 1353, 4371, -3254, -6534, 4260, -3542, 495, -850, -8995, -1748, 3035, -8581, -5904, 9200, 4924, 4766, -5628, -2239, 7832, -2918, 9308, 1398, -3995, -2804, -2532, -8332, -3135, -5907, 2872, -9807, -4187, -9122, -4579, 2270, 4505, 9675, 7265, 2498, 2038, -8430, -4915, 3603, 4985, 6314, 8247, 8466, -5602, -3924, -6571, -2528, 6232, -1871, 8402, -8257, 225, -1173, 4120, -248, 2053, -8192, -5260, -9685, 8958, -2166, -3039, 2559, 5693, -2826, -3376, 6556, -4320, -3200, -5187, 6320, 9076, -4755, 9459, -62, -5213, 8776, 2977, 8971, 7881, -3383, -9858, -8135, 7083, -2638, -5238, 9418, -1252, 1482, -1986, 5635, -364, 5994, 357, 2682, 7713, -8121, 5990, 2046, 2035, 3273, -3802, -8634, -6101, -5636, -4257, 6659, -7167, 4359, 3309, -5796, -6100, 7642, -9946, -4705, 7056, -6330, 574, 8673, -3986, -3289, -9830, 3249, 431, 7388, 8775, -125, -5394, 5222, -7296, -9854, -2762, -6201, -5050, 972, 6772, -3325, 9226, 9930, 6195, 4011, -752, -5866, 785, -6025, -6716, 203, 4458, 7262, -751, -8222, -1594, -6012, 2100, -970, -2237, -1484, -6287, -7598, 1571, -553, 4521, -4391, 3828, -827, -5103, 4980, 5827, -3810, -3213, -1046, -7525, 9226, -3744, -5276, -2394, -5649, -617, -342, -171, 3626, 2512, 5122, 5382, -6577, -7415, 4583, -1329, -6360, 2973, 3968, -2867, -6270, 4251, -453, 2739, -7089, -8021, -1770, -1461, 6342, -8637, 9248, -2093, 7936, -3985, -9140, 8433, 5720, 702, 7801, 6344, -6706, 235, -9745, 2825, -5921, -7368, 5654, 4124, 1121, 62, 2660, 4817, 9254, -4657, 110, -2223, 8759, -7128, 136, -2644, -9922, -764, 7265, 2655, 7293, -3196])
const BJTSpm = new Float32Array([-5633, -185, 9486, -1946, 228, -1736, 7767, -2462, -7624, 3425, -8356, -1922, 5004, -5272, -6369, 4087, -3580, -1700, 8240, 8717, 802, 9670, 8350, 789, -4075, 5329, -2961, 7184, -1360, -5719, 4809, 7610, -1905, -137, 9485, -4512, 4378, -1146, 1330, 7853, -8157, 1828, 4320, -8139, -4122, -9545, -6479, 7416, 3422, 7511, -9643, 6227, 9471, -8594, 9525, 786, 7897, -7273, 3366, 2880, 3364, -6770, -3561, -1605, -7589, -3601, -5260, -5765, -9148, -9260, -4946, 7020, 3249, 463, -5964, 4662, 4928, 1955, -9982, -5357, -5228, 9749, 5808, 7109, 7452, 1075, -7059, -4117, -4345, -2360, -7343, -8452, 8409, -4415, 5571, 2372, 1616, 8710, -9783, -7246, 6092, 972, -320, -1897, -7288, 9338, 631, -3156, -4975, 4746, 5172, -602, 4112, -5242, 2665, 5403, -5920, 5523, 2815, -6898, 955, 1721, 3131, -741, 6310, -9858, 1848, -7024, -8777, -9479, 4057, -116, 984, -1628, 8129, 520, 4172, -7432, 632, 7507, 2642, -8721, 8233, -7691, -6614, -9608, -2370, -9797, 9351, -9939, -5135, -2706, -2017, 7119, 4725, -8835, 5843, -9282, 8505, -9006, -2952, 8932, 2068, 4670, -861, -2844, -3685, -2124, 9028, -2148, -7184, 179, 2875, 4564, -3325, -3085, 7873, 5162, 8500, -5693, 8637, 3480, -9627, -5941, 8814, -4875, -78, 4602, -9195, 6506, -5616, -5641, 3562, -2039, -7230, -7395, -1289, 3300, 9699, 100, -7772, 8414, 7965, 6968, -3897, -4585, 1734, -5299])
const ANiKtRtFMHjCGv = new Float32Array([8044, -6475, 8637, 4971, -9639, 3465, -6243, 188, 8771, -100, 8552, 2598, -4384, 5916, 7948, 5666, -819, 1578, 582, 4355, 759, -7625, -2920, 5297, 7358, 2031, -6597, 3227, 6128, -7044, 4611, 1349, -1746, -1625, 9633, 5509, -2370, -6026, 170, -9779, -3613, 4059, -7652, 3818, -1062, -3336, -1020, -3613, 2129, 8766, 7917, -7637, -9489, -3194, 3878, -6835, -5592, 3437, -8702, -4797, 1629, -9898, -2453, -447, -4370, -3230, 3363, -7181, -882, 1232, -226, -1808, 4230, 5907, -9222, -5018, 7912, 3338, -4837, 1374, -7581, 147, 7617, -1073, 8444, 5408, 5399, -4983, 7801, -6251, -4341, -6203, -3955, -4337, 1584, -3240, 1120, -5114, 4893, -5273, 5618, -8130, -4195, -9191, 2028, -7331, -7329, 3219, 7178, -3156, -6491, 6728, 9554, 5840, -8890, 2411, -3677, 4811, 8748, -3953, -270, 6920, 1961, -5566, -8618, 7475, -6615, 7688, -2961, 6977, 3724, -8257, -9840, -7277, 281, -8577, 9592, 3348, 9346, -7350, -2568, -3279, 9584, 7822, -3288, 8183, 2556, 8766, 909, -237, -6036, -7048, 6522, -9524, -8188, -8038, 2231, 4055, -4265, -4018, -6146, 3491, 9243, -4541, 1982, -2992, 8577, -1199, 5133, 7494, 1281, 3762, 1757, 1159, -9881, 4283, -3633, 9968, 5833, -1054, -4152, 9290, -7138, -1535, 9821, 192, 4992, 4130, -2662, -3340, 5670, 1668, 7819, -7142, 6889, -4369, -9055, -2154, 8290, -3567, 7414, 5473, -9900, 3729, -1576, -2222, 8009, 784, 7318, 1325, 9594, -9515, 1840, 9140, -2608, 7926, 6368, -5276, -2876, -3391, -843, 599, -9084, 9179, -6598, -1009, 3417, 5024, -7085, 5170, 1701, -902, 5415, -4428, 6319, 1415, -1016, -4117, -9406, 390, -6837, -4755, 3142, 6020, 5751, -9463, 9401, 2532, 1007, -5799, 943, -4634, -2136, 455, -6525, 9684, -9231, -8946, 8915, -3332, 939, 4847, 2529, 7629, -2363, -9953, -8744, 782, -9508, 5528, -4541, -2794, -9192, -4288, -5462, 4329, -2005, 6607, 7810, 4397, -5687, 7628, -5402, -2220, 1038])
const AoCFDiIRPRuXwmmKgAIp = new Int8Array([-5773, 4106, -8649, -5645, 3652, 5849, -7701, 7645, 4846, 9175, 9314, 1928, -9971, -321, -2691, -8880, 2639, -1021, -2293, -2684, 5055, -495, 5495, -2154, -1979, -2986, 9984, -4071, 9466, 2242, -3578, 866, 7061, -4738, -8947, -6550, -4076, -4196, 4907, 2102, -2826, -6593, 7579, 4313, 7111, 3810, -35, 2289, 4542, 8941, -6330, 9298, -3460, 7978, -6640, -4931, 7120, 9602, 9289, -7686, 4234, -7362, -4602, -3762, 4102, 8286, 7229, 2267, 8874, 9889, -7536, 6584, 19, 6446, -804, 1826, 9664, -6900, 8024, 4548, -8487, -3481, 2212, 1443, -7879, 8506, 1989, -3196, 4796, -8152, -6121, 6357, 5749, 1393, 9731, 3501, 350, 6810, 9350, 3791, 8954, 1021, -8859, -6481, -5478, -589, 7634, 5349, 2698, -7184, -7842, -3704, 8598, 1890, -3477, 9010, 6734, -4658, 9448, -1232, 5187, -3758, -4379, 6626, -1240, -5324, -342, -2313, -5119, 3439, -5501, -2913, -6798, -7400, 8147, 7185, 3805, 4601, -2009, 34, -7101, -9182, 4247, -841, 6872, 8401, -170, 1327, 8348, -2834, -9719, 4854, 9289, 517, 6997, -347, 8571, -23, 8383, -6373, 5914, 6943, -4280, 9044, -6432, -8363, 8514, -6840, -5033, 776, -2874, 1109, 5269, -699, -6181, -8952, 1604, -9880, 5946, -787, 3799, -6307, 5834, -2169, 7105, -1155, 8880, 2315, -7497, -4060, 4917, 9278, 9904, -119, 4248, 7634, 10000, 8793, -9015, 5559, -5418, 5095, -9833, 4165, -3888, 130, 8170, -8670, 826, -3786, 2897, -3889, -8142, -450, 1210, 3507, -4969, -3693, 9914, 4384, -2137, -3141, -6718, 123, 4416, -3830, 1679, 2494, 8331, 2297, -8184, -3106, 7221, 1684, -7750, -2412, 4515, 35, -7318, -5362, -8484, 9097, 6827, 1316, -1795, -5780, 9588, 8564, 1274, 4999, -4569, 9391, -8735, -81, -5187, -6277, -334, -7200, -1421, 9345, -2381, 4582, -4653, -8246, 5135, -824, 9198, 2032, 9003, 8938, -528, -7391, 6444, 4998, -2416, 1803, 6008, 5771, -547, 6755, -3270, 4801, 536, -5503, -2753, -8719, -5973, 7896, 5013, -7335, -4409, 5917, 5319, 5350, 5057, 6837, 4706, -3949, -1461, 8309, 6413, 4885, 2746, -396, 3502, 9235, -4252, 8473, -8803, -9112, -5695, -7269, -980, -6767, 9933, -148, -8036, 6093, 7826, 2517, 858, -5907, -9022, 84, 1659, 3876, -8847, -3807, 93, -2264, 9246, 9764, -7768, 4430, 9935, 4971, -1740, -2389, -3317, -5977, -2929, 4495, -3793, 2821, -4525, -7468, 7038, 9500, 7111, -586, -9176, 5208, 1306, 327, 431, 9510, -1864, 2391, 5157, -2284, -2403, -8731, -7972, -879, -5702, -9211, -473, -5601, 9006, -4673, -5591, 5939, -4087, -7806, -6563, -274, -6775, -6754, 3789, -7064, -4579, -3335, 8664, -532, 9691, -9403, 2382, 8848, 7789, -9909, 780, -2614, -216, -8266, -7917, 3989, 7980, 12, 9572, 8984, 4770, -8228, 9008, 1334, -8655, -7701, -569, -4667, -9428, 6224, -6766, -7811, 4083, -7807, -8366, -1215, -7250, -5141, 9079, 5661, 5610, 9637, -7955, -5231, -8745, -1193, 2163, 4053, 2382, 4908, -8054, -8024, -9963, -7168, 9897, 5749, 2569, 3015, -925, -8603, 1971, 5075, 2803, -4425, 425, 9686, 2331, -5172, 6283, 351, 9673, 6221, 6101, 9145, 21, 6272, 9532, -6091, 8320, -5633, -4514, 5843, 9385, -7676, 800, -7198, 308, -147, -7860, -3131, -1612, 9498, 6620, 740, -6844, -6742, -8910, 7452, 2224, -4673, -8460, -6076, 8822, -661])
const uXSrYcuZofP = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const IFtiDTvPTBlMdNHfg = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/fragment.wgsl');
const ibuZiouL = loadShader('../WebGlitch/rsrcs/shaders/compute/exemplar1.wgsl');

async function main() {
    const ChkNj = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    const jrjTClsNTJ = await ChkNj.requestDevice();
    const mpstlyDJUgECbyPxAu = jrjTClsNTJ.createCommandEncoder({
        label: "qSugc"
    });
    const AzvOyflUGXDrwQKChZZm = mpstlyDJUgECbyPxAu.beginComputePass({
        label: "CPytKhkyngWsSoBoY"
    });
    const FoVLeohkkhzswM = jrjTClsNTJ.createShaderModule({
        label: "compute",
        code: ibuZiouL
    });
    const XvmLHUqGkVwFRhZNTz = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "HHSPvuKuAcUtkDx",
        layout: "auto"
    });
    AzvOyflUGXDrwQKChZZm.setPipeline(XvmLHUqGkVwFRhZNTz);
    const WpwGmhDgsFRl = jrjTClsNTJ.queue
    const FTbMUBdx = WpwGmhDgsFRl.label
    const cicKERPrduujbWnECl = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rgb10a2unorm",
        label: "WltCNLlb",
        size: {
            width: 4,
            height: 833,
            depthOrArrayLayers: 27
        },
        mipLevelCount: 3,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["rgb10a2unorm"]
    });
    const fcjwQpKFZhaJzBcPu = cicKERPrduujbWnECl.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgb10a2unorm",
        label: "ppFhbFP"
    });
    const WZCMYy = jrjTClsNTJ.createQuerySet({
        count: 3858,
        label: "NChCGFDCSrz",
        type: "occlusion"
    });
    const PUjgjsObEdkPVxNF = mpstlyDJUgECbyPxAu.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.0033738000232335,
                g: 0.7559318191799662,
                b: 1.870804076270908,
                a: 0.9476747758912984
            },
            loadOp: "load",
            storeOp: "store",
            view: fcjwQpKFZhaJzBcPu,
            depthSlice: 1
        }],
        label: "EReOI",
        maxDrawCount: 3404400567,
        occlusionQuerySet: WZCMYy
    });
    const iatWN = jrjTClsNTJ.createShaderModule({
        label: "fragment",
        code: IFtiDTvPTBlMdNHfg
    });
    const EZWFErGi = jrjTClsNTJ.createShaderModule({
        label: "vertex",
        code: uXSrYcuZofP
    });
    const djMDqeoE = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "one-minus-src",
                        srcFactor: "src-alpha"
                    },
                    color: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.RED | GPUColorWrite.ALL
            }]
        },
        label: "hTBZkbEANwbZ",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    PUjgjsObEdkPVxNF.setPipeline(djMDqeoE);
    PUjgjsObEdkPVxNF.draw(2);
    PUjgjsObEdkPVxNF.end();
    const NjznMdeccVWfSgbbZVb = ChkNj.features
    const UFnOlnitGGSAImL = ChkNj.limits
    const TeLfyphx = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "rg8unorm",
        label: "bkdCUIacDfkVK",
        size: {
            width: 4079,
            height: 3072,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["rg8unorm"]
    });
    const dpzYoERqzBUZr = TeLfyphx.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rg8unorm",
        label: "fnAGliPyTACj"
    });
    const BnKrERS = mpstlyDJUgECbyPxAu.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.0037252616538006,
                g: 0.9401949153939089,
                b: 0.6360343363101728,
                a: 1.2580112856520196
            },
            loadOp: "clear",
            storeOp: "discard",
            view: dpzYoERqzBUZr
        }],
        label: "EngDCGicjnpIqcJN",
        maxDrawCount: 809134622,
        occlusionQuerySet: WZCMYy
    });
    const icaXfpSBuIUTcBMfBlP = BnKrERS.label
    const sPfWYuPEJnf = BnKrERS.label
    const PmqOOnxd = AzvOyflUGXDrwQKChZZm.label
    const AAhuOEGMSsuLdufwgpbK = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "one-minus-constant",
                        srcFactor: "src-alpha-saturated"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "r8unorm",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.RED
            }]
        },
        label: "wjyGuZKhbRtNvYJFc",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const bcLPizRAd = jrjTClsNTJ.label
    const TugQiAzjCGRjcO = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "SQmCuY",
        layout: "auto"
    });
    BnKrERS.end();
    const xQISsMBueev = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "one-minus-src-alpha",
                        srcFactor: "one-minus-dst-alpha"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.RED | GPUColorWrite.ALPHA | GPUColorWrite.GREEN | GPUColorWrite.ALL
            }]
        },
        label: "QehCmUnCZfWamnwPb",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const cleKCjWxgVTAvDq = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "r16float",
        label: "CmcduzjRYKwko",
        size: {
            width: 184,
            height: 313,
            depthOrArrayLayers: 8
        },
        mipLevelCount: 7,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC,
        viewFormats: ["r16float"]
    });
    const xldcLxvOJqwQmsjSEl = cleKCjWxgVTAvDq.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 2,
        format: "r16float",
        label: "VGIKCveyJPdoUT"
    });
    const peBoezVsq = mpstlyDJUgECbyPxAu.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.7592608903700102,
                g: 1.9022658923383726,
                b: 0.8296195987840629,
                a: 0.09335428097067044
            },
            loadOp: "load",
            storeOp: "discard",
            view: xldcLxvOJqwQmsjSEl,
            depthSlice: 1
        }],
        label: "dKnLyzOwYTXSzlXM",
        maxDrawCount: 3336604853,
        occlusionQuerySet: WZCMYy
    });
    peBoezVsq.end();
    const YSFEjUCMRnpvbcdwjjg = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "r8unorm",
        label: "sDsmORtTV",
        size: {
            width: 1057,
            height: 1172,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,
        viewFormats: ["r8unorm"]
    });
    const zNcnMKddIpcnqT = YSFEjUCMRnpvbcdwjjg.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r8unorm",
        label: "tGoLdYQWSVZTmg"
    });
    const rlMMKpOai = mpstlyDJUgECbyPxAu.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.3869843881639867,
                g: 1.8869412654970954,
                b: 0.41356283557885454,
                a: 1.8372871483428879
            },
            loadOp: "load",
            storeOp: "store",
            view: zNcnMKddIpcnqT
        }],
        label: "xxJAfHKRTqXRcQht",
        maxDrawCount: 1647916686,
        occlusionQuerySet: WZCMYy
    });
    const NmTwJl = rlMMKpOai.label
    const MdqnMTuJBVt = ChkNj.limits
    const BXoEqjSfbM = mpstlyDJUgECbyPxAu.label
    const AXKUTeezFnSUQHIM = ChkNj.limits
    rlMMKpOai.end();
    const CFpaSBIqVDEVyuzchHKC = jrjTClsNTJ.createCommandEncoder({
        label: "gTUQcIBMxcVq"
    });
    const jcDppqhiL = CFpaSBIqVDEVyuzchHKC.beginComputePass({
        label: "CRDSdUFRwzbFbzTk"
    });
    const fcgHpnwikH = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN | GPUColorWrite.ALPHA | GPUColorWrite.ALL
            }]
        },
        label: "imUpXAYObXDZjU",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "ccw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const QbenGGZYdmFGqK = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "bgra8unorm",
        label: "ZdPFPtAN",
        size: {
            width: 551,
            height: 154,
            depthOrArrayLayers: 62
        },
        mipLevelCount: 3,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,
        viewFormats: ["bgra8unorm-srgb"]
    });
    const jNsYtkDnwESid = QbenGGZYdmFGqK.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "bgra8unorm",
        label: "NuTFGuyzeaIyDyVaaN"
    });
    const HWVwRflnRNqjGqMoofWL = mpstlyDJUgECbyPxAu.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.9152949529157146,
                g: 0.8587106836461209,
                b: 0.6714209177038484,
                a: 1.9777211198119697
            },
            loadOp: "load",
            storeOp: "store",
            view: jNsYtkDnwESid,
            depthSlice: 1
        }],
        label: "kIGAanmJHcnhoSNcsaGS",
        maxDrawCount: 711374947,
        occlusionQuerySet: WZCMYy
    });
    const SJLiSFlliIFgcuXdIgWS = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "one-minus-dst-alpha",
                        srcFactor: "one-minus-constant"
                    },
                    color: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "bgra8unorm",
                writeMask: GPUColorWrite.GREEN | GPUColorWrite.RED | GPUColorWrite.ALPHA
            }]
        },
        label: "VSbZJzNdpzUG",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    HWVwRflnRNqjGqMoofWL.setPipeline(SJLiSFlliIFgcuXdIgWS);
    HWVwRflnRNqjGqMoofWL.draw(4);
    const kbdDWClldnxcCMxTbjoI = jrjTClsNTJ.features
    const KKCIXqUZApTgW = WZCMYy.count
    const PvBYGaGzDRYWzCAT = WZCMYy.type
    const qPwpODWuzWb = jrjTClsNTJ.createCommandEncoder({
        label: "vqAzG"
    });
    HWVwRflnRNqjGqMoofWL.end();
    const fyXvkCaTABbhln = qPwpODWuzWb.finish();
    jcDppqhiL.setPipeline(TugQiAzjCGRjcO);
    const ABxdb = ChkNj.isFallbackAdapter
    const wzWwTrihdVlJGMTqrM = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "rgba16uint",
        label: "NaxBlFWxVbpQDv",
        size: {
            width: 1610,
            height: 1844,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
        viewFormats: ["rgba16uint"]
    });
    const UZhuyMulWAQovSNNO = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "rg8unorm",
        label: "xAxUNJ",
        size: {
            width: 3460,
            height: 2731,
            depthOrArrayLayers: 63
        },
        mipLevelCount: 10,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["rg8unorm"]
    });
    const WjfsHlTG = UZhuyMulWAQovSNNO.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rg8unorm",
        label: "KlmzfJFmNr"
    });
    const aQCBpkNIZNtph = CFpaSBIqVDEVyuzchHKC.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.9432353323983285,
                g: 1.9793190505175164,
                b: 1.6456223059759416,
                a: 0.5934980119338096
            },
            loadOp: "clear",
            storeOp: "discard",
            view: WjfsHlTG
        }],
        label: "dbtBvbYIAAdxoxIwnn",
        maxDrawCount: 563099650,
        occlusionQuerySet: WZCMYy
    });
    const sgHXm = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "constant",
                        srcFactor: "one-minus-dst"
                    }
                },
                format: "rg8unorm",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.RED
            }]
        },
        label: "iBUkC",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    aQCBpkNIZNtph.setPipeline(sgHXm);
    const kUgfACVDlHnA = ChkNj.limits
    const yfWkmCylSqN = ChkNj.limits
    const lkwITOLKislyGTiLk = jrjTClsNTJ.createBuffer({
        label: "hsGywgt",
        mappedAtCreation: false,
        size: 182313924,
        usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE | GPUBufferUsage.UNIFORM | GPUBufferUsage.INDIRECT
    });
    const sdJtMhCvSSfNReJr = jrjTClsNTJ.createBuffer({
        label: "dYeRwwUpSpipftm",
        mappedAtCreation: false,
        size: 23393456,
        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST
    });
    aQCBpkNIZNtph.setVertexBuffer(0, sdJtMhCvSSfNReJr);
    const zcQGiOexybxvCRRtAKn = aQCBpkNIZNtph.label
    const gdPRZInpTJxHQybSGt = jrjTClsNTJ.label
    const matzryNQOePUL = mpstlyDJUgECbyPxAu.label
    const HLOPzWMBLutiDLDnrCVb = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "r8unorm",
        label: "sLNNfOo",
        size: {
            width: 3174,
            height: 3315,
            depthOrArrayLayers: 7
        },
        mipLevelCount: 3,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["r8unorm"]
    });
    const dlpLZCqoNNyPuS = HLOPzWMBLutiDLDnrCVb.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 2,
        format: "r8unorm",
        label: "nqshPAcmLqAS"
    });
    const rYhVSEoFe = mpstlyDJUgECbyPxAu.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.12205548084730422,
                g: 0.92045732416336,
                b: 1.5818095925039037,
                a: 1.5064918268888647
            },
            loadOp: "clear",
            storeOp: "store",
            view: dlpLZCqoNNyPuS
        }],
        label: "jtiLLFh",
        maxDrawCount: 2353825530,
        occlusionQuerySet: WZCMYy
    });
    const kDLYAWoFbjD = jrjTClsNTJ.queue
    rYhVSEoFe.end();
    AzvOyflUGXDrwQKChZZm.end();
    const oUeBUfnYDjgEb = mpstlyDJUgECbyPxAu.finish();
    const SDwCOiHmp = ChkNj.info
    const rUkhqsco = CFpaSBIqVDEVyuzchHKC.label
    const DJvffy = ChkNj.isFallbackAdapter
    const KjxYpwGOjpf = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "giloF",
        layout: "auto"
    });
    aQCBpkNIZNtph.end();
    jcDppqhiL.end();
    const iNhMukGLNcyTrFz = CFpaSBIqVDEVyuzchHKC.finish();
    const jIkBHFKYy = kDLYAWoFbjD.label
    const bmjlKeZJkSKgfpaEqwf = jrjTClsNTJ.createCommandEncoder({
        label: "yjYkbHDHIjVZQ"
    });
    const tKMqv = bmjlKeZJkSKgfpaEqwf.finish();
    const IEOQOZFpjyRyti = ChkNj.isFallbackAdapter
    const TtkXdYyqQaUQQgdMwQlL = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "rgb10a2uint",
        label: "MvLsDswXYMaYGUti",
        size: {
            width: 1142,
            height: 3658,
            depthOrArrayLayers: 51
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.COPY_SRC,
        viewFormats: ["rgb10a2uint"]
    });
    const sTuUwG = TtkXdYyqQaUQQgdMwQlL.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgb10a2uint",
        label: "dlxqZrMRhrYc"
    });
    const mosRddYHL = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rgb10a2unorm",
        label: "hnUsRKzJjAroJDAEMz",
        size: {
            width: 729,
            height: 425,
            depthOrArrayLayers: 58
        },
        mipLevelCount: 7,
        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
        viewFormats: ["rgb10a2unorm"]
    });
    kDLYAWoFbjD.writeBuffer(sdJtMhCvSSfNReJr, 3056896, AoCFDiIRPRuXwmmKgAIp);
    const EhAudDSMFUqB = UZhuyMulWAQovSNNO.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 6,
        baseMipLevel: 1,
        format: "rg8unorm",
        label: "SmQwRZqyLjjZie"
    });
    const fzlsw = kDLYAWoFbjD.label
    const FbvTJieZdRiJoK = YSFEjUCMRnpvbcdwjjg.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r8unorm",
        label: "fkJLF"
    });
    const fGpBelVfWoe = WZCMYy.type
    const lcRMLQFBkYKXs = ChkNj.features
    const KiKKcjPLjb = WZCMYy.type
    const lAzqyvyTiZiQUtLfOX = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "src",
                        srcFactor: "one-minus-dst"
                    }
                },
                format: "r8unorm",
                writeMask: GPUColorWrite.GREEN | GPUColorWrite.ALL
            }]
        },
        label: "ZqFFMhI",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const mNPNDZsYTqFqwa = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "src-alpha-saturated",
                        srcFactor: "dst"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "dst",
                        srcFactor: "dst-alpha"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.ALL | GPUColorWrite.RED | GPUColorWrite.GREEN
            }]
        },
        label: "nixbMuFMu",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const QNLXqwCj = jrjTClsNTJ.createCommandEncoder({
        label: "inmhlxNPiMVybXsppArE"
    });
    const dBPYO = QNLXqwCj.finish();
    const XNMDGNHFmrfyKww = jrjTClsNTJ.createQuerySet({
        count: 2925,
        label: "HEsRyw",
        type: "occlusion"
    });
    const iXFUlC = jrjTClsNTJ.limits
    const ikQGVddlWYwSwROoDkD = kDLYAWoFbjD.label
    const oXsVRkwXdZKgzXQOEirO = jrjTClsNTJ.features
    WpwGmhDgsFRl.submit([oUeBUfnYDjgEb]);
    const aauACFIgeREXy = jrjTClsNTJ.createCommandEncoder({
        label: "vhKxBYx"
    });
    const NLVcXCZy = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "bgra8unorm-srgb",
        label: "SldeIvSZoHibcYRZR",
        size: {
            width: 3189,
            height: 2253,
            depthOrArrayLayers: 9
        },
        mipLevelCount: 4,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["bgra8unorm-srgb"]
    });
    const EYiGD = NLVcXCZy.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 3,
        format: "bgra8unorm-srgb",
        label: "uuUYPM"
    });
    const tVlqFmYC = aauACFIgeREXy.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.726481669115852,
                g: 1.1678341801790078,
                b: 1.8575580565104937,
                a: 0.5509661841744988
            },
            loadOp: "clear",
            storeOp: "discard",
            view: EYiGD
        }],
        label: "ThhfQqhhXXQhMbOD",
        maxDrawCount: 2665269463,
        occlusionQuerySet: WZCMYy
    });
    const dgxqCEFMa = tVlqFmYC.label
    const piXTxYeBH = await navigator.gpu.getPreferredCanvasFormat();
    const QFfWewZou = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "dzhfbNlmotF",
        layout: "auto"
    });
    const EAuaQJMLUMKFIRq = kDLYAWoFbjD.label
    const HuXutgDEWldqoju = jrjTClsNTJ.createTexture({
        dimension: "1d",
        sampleCount: 1,
        format: "r32sint",
        label: "bDGnVlfrDYJzdrLA",
        size: {
            width: 624,
            height: 1,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,
        viewFormats: ["r32sint"]
    });
    const LsBICdox = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const aCzRVRtnhHWNXnf = WZCMYy.type
    const rpnIBxRcG = aauACFIgeREXy.beginComputePass({
        label: "YjVyCEVeKwAlJIpvSdi"
    });
    rpnIBxRcG.end();
    kDLYAWoFbjD.writeBuffer(sdJtMhCvSSfNReJr, 7141588, ANiKtRtFMHjCGv);
    const VtdWLjHNPZmX = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const vyIMJgHHnhRBFgEK = navigator.gpu.wgslLanguageFeatures
    const gvGyZZRrjHYXFhHP = jrjTClsNTJ.limits
    const JDIvyW = dlpLZCqoNNyPuS.label
    const BdtjLlQYUMhgS = navigator.gpu.wgslLanguageFeatures
    const CVxVTcCABVuPvr = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "sDQLVpQOcvLXXRZhRc",
        layout: "auto"
    });
    const rjTwRtOPpVevG = aauACFIgeREXy.beginComputePass({
        label: "mAtlVDfI"
    });
    const ycIdLFwbPWBdILzqqIG = kDLYAWoFbjD.label
    const FLxaVvbVqLJu = tVlqFmYC.label
    const WPUHQyTSaKerax = cicKERPrduujbWnECl.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 3,
        baseMipLevel: 0,
        format: "rgb10a2unorm",
        label: "WTJsKHZKFaTyJfjrCu"
    });
    tVlqFmYC.end();
    const EXLEXKFXSUjdDXfdk = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rg8sint",
        label: "zHGfCm",
        size: {
            width: 734,
            height: 188,
            depthOrArrayLayers: 44
        },
        mipLevelCount: 10,
        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
        viewFormats: ["rg8sint"]
    });
    const wsWdiihuToHNQsADn = jrjTClsNTJ.limits
    const gnJPh = jrjTClsNTJ.createCommandEncoder({
        label: "booQf"
    });
    const JcEuJGRxGCMTUPUyfR = WpwGmhDgsFRl.label
    const KSVOxRrcvMFaVF = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "bgra8unorm",
        label: "mSacNvFVHo",
        size: {
            width: 1612,
            height: 3387,
            depthOrArrayLayers: 41
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,
        viewFormats: ["bgra8unorm-srgb"]
    });
    const pxvtosycpBK = KSVOxRrcvMFaVF.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "bgra8unorm-srgb",
        label: "NSlxNQkafLGiXAdV"
    });
    const NBSUpXtdil = gnJPh.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.5424949497139193,
                g: 0.09055807099837487,
                b: 1.4359059069598037,
                a: 1.2543555909734676
            },
            loadOp: "clear",
            storeOp: "discard",
            view: pxvtosycpBK
        }],
        label: "otobEunYslfxWxx",
        maxDrawCount: 2192656446,
        occlusionQuerySet: WZCMYy
    });
    NBSUpXtdil.setVertexBuffer(0, sdJtMhCvSSfNReJr);
    const ZcHpsvhaDPLsU = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const ZuHsGoalwJOoUj = LsBICdox.isFallbackAdapter
    const YzUfWRFPGijVtNCBjDsR = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "one-minus-dst",
                        srcFactor: "dst"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "zero",
                        srcFactor: "constant"
                    }
                },
                format: "bgra8unorm-srgb",
                writeMask: GPUColorWrite.RED | GPUColorWrite.BLUE | GPUColorWrite.ALPHA
            }]
        },
        label: "Gxnmh",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    NBSUpXtdil.setPipeline(YzUfWRFPGijVtNCBjDsR);
    const BJNljrbcASYauoHgwDbF = await navigator.gpu.getPreferredCanvasFormat();
    const XCxaZieXQaxKv = WZCMYy.label
    WpwGmhDgsFRl.submit([fyXvkCaTABbhln]);
    const EYPNpoblYphSoCZzX = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "jIVUzHSeERToVlSqKAAF",
        layout: "auto"
    });
    const OqCPyBgxQepJVX = jrjTClsNTJ.createCommandEncoder({
        label: "PqUbxQnR"
    });
    NBSUpXtdil.setPipeline(YzUfWRFPGijVtNCBjDsR);
    const dCOwNQljGtVBJdYZI = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const HKRknnyPF = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "one-minus-dst-alpha",
                        srcFactor: "constant"
                    },
                    color: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "bgra8unorm-srgb",
                writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN
            }]
        },
        label: "xiAoHRWgXMEwGpnZHdwA",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const xkxoVIl = OqCPyBgxQepJVX.finish();
    const syboPLGFBghvckXy = jrjTClsNTJ.createCommandEncoder({
        label: "dQAzvn"
    });
    const hHHTacmg = jrjTClsNTJ.features
    const NKvOU = syboPLGFBghvckXy.beginComputePass({
        label: "fLCoKebQ"
    });
    rjTwRtOPpVevG.end();
    const bkYblGPDgoiCxzzTwSX = WZCMYy.label
    const nwfYrONdVNO = await navigator.gpu.getPreferredCanvasFormat();
    const YgZlLRLfDL = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "r8unorm",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.GREEN | GPUColorWrite.BLUE
            }]
        },
        label: "JRZEoQQzgSUEVhg",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const aKjUgRqsOwwWtc = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    const vDXIRABBlTXpbMa = aauACFIgeREXy.label
    const NjRxQ = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "dst",
                        srcFactor: "zero"
                    }
                },
                format: "bgra8unorm",
                writeMask: GPUColorWrite.GREEN | GPUColorWrite.ALL | GPUColorWrite.BLUE
            }]
        },
        label: "WlvXRYXqezb",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "front",
            frontFace: "cw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const BLajdduAoPsMaQyQSs = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "deaWqxdcFmFFlkNar",
        layout: "auto"
    });
    const MCyJXsNobqfXSmirpe = jrjTClsNTJ.features
    const ocRzOL = jrjTClsNTJ.limits
    const WKpwOebweBNRzmFXQ = navigator.gpu.wgslLanguageFeatures
    const bUMbdmCX = jrjTClsNTJ.label
    const zJUrwIGTqN = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    const PhSTCXvYeiyjoliySO = dCOwNQljGtVBJdYZI.isFallbackAdapter
    const fQpUYfCfwz = NBSUpXtdil.label
    const CHYHvIxmzwRm = jrjTClsNTJ.label
    NKvOU.setPipeline(EYPNpoblYphSoCZzX);
    NBSUpXtdil.end();
    const hhNxUmiAkgDIqF = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rgba16float",
        label: "CUBcTqG",
        size: {
            width: 188,
            height: 684,
            depthOrArrayLayers: 20
        },
        mipLevelCount: 8,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,
        viewFormats: ["rgba16float"]
    });
    const nJVJdGkwiiySpWLRd = hhNxUmiAkgDIqF.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 4,
        format: "rgba16float",
        label: "ynZGuCwUOZifWN"
    });
    const jlbQzwswYEGIIOGxtwRm = syboPLGFBghvckXy.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.7701210666597778,
                g: 0.8052832834885872,
                b: 0.3423904858679212,
                a: 0.24997838009106887
            },
            loadOp: "clear",
            storeOp: "store",
            view: nJVJdGkwiiySpWLRd,
            depthSlice: 0
        }],
        label: "hMoJAEna",
        maxDrawCount: 612742438,
        occlusionQuerySet: XNMDGNHFmrfyKww
    });
    const myrOpOWAao = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "src",
                        srcFactor: "one"
                    }
                },
                format: "rgba16float",
                writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN
            }]
        },
        label: "MvNfMZMFZSZjT",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    jlbQzwswYEGIIOGxtwRm.setPipeline(myrOpOWAao);
    const qZcRTmaSOEbijrKV = jrjTClsNTJ.label
    kDLYAWoFbjD.writeBuffer(sdJtMhCvSSfNReJr, 6064244, BJTSpm);
    const Njwlv = ZcHpsvhaDPLsU.info
    const sBTWnbbmQawZedYKIUAS = jrjTClsNTJ.label
    const QykhnHVavfWUaR = await navigator.gpu.getPreferredCanvasFormat();
    const grApjPhKEsYnQN = EYiGD.label
    const TMhIrkzSS = syboPLGFBghvckXy.label
    NKvOU.setPipeline(XvmLHUqGkVwFRhZNTz);
    const epiOYmv = NKvOU.label
    NKvOU.setPipeline(CVxVTcCABVuPvr);
    const sWFqUMghWlpNSmS = jrjTClsNTJ.createCommandEncoder({
        label: "FDKrqPINlWDSMTSu"
    });
    jlbQzwswYEGIIOGxtwRm.setPipeline(myrOpOWAao);
    const CmcIzbcGXfxNYCCIeMf = jrjTClsNTJ.features
    const BMAuDSypCQUyoXImcp = XNMDGNHFmrfyKww.type
    const WHaCRQDcDEG = aauACFIgeREXy.finish();
    const JaCcsxprhq = navigator.gpu.wgslLanguageFeatures
    kDLYAWoFbjD.writeBuffer(sdJtMhCvSSfNReJr, 10700852, jBRbdOMiGc);
    const txeklXcw = sWFqUMghWlpNSmS.label
    const Lugkk = jrjTClsNTJ.features
    const SqUYnr = XNMDGNHFmrfyKww.type
    const leEZSlmjECweJCjBbKZX = syboPLGFBghvckXy.label
    kDLYAWoFbjD.writeBuffer(sdJtMhCvSSfNReJr, 7736516, SRxXzCTAG);
    const qOhVaggdRqvK = jrjTClsNTJ.label
    const lZKbHUeaenPNADtqKe = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rgba32uint",
        label: "IYbfpUuXuf",
        size: {
            width: 179,
            height: 765,
            depthOrArrayLayers: 3
        },
        mipLevelCount: 2,
        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.STORAGE_BINDING,
        viewFormats: ["rgba32uint"]
    });
    const cApJhQIpRmVhWrjGFZi = KSVOxRrcvMFaVF.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 31,
        baseArrayLayer: 1,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "bgra8unorm-srgb",
        label: "VqhQpVmOYUnMMjShUp"
    });
    const THmsyBWOBf = aKjUgRqsOwwWtc.isFallbackAdapter
    jlbQzwswYEGIIOGxtwRm.draw(4);
    const BwQymHH = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "depth32float",
        label: "aiYAhwWYsScCvKJTAZPg",
        size: {
            width: 3797,
            height: 4090,
            depthOrArrayLayers: 15
        },
        mipLevelCount: 5,
        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,
        viewFormats: ["depth32float"]
    });
    kDLYAWoFbjD.writeBuffer(sdJtMhCvSSfNReJr, 12851008, wYiZkaj);
    const GzrsqrVkSx = jrjTClsNTJ.queue
    NKvOU.end();
    const UkOogxImikuEGBP = sWFqUMghWlpNSmS.beginComputePass({
        label: "UxIMAyoWtkcWSdGarB"
    });
    const IFtlAiEFtiVyrU = jrjTClsNTJ.label
    jlbQzwswYEGIIOGxtwRm.end();
    const LDGZUZnvNniNgiRMRus = syboPLGFBghvckXy.finish();
    const BxFpOzmeCRljOe = jrjTClsNTJ.limits
    const GniPEGTQrfP = TeLfyphx.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rg8unorm",
        label: "EpHbuQsQOJMAk"
    });
    const DkXfwXGDStqVI = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "constant",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "src-alpha",
                        srcFactor: "src"
                    }
                },
                format: "rgba16float",
                writeMask: GPUColorWrite.BLUE | GPUColorWrite.RED | GPUColorWrite.ALL
            }]
        },
        label: "BLVtKfLsbAoHyG",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const xiJlgY = WpwGmhDgsFRl.label
    UkOogxImikuEGBP.end();
    const CQcWWqPxklzTfOp = sWFqUMghWlpNSmS.finish();
    const fnHUXeaXidgNvUna = kDLYAWoFbjD.label
    const GfKGdzSaSyI = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "rgb10a2unorm",
        label: "ORCIHaiWNHuiosaRqjW",
        size: {
            width: 2366,
            height: 2385,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT,
        viewFormats: ["rgb10a2unorm"]
    });
    const cnlaiBilHaXxDVU = GfKGdzSaSyI.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgb10a2unorm",
        label: "bPBSVNuppBOOmj"
    });
    const fonRangDdQc = gnJPh.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.9807763804977594,
                g: 0.6513877733897389,
                b: 1.2357777042572304,
                a: 0.9661039840813936
            },
            loadOp: "load",
            storeOp: "store",
            view: cnlaiBilHaXxDVU
        }],
        label: "SkOmwZPtwnCRw",
        maxDrawCount: 343308621,
        occlusionQuerySet: XNMDGNHFmrfyKww
    });
    const nDZIRTYByPQJKJ = jrjTClsNTJ.createCommandEncoder({
        label: "xHutBzRUHpoHWATe"
    });
    const BWrXQw = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "bgra8unorm-srgb",
        label: "KTuGsElgy",
        size: {
            width: 2991,
            height: 637,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["bgra8unorm-srgb"]
    });
    const QyRUR = BWrXQw.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "bgra8unorm-srgb",
        label: "ZwPWbmrGUzEKwy"
    });
    const XgYVXvY = nDZIRTYByPQJKJ.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.9666786268529908,
                g: 1.8848248264978797,
                b: 0.11410221629151218,
                a: 0.5137243178611872
            },
            loadOp: "clear",
            storeOp: "discard",
            view: QyRUR
        }],
        label: "lMHRAINCbiJ",
        maxDrawCount: 1712870535,
        occlusionQuerySet: XNMDGNHFmrfyKww
    });
    const iWLJQEKEyTxgwrE = gnJPh.beginComputePass({
        label: "UMZaIwWYKvdIVzCOd"
    });
    const DNqRPDx = aKjUgRqsOwwWtc.isFallbackAdapter
    const cBEpqFBfbjNVPJso = await navigator.gpu.getPreferredCanvasFormat();
    const OElILdOXsZFMAFo = nDZIRTYByPQJKJ.beginComputePass({
        label: "xSWMepOlMml"
    });
    const zslKRpNBCqMBWfiRlwS = jrjTClsNTJ.queue
    const hwnHPXBW = navigator.gpu.wgslLanguageFeatures
    const sOBoWMNEKNjZg = KSVOxRrcvMFaVF.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 39,
        baseArrayLayer: 1,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "bgra8unorm",
        label: "xGzYhxbwK"
    });
    const caCtV = gnJPh.label
    iWLJQEKEyTxgwrE.end();
    const lhYytgfGLyiDwR = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "one-minus-dst",
                        srcFactor: "dst-alpha"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "one-minus-constant",
                        srcFactor: "dst-alpha"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.ALL
            }]
        },
        label: "knDaZzMoGdXN",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    fonRangDdQc.setPipeline(lhYytgfGLyiDwR);
    fonRangDdQc.draw(3);
    const qjwiMJlpud = jrjTClsNTJ.createCommandEncoder({
        label: "fKNLvEz"
    });
    WpwGmhDgsFRl.writeBuffer(sdJtMhCvSSfNReJr, 6626852, jsYOUCQHxzwEvdFEUQa);
    const nXKEwbdEtHtlTe = qjwiMJlpud.finish();
    fonRangDdQc.end();
    const cyxRamAOB = gnJPh.finish();
    const oNnIOOGKDMxYpcJWu = kDLYAWoFbjD.label
    XgYVXvY.end();
    const JOjmAFLdGzM = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "r16float",
        label: "YynZMALXZDV",
        size: {
            width: 2503,
            height: 1497,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["r16float"]
    });
    const woaubOYOMMfqGFxvbb = JOjmAFLdGzM.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r16float",
        label: "ndAcYwglyCTjnQAgj"
    });
    const eygWpRruFIUjZc = nDZIRTYByPQJKJ.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.991495656124472,
                g: 0.9816142917492168,
                b: 0.9015995371535419,
                a: 0.7511027940937443
            },
            loadOp: "clear",
            storeOp: "discard",
            view: woaubOYOMMfqGFxvbb
        }],
        label: "SSImisQstC",
        maxDrawCount: 1177137852,
        occlusionQuerySet: WZCMYy
    });
    const nyFnXmIY = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "src-alpha-saturated",
                        srcFactor: "constant"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "r16float",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.GREEN | GPUColorWrite.ALL
            }]
        },
        label: "FAGRU",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    eygWpRruFIUjZc.setPipeline(nyFnXmIY);
    eygWpRruFIUjZc.setVertexBuffer(0, sdJtMhCvSSfNReJr);
    const VjStwq = jrjTClsNTJ.limits
    const jyQOl = aKjUgRqsOwwWtc.info
    const rJWneCic = zslKRpNBCqMBWfiRlwS.label
    const kDLBdhXhJFJJIoFf = XNMDGNHFmrfyKww.label
    const wqBmhbhCljzOqHSuATeG = jrjTClsNTJ.label
    const ehMqIkJ = WpwGmhDgsFRl.label
    kDLYAWoFbjD.submit([iNhMukGLNcyTrFz]);
    const RaVgOWWshNx = jrjTClsNTJ.createBuffer({
        label: "OjypVrZbKpCCm",
        mappedAtCreation: true,
        size: 66980564,
        usage: GPUBufferUsage.MAP_READ
    });
    const yFcWgHKczMNHKAHIrfA = navigator.gpu.wgslLanguageFeatures
    const yKcpNyWfTmnyCx = aKjUgRqsOwwWtc.isFallbackAdapter
    zslKRpNBCqMBWfiRlwS.writeBuffer(sdJtMhCvSSfNReJr, 6751932, NuZMnCeCMDdve);
    const zYivY = jrjTClsNTJ.label
    const ydWgIvOnsDHMRoFwWCn = OElILdOXsZFMAFo.label
    const MDQxxLOeXRvxLSBsHl = EYiGD.label
    const PtFemyNFv = VtdWLjHNPZmX.isFallbackAdapter
    eygWpRruFIUjZc.setVertexBuffer(0, sdJtMhCvSSfNReJr);
    OElILdOXsZFMAFo.end();
    const qJYedQmMzKETvRqDv = eygWpRruFIUjZc.label
    const azbHOmVaAtiRjPXyIjkB = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "dst-alpha",
                        srcFactor: "constant"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "bgra8unorm-srgb",
                writeMask: GPUColorWrite.BLUE
            }]
        },
        label: "evwHTdovGDlwBqWaAY",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "ccw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const kbexzHIvdThvjRmW = jrjTClsNTJ.createCommandEncoder({
        label: "UvSylEf"
    });
    const wqGSmJMvnH = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rgba16float",
        label: "mmyPmTZgs",
        size: {
            width: 441,
            height: 820,
            depthOrArrayLayers: 30
        },
        mipLevelCount: 7,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,
        viewFormats: ["rgba16float"]
    });
    const LtNftWkiPnam = wqGSmJMvnH.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgba16float",
        label: "KmQhgkUTxoXDzvGOghfV"
    });
    const WeCwnwzZZFPFfUfnEGn = kbexzHIvdThvjRmW.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.8796625611976834,
                g: 0.8977294832294174,
                b: 1.7468771499769622,
                a: 1.7554327802566965
            },
            loadOp: "clear",
            storeOp: "store",
            view: LtNftWkiPnam,
            depthSlice: 6
        }],
        label: "QKXLjypBptVALFxG",
        maxDrawCount: 2722953303,
        occlusionQuerySet: WZCMYy
    });
    const CHmVIolFHVmKLjGHjLy = dCOwNQljGtVBJdYZI.info
    const tjIKXNCAxoaqVnLM = jrjTClsNTJ.createShaderModule({
        label: "compute",
        code: buPNlkSIMJykMwmE
    });
    const qhRsbxMRMc = kDLYAWoFbjD.label
    const itmXUxLrLRx = nDZIRTYByPQJKJ.beginComputePass({
        label: "KLNDYWD"
    });
    itmXUxLrLRx.setPipeline(BLajdduAoPsMaQyQSs);
    const PqWITydmuGZMAeCS = jrjTClsNTJ.queue
    const GlnqrbhA = pxvtosycpBK.label
    const JahzqfdkNTVyAoBF = jrjTClsNTJ.limits
    const PKwJJyZKJecWraYr = kbexzHIvdThvjRmW.beginComputePass({
        label: "rroyLUXkgRUclEseJo"
    });
    eygWpRruFIUjZc.end();
    const pBVZcDInNaAdNCs = cApJhQIpRmVhWrjGFZi.label
    const KuSTBlJbeaFIedWmf = itmXUxLrLRx.label
    GzrsqrVkSx.writeBuffer(sdJtMhCvSSfNReJr, 5663080, tpelMCMDgjHedr);
    const suSMURAwufojEn = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "r16sint",
        label: "ngkzVNxI",
        size: {
            width: 672,
            height: 628,
            depthOrArrayLayers: 7
        },
        mipLevelCount: 3,
        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
        viewFormats: ["r16sint"]
    });
    const sMzVnZZTxoFRlWYBe = await navigator.gpu.getPreferredCanvasFormat();
    const OxvdYmlq = jrjTClsNTJ.queue
    WeCwnwzZZFPFfUfnEGn.setVertexBuffer(0, sdJtMhCvSSfNReJr);
    const BBgGfaSmBcQUm = ZcHpsvhaDPLsU.isFallbackAdapter
    const wohhh = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    const WmchyHTpTtWrVBjU = jrjTClsNTJ.createQuerySet({
        count: 3801,
        label: "IMDvEm",
        type: "occlusion"
    });
    WeCwnwzZZFPFfUfnEGn.setPipeline(myrOpOWAao);
    WeCwnwzZZFPFfUfnEGn.draw(4);
    itmXUxLrLRx.end();
    const XvEPvfLWKxLfFIng = nDZIRTYByPQJKJ.finish();
    const oeykgZYBXYpUkDPx = jrjTClsNTJ.createBuffer({
        label: "goaGKCXYORifPNs",
        mappedAtCreation: true,
        size: 212480016,
        usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST
    });
    const aKVZpRVZxtFyQJZocv = jrjTClsNTJ.createQuerySet({
        count: 914,
        label: "MXeVUUoKSe",
        type: "occlusion"
    });
    const SyrOXxnRuZBauLR = navigator.gpu.wgslLanguageFeatures
    const VZFEdxsxeMWzwEOAuI = XNMDGNHFmrfyKww.type
    const hMEGTw = jrjTClsNTJ.createShaderModule({
        label: "fragment",
        code: iGoXASMXpvDbIWG
    });
    const FCMTpMTxHw = WZCMYy.type
    const IKsEMsMQAtuM = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const QoAlL = await navigator.gpu.getPreferredCanvasFormat();
    PKwJJyZKJecWraYr.end();
    WeCwnwzZZFPFfUfnEGn.end();
    const nWDUw = kbexzHIvdThvjRmW.finish();
    const dKvaVAveMUV = jrjTClsNTJ.createCommandEncoder({
        label: "QdMMVIpkKuRMS"
    });
    const SMZJrpdKXdjFC = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "r8unorm",
        label: "VjQTDV",
        size: {
            width: 673,
            height: 376,
            depthOrArrayLayers: 26
        },
        mipLevelCount: 8,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC,
        viewFormats: ["r8unorm"]
    });
    const amQzcEcDHrTF = SMZJrpdKXdjFC.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 6,
        format: "r8unorm",
        label: "aCNAmzuwFmoJcvAIPxgD"
    });
    const AFAURJnUK = dKvaVAveMUV.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.2991759398949576,
                g: 1.3489643567854053,
                b: 0.6886707081501378,
                a: 1.1256140688876086
            },
            loadOp: "load",
            storeOp: "store",
            view: amQzcEcDHrTF,
            depthSlice: 0
        }],
        label: "xyMpqoajWgvzAYxnhiYM",
        maxDrawCount: 1953516796,
        occlusionQuerySet: WZCMYy
    });
    const ImDPNKZAvKfgyLFBfyLC = jrjTClsNTJ.limits
    const ARFeYXzExuZK = WmchyHTpTtWrVBjU.count
    const EMJMrwTnBKYMRtfdYFsW = jrjTClsNTJ.createShaderModule({
        label: "fragment",
        code: gBeCHjvhgIzP
    });
    const nWLBgsLCrRs = await navigator.gpu.getPreferredCanvasFormat();
    const izOIAAkN = QbenGGZYdmFGqK.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 2,
        format: "bgra8unorm-srgb",
        label: "rFPwZrlPufmuGu"
    });
    const WEQUkhvCorKp = jrjTClsNTJ.createQuerySet({
        count: 720,
        label: "eOhbdwOolkAxToJeXmd",
        type: "occlusion"
    });
    const CHJkItPzyNU = WmchyHTpTtWrVBjU.type
    const oAufUGNtDUSwpPrTLWKE = OxvdYmlq.label
    const OUsYQRzKDOVLzqI = ZcHpsvhaDPLsU.limits
    const awwpPhCvNIUkiPbAecr = dKvaVAveMUV.beginComputePass({
        label: "CuPqmOYf"
    });
    const rdunDI = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "r32uint",
        label: "MislqkOhfymGuCTvwy",
        size: {
            width: 1622,
            height: 1141,
            depthOrArrayLayers: 11
        },
        mipLevelCount: 8,
        usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["r32uint"]
    });
    const oFsXqPQiPCjb = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "dst-alpha",
                        srcFactor: "src-alpha"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "src-alpha",
                        srcFactor: "dst-alpha"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.ALL
            }]
        },
        label: "eYucYcysiaUoNQcmCVL",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "cw",
            topology: "line-strip"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const FIAiAot = jrjTClsNTJ.limits
    const nIJQJssNtrpLvwaOx = wzWwTrihdVlJGMTqrM.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgba16uint",
        label: "JoXqPWIOQwmLFuDy"
    });
    WpwGmhDgsFRl.writeBuffer(sdJtMhCvSSfNReJr, 1877456, YPkHkDdYgoYnnVwyO);
    const YPbuRD = jrjTClsNTJ.createQuerySet({
        count: 307,
        label: "HbOryZ",
        type: "occlusion"
    });
    AFAURJnUK.setVertexBuffer(0, sdJtMhCvSSfNReJr);
    WpwGmhDgsFRl.submit([WHaCRQDcDEG]);
    const tVXhmBBveohWVWlI = XNMDGNHFmrfyKww.label
    AFAURJnUK.setPipeline(lAzqyvyTiZiQUtLfOX);
    AFAURJnUK.draw(4);
    const hfLPvVhaulXnnI = navigator.gpu.wgslLanguageFeatures
    awwpPhCvNIUkiPbAecr.end();
    const QWXgZ = WmchyHTpTtWrVBjU.type
    const lavWzxdM = WpwGmhDgsFRl.label
    const yeiKyTCPQeTwpDLSb = PqWITydmuGZMAeCS.label
    const AhdrrSeTsfmi = jrjTClsNTJ.createQuerySet({
        count: 3882,
        label: "dVxzbGeenZHQjiwvLh",
        type: "occlusion"
    });
    const xzeVbPQbWZJZxdOxr = jrjTClsNTJ.createShaderModule({
        label: "compute",
        code: uTCjexOQe
    });
    const RjXnwCziTUo = dKvaVAveMUV.beginComputePass({
        label: "sAIeSAqveby"
    });
    const jojnZhElx = RjXnwCziTUo.label
    const rpdfDDTfr = zNcnMKddIpcnqT.label
    const wzvDiDpcOq = jrjTClsNTJ.createCommandEncoder({
        label: "kjCEMLkqnJnFGgXjKyge"
    });
    const gNZOPyrSbnoKEOMHDxz = wzvDiDpcOq.beginComputePass({
        label: "bvXZIw"
    });
    AFAURJnUK.end();
    const WrsXZYeAD = jrjTClsNTJ.createBuffer({
        label: "kpfsfueaxB",
        mappedAtCreation: true,
        size: 250783300,
        usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC
    });
    PqWITydmuGZMAeCS.submit([nXKEwbdEtHtlTe]);
    const TkxkLwsrFMmoO = jrjTClsNTJ.limits
    GzrsqrVkSx.writeBuffer(sdJtMhCvSSfNReJr, 19087092, xDAprQlbtduOGooElXfZ);
    const hThOJKXJyC = GfKGdzSaSyI.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgb10a2unorm",
        label: "jLatvK"
    });
    const PnETWQ = jrjTClsNTJ.createQuerySet({
        count: 1124,
        label: "mxxxMziJgXLOPvUXKd",
        type: "occlusion"
    });
    gNZOPyrSbnoKEOMHDxz.end();
    const aDiIZiZKELPMkgSwvqF = wzvDiDpcOq.beginComputePass({
        label: "ksdRDq"
    });
    const FbeKr = RjXnwCziTUo.label
    GzrsqrVkSx.writeBuffer(sdJtMhCvSSfNReJr, 3254012, ZlXzFXQBfoeuoNyJd);
    const uFMCcNlgcnxCAKWnxzY = WZCMYy.type
    const OFFUjbPmuuzfG = jrjTClsNTJ.features
    const TjeRbZigSTVfEZEJhO = aKjUgRqsOwwWtc.isFallbackAdapter
    const MarwtaGheQa = jrjTClsNTJ.queue
    const CkJSNo = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: EMJMrwTnBKYMRtfdYFsW,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "dst-alpha",
                        srcFactor: "one"
                    }
                },
                format: "rgba8unorm-srgb",
                writeMask: GPUColorWrite.RED | GPUColorWrite.GREEN | GPUColorWrite.ALPHA
            }]
        },
        label: "erzXc",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const EjnakLRPet = jrjTClsNTJ.createCommandEncoder({
        label: "RXeTZyduB"
    });
    RjXnwCziTUo.end();
    const MqvHvCkxjfPhrGUxNklF = dKvaVAveMUV.finish();
    const neoLzVHgHrdBIkLKl = LsBICdox.limits
    const oKRBZESyItgmYtYywCSn = jrjTClsNTJ.createBuffer({
        label: "FlrZPitLcvWOdDaMTiJZ",
        mappedAtCreation: false,
        size: 202416768,
        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDIRECT | GPUBufferUsage.QUERY_RESOLVE
    });
    aDiIZiZKELPMkgSwvqF.end();
    const uKKWLRwvOUOm = jrjTClsNTJ.createQuerySet({
        count: 4048,
        label: "cQuHDpJTLkmCRA",
        type: "occlusion"
    });
    const dSmONVqNGNqhHeoFV = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rg8unorm",
        label: "XDYdFBCLTPCSrWJy",
        size: {
            width: 473,
            height: 39,
            depthOrArrayLayers: 28
        },
        mipLevelCount: 3,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,
        viewFormats: ["rg8unorm"]
    });
    const eMvxs = dSmONVqNGNqhHeoFV.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 1,
        format: "rg8unorm",
        label: "DDNGFHgsxzTgpDIOE"
    });
    const yqtSzoUjURthX = wzvDiDpcOq.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.21195479776578052,
                g: 0.42802879312132025,
                b: 1.2345131495498098,
                a: 1.4569920537834047
            },
            loadOp: "load",
            storeOp: "store",
            view: eMvxs,
            depthSlice: 10
        }],
        label: "XJuLxxpW",
        maxDrawCount: 2768648065,
        occlusionQuerySet: WEQUkhvCorKp
    });
    yqtSzoUjURthX.end();
    const bzGyoVFsFfFXIRlzkSKW = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const UmJYfVCQSpdTOQNlMI = wzvDiDpcOq.beginComputePass({
        label: "zTHPEoEB"
    });
    UmJYfVCQSpdTOQNlMI.setPipeline(QFfWewZou);
    const oNmNhNZJX = UmJYfVCQSpdTOQNlMI.label
    const hBFauVYtNMVp = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rgb10a2unorm",
        label: "FrjjVTceg",
        size: {
            width: 621,
            height: 871,
            depthOrArrayLayers: 51
        },
        mipLevelCount: 6,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,
        viewFormats: ["rgb10a2unorm"]
    });
    const YvelIwkSqTsZluJKhVWM = hBFauVYtNMVp.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgb10a2unorm",
        label: "rovyCsPWrZkkmcBbOS"
    });
    const hqXZyPcApFHif = wzvDiDpcOq.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.11692687728619355,
                g: 1.0188213624701774,
                b: 1.3036560472101997,
                a: 1.2455195045400667
            },
            loadOp: "load",
            storeOp: "store",
            view: YvelIwkSqTsZluJKhVWM,
            depthSlice: 18
        }],
        label: "XoHPZtNgrFoEcL",
        maxDrawCount: 2868864528,
        occlusionQuerySet: WEQUkhvCorKp
    });
    hqXZyPcApFHif.setVertexBuffer(0, oKRBZESyItgmYtYywCSn);
    const pzzQqRKMPWtDtU = UmJYfVCQSpdTOQNlMI.label
    UmJYfVCQSpdTOQNlMI.end();
    hqXZyPcApFHif.setPipeline(xQISsMBueev);
    hqXZyPcApFHif.draw(7);
    const dykuTy = jrjTClsNTJ.createCommandEncoder({
        label: "ftyfuwRCKAuoFoloAq"
    });
    const hEsKfJFZfm = EjnakLRPet.label
    hqXZyPcApFHif.setPipeline(fcgHpnwikH);
    const uIVwXGbkNU = nIJQJssNtrpLvwaOx.label
    const VLLuDGOaTOQVf = zJUrwIGTqN.limits
    const QjBmhXpyhXUdc = jrjTClsNTJ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "bgra8unorm-srgb",
        label: "nhXSnzbWFaoDSfciqU",
        size: {
            width: 60,
            height: 979,
            depthOrArrayLayers: 34
        },
        mipLevelCount: 8,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,
        viewFormats: ["bgra8unorm"]
    });
    const jDiKCFIjl = QjBmhXpyhXUdc.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 1,
        format: "bgra8unorm-srgb",
        label: "gpJekffYDPtuHkFfVbhp"
    });
    const wiNLNOAAyVyddeYw = EjnakLRPet.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.3099781252961225,
                g: 0.3729132337214025,
                b: 1.0469313597835237,
                a: 0.6008747950500792
            },
            loadOp: "load",
            storeOp: "discard",
            view: jDiKCFIjl,
            depthSlice: 14
        }],
        label: "VzUxLXLrgoK",
        maxDrawCount: 1314768729,
        occlusionQuerySet: uKKWLRwvOUOm
    });
    const lxkouePbNEpI = EjnakLRPet.label
    const dZphXLllKQmlSNw = EjnakLRPet.beginComputePass({
        label: "sqQTyA"
    });
    const gIzdpgysjVUVnMLIvePD = jrjTClsNTJ.features
    const GfHyDaX = ZcHpsvhaDPLsU.info
    const cFHbdreewvGm = hqXZyPcApFHif.label
    WpwGmhDgsFRl.writeBuffer(sdJtMhCvSSfNReJr, 1800440, GqUMcfoUNjycV);
    const HHzLeMHiPbYS = VtdWLjHNPZmX.features
    const OXMQvrFnrPuVy = uKKWLRwvOUOm.label
    const upMfhFTbJCTxzUJy = IKsEMsMQAtuM.features
    wiNLNOAAyVyddeYw.setPipeline(azbHOmVaAtiRjPXyIjkB);
    wiNLNOAAyVyddeYw.draw(7);
    const APIaoSWUAfPhFDJ = jrjTClsNTJ.features
    hqXZyPcApFHif.end();
    const Hkjuoocs = wzvDiDpcOq.label
    dZphXLllKQmlSNw.setPipeline(KjxYpwGOjpf);
    const uVihgoXEXWrdGhm = jrjTClsNTJ.limits
    const kFnOPoHceJvYjw = dZphXLllKQmlSNw.label
    const yKvsB = VtdWLjHNPZmX.isFallbackAdapter
    const ExXVLZcXKBORWlITUVM = aKjUgRqsOwwWtc.features
    const tHRwKeHAoAx = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: EMJMrwTnBKYMRtfdYFsW,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "one-minus-dst",
                        srcFactor: "one-minus-constant"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "one-minus-constant",
                        srcFactor: "zero"
                    }
                },
                format: "rg16float",
                writeMask: GPUColorWrite.ALL
            }]
        },
        label: "MXfbxonXCifG",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const VHQqNikKvjigDmOcVO = dykuTy.finish();
    const QQKDTzcoFttQtDpff = EjnakLRPet.label
    wiNLNOAAyVyddeYw.end();
    const NAgakbGctQYILx = jrjTClsNTJ.features
    const xAgvhhWGaOjnGl = ZcHpsvhaDPLsU.features
    zslKRpNBCqMBWfiRlwS.writeBuffer(sdJtMhCvSSfNReJr, 22319608, zTOTuvkfNRad);
    const nBrKNcEjxipPg = EjnakLRPet.label
    const YFhjdTlYGMLZ = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "r16float",
        label: "LZIcuDrVCiOcsWYXdQok",
        size: {
            width: 3100,
            height: 3154,
            depthOrArrayLayers: 21
        },
        mipLevelCount: 9,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC,
        viewFormats: ["r16float"]
    });
    const wDgjNvV = YFhjdTlYGMLZ.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r16float",
        label: "kTbYWABDe"
    });
    const EdbHeQsjaWt = EjnakLRPet.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.8183764357618093,
                g: 1.9279338064982088,
                b: 0.8005954646919007,
                a: 0.5196968848821177
            },
            loadOp: "load",
            storeOp: "store",
            view: wDgjNvV
        }],
        label: "RLaZvWzkmdtN",
        maxDrawCount: 3358276997,
        occlusionQuerySet: aKVZpRVZxtFyQJZocv
    });
    EdbHeQsjaWt.setVertexBuffer(0, oKRBZESyItgmYtYywCSn);
    const haqjUTlyXY = jrjTClsNTJ.features
    const pSFWTaopJq = jrjTClsNTJ.createCommandEncoder({
        label: "byWEKvbKl"
    });
    dZphXLllKQmlSNw.end();
    const ScoUSzTPZTBlcuR = jrjTClsNTJ.createQuerySet({
        count: 68,
        label: "nAvpjsk",
        type: "occlusion"
    });
    const prNYActnisoxgczJRbq = navigator.gpu.wgslLanguageFeatures
    const pPsJwXADJDdRgVyjvAyX = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: EMJMrwTnBKYMRtfdYFsW,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "dst",
                        srcFactor: "one-minus-dst-alpha"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "dst",
                        srcFactor: "one-minus-src-alpha"
                    }
                },
                format: "r16float",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.RED | GPUColorWrite.GREEN
            }]
        },
        label: "YXgHFCNYwmft",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "ccw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    EdbHeQsjaWt.setPipeline(pPsJwXADJDdRgVyjvAyX);
    const sHTyofpEmWuxNbgxf = jrjTClsNTJ.createBuffer({
        label: "cIPuJXPsMwFFT",
        mappedAtCreation: false,
        size: 107129620,
        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDEX | GPUBufferUsage.VERTEX | GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST
    });
    const pkTbGR = jrjTClsNTJ.label
    const cOebiasipprESj = jrjTClsNTJ.createQuerySet({
        count: 2986,
        label: "yNKYE",
        type: "occlusion"
    });
    const EgDIjBpJysWaglQK = pSFWTaopJq.beginComputePass({
        label: "LlHBfpvWMkgzHiXsiLwg"
    });
    const UcANRxkaegfEJxCT = jrjTClsNTJ.limits
    PqWITydmuGZMAeCS.submit([dBPYO]);
    const tycctgbqoAx = WEQUkhvCorKp.count
    const aQyhyb = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "tmdvcaKUHUCaXNziWFj",
        layout: "auto"
    });
    PqWITydmuGZMAeCS.writeBuffer(sHTyofpEmWuxNbgxf, 22687272, jhoud);
    const lQVSCvDWxHTKFxr = jrjTClsNTJ.createBuffer({
        label: "staUpLwhs",
        mappedAtCreation: false,
        size: 214204916,
        usage: GPUBufferUsage.COPY_DST
    });
    const ABDsdWobFa = WjfsHlTG.label
    const yufNsREO = jrjTClsNTJ.createShaderModule({
        label: "vertex",
        code: QfzAfNWv
    });
    const ekmZgmmfKQgcyapzrLY = YFhjdTlYGMLZ.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 7,
        baseMipLevel: 1,
        format: "r16float",
        label: "AfZpwnMPDo"
    });
    const jNeGTtNMrdltb = ZcHpsvhaDPLsU.limits
    const uYDUXcfuljibXzaWON = jrjTClsNTJ.createBuffer({
        label: "AEJPapBBZwFKrvIDmVV",
        mappedAtCreation: false,
        size: 39346348,
        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT | GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_SRC
    });
    const qtrAlfZoPXtnZ = EgDIjBpJysWaglQK.label
    const LswETLGrQlSqADyMw = aKVZpRVZxtFyQJZocv.label
    EdbHeQsjaWt.setVertexBuffer(0, uYDUXcfuljibXzaWON);
    const jNIdkmkaCiRBfkGHbuvg = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: xzeVbPQbWZJZxdOxr
        },
        label: "AjtPoGzbtBosjTf",
        layout: "auto"
    });
    const OFIjYciLRzHVYbA = YPbuRD.type
    const vZIFoxkDGKchRvDQf = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "rgb10a2unorm",
        label: "fJYcEGLUOZZhWNDyYZB",
        size: {
            width: 3487,
            height: 1749,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["rgb10a2unorm"]
    });
    const pCscCLAWGtynRm = VtdWLjHNPZmX.limits
    const aucvXvSdgINauUl = jrjTClsNTJ.createBuffer({
        label: "xjOiIFLzNwLfYcGKuvT",
        mappedAtCreation: true,
        size: 27272708,
        usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.STORAGE | GPUBufferUsage.INDEX
    });
    const tkFVUINhTZMlFyAm = jrjTClsNTJ.features
    const HaQGCjjRlF = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "r16float",
        label: "hwUnovNnXiAgYKdP",
        size: {
            width: 1224,
            height: 374,
            depthOrArrayLayers: 43
        },
        mipLevelCount: 2,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,
        viewFormats: ["r16float"]
    });
    const TkpFoRtc = HaQGCjjRlF.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 1,
        format: "r16float",
        label: "MfRmzgqYWHKg"
    });
    const frKYCgG = pSFWTaopJq.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.1037658862037523,
                g: 1.2872323833665353,
                b: 1.3727349582475896,
                a: 1.5563262015008528
            },
            loadOp: "clear",
            storeOp: "store",
            view: TkpFoRtc
        }],
        label: "RcCBbl",
        maxDrawCount: 1720636093,
        occlusionQuerySet: ScoUSzTPZTBlcuR
    });
    EgDIjBpJysWaglQK.setPipeline(XvmLHUqGkVwFRhZNTz);
    PqWITydmuGZMAeCS.submit([MqvHvCkxjfPhrGUxNklF]);
    const LCUmkFM = jrjTClsNTJ.features
    const SqIxdLvKjRNQHQ = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    const aKMgAkKQcdYCjtORNfrK = VtdWLjHNPZmX.isFallbackAdapter
    EgDIjBpJysWaglQK.end();
    const NJyYKDdlTbo = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "rgb10a2unorm",
        label: "PPmnAkr",
        size: {
            width: 2044,
            height: 327,
            depthOrArrayLayers: 39
        },
        mipLevelCount: 2,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["rgb10a2unorm"]
    });
    const IAzit = NJyYKDdlTbo.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgb10a2unorm",
        label: "QoQQTZeXNJxhXaowCQxU"
    });
    const VyPsYFcpWp = wzvDiDpcOq.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.5305362750836864,
                g: 1.8940421099708016,
                b: 0.9898917154627929,
                a: 1.4138354656001886
            },
            loadOp: "load",
            storeOp: "discard",
            view: IAzit
        }],
        label: "jZwTEJVwwI",
        maxDrawCount: 2865862642,
        occlusionQuerySet: WEQUkhvCorKp
    });
    const vIjOTStxsfhJQVsR = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "hssAiTjgwzBDfKuXk",
        layout: "auto"
    });
    const POwOmLfQKPSQTezbS = VtdWLjHNPZmX.features
    const AOGzqKeDxzAhidkMt = pSFWTaopJq.beginComputePass({
        label: "eAAvKY"
    });
    const Mkldj = jrjTClsNTJ.features
    const wgurdcMqEZgEWuRqEJ = PnETWQ.count
    const zXFlqwGCyXrOMusQMs = izOIAAkN.label
    const qZjNghddGVNoE = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    const YMpUsGJXboVyCqGfSte = AhdrrSeTsfmi.type
    const eSOjOiFcYO = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: xzeVbPQbWZJZxdOxr
        },
        label: "drWXPqVGSHIpIKuio",
        layout: "auto"
    });
    const BSwDZVpIEoNlBgPa = wDgjNvV.label
    const zpTAzhsd = WZCMYy.count
    const uvstquW = SqIxdLvKjRNQHQ.isFallbackAdapter
    const hjRVPvvN = aKjUgRqsOwwWtc.limits
    EdbHeQsjaWt.draw(1);
    const wSXkpBcCdPtEQ = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "fXwGaHw",
        layout: "auto"
    });
    const hlSqsYmvAfSj = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "src-alpha-saturated",
                        srcFactor: "one-minus-src-alpha"
                    }
                },
                format: "rgba16float",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.ALL
            }]
        },
        label: "RJvzn",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const yZCYDptq = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: EMJMrwTnBKYMRtfdYFsW,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "one-minus-constant",
                        srcFactor: "src-alpha-saturated"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "src-alpha-saturated",
                        srcFactor: "src"
                    }
                },
                format: "bgra8unorm",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.GREEN
            }]
        },
        label: "FgjioLsJZMBhCqdpcwgH",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "front",
            frontFace: "cw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: yufNsREO
        }
    });
    const izMImQtEw = dCOwNQljGtVBJdYZI.isFallbackAdapter
    const KsXKVhicTGk = aKVZpRVZxtFyQJZocv.type
    kDLYAWoFbjD.submit([XvEPvfLWKxLfFIng]);
    AOGzqKeDxzAhidkMt.setPipeline(QFfWewZou);
    const uJSGPlQiCYfKykCp = jrjTClsNTJ.queue
    const KYXAL = jrjTClsNTJ.features
    const RaDHGGnsnsYTh = bzGyoVFsFfFXIRlzkSKW.info
    const MVhXdzraKAuW = await navigator.gpu.getPreferredCanvasFormat();
    const YLyRhHH = await navigator.gpu.getPreferredCanvasFormat();
    const nEyNTOhxEumt = PnETWQ.count
    AOGzqKeDxzAhidkMt.setPipeline(KjxYpwGOjpf);
    const IvcSeMyJ = wohhh.info
    AOGzqKeDxzAhidkMt.setPipeline(KjxYpwGOjpf);
    VyPsYFcpWp.end();
    EdbHeQsjaWt.draw(9);
    const VmiFouIvEiCke = EjnakLRPet.beginComputePass({
        label: "EAOjJVhETTOlT"
    });
    const nxtvssCCRuC = IKsEMsMQAtuM.info
    const zjGBpTQILbCtn = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: EMJMrwTnBKYMRtfdYFsW,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "one-minus-constant",
                        srcFactor: "zero"
                    },
                    color: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.RED
            }]
        },
        label: "HlDdU",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "front",
            frontFace: "ccw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const DeeHEFsOlLsbdDIxF = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const LEqCMvhjtytnOc = SqIxdLvKjRNQHQ.info
    const DADMHfXJaHm = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    OxvdYmlq.writeBuffer(uYDUXcfuljibXzaWON, 4530276, nnMMbzqXYS);
    frKYCgG.setPipeline(pPsJwXADJDdRgVyjvAyX);
    frKYCgG.draw(2);
    const WPpszPiwTqWyK = EXLEXKFXSUjdDXfdk.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 4,
        baseMipLevel: 2,
        format: "rg8sint",
        label: "EcrvsXacgBkuM"
    });
    const HbWgknpDtiurdOfs = uKKWLRwvOUOm.label
    const BWqoWQm = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: tjIKXNCAxoaqVnLM
        },
        label: "HPQLVoVUseIFXQJSQa",
        layout: "auto"
    });
    const vLkwOioUChMwpqMENRbL = jNsYtkDnwESid.label
    const etrBTCLwgYI = jrjTClsNTJ.createBuffer({
        label: "uNlCbQZIMsczafqqeCk",
        mappedAtCreation: true,
        size: 146945644,
        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX | GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.INDIRECT
    });
    const lvEkQzV = ZcHpsvhaDPLsU.info
    const EVwLTqRKktCJamQilRx = jrjTClsNTJ.createBuffer({
        label: "jLxiKUIVJmRktGtb",
        mappedAtCreation: false,
        size: 50140616,
        usage: GPUBufferUsage.MAP_READ
    });
    const iUdKbdoUmznsk = bzGyoVFsFfFXIRlzkSKW.features
    const sjBzarlHDZTCwNIJRb = jrjTClsNTJ.queue
    const KeqPke = EjnakLRPet.label
    frKYCgG.setVertexBuffer(0, sHTyofpEmWuxNbgxf);
    VmiFouIvEiCke.setPipeline(QFfWewZou);
    const slTgsla = IKsEMsMQAtuM.limits
    frKYCgG.setPipeline(pPsJwXADJDdRgVyjvAyX);
    EdbHeQsjaWt.draw(8);
    const krIBmczl = jrjTClsNTJ.createShaderModule({
        label: "vertex",
        code: XtvTmoEGaQI
    });
    frKYCgG.end();
    const NNTQnmUvLUQabo = jrjTClsNTJ.createBuffer({
        label: "tbYmyQiD",
        mappedAtCreation: true,
        size: 90063088,
        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
    });
    EdbHeQsjaWt.end();
    AOGzqKeDxzAhidkMt.end();
    const hkbPFRJjGruzgxZat = pSFWTaopJq.finish();
    PqWITydmuGZMAeCS.submit([VHQqNikKvjigDmOcVO]);
    zslKRpNBCqMBWfiRlwS.writeBuffer(lQVSCvDWxHTKFxr, 198667464, NTgulhj);
    const STRVhsIuJXBXVUQJm = await navigator.gpu.getPreferredCanvasFormat();
    const SMOOemKw = jrjTClsNTJ.features
    const MJsLURIhHk = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: FoVLeohkkhzswM
        },
        label: "haHKu",
        layout: "auto"
    });
    const DXhGxPturZItD = jrjTClsNTJ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "rgb10a2unorm",
        label: "ukSGJjgXTmEBBeG",
        size: {
            width: 2193,
            height: 2559,
            depthOrArrayLayers: 57
        },
        mipLevelCount: 2,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["rgb10a2unorm"]
    });
    const fOLBVa = DXhGxPturZItD.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgb10a2unorm",
        label: "fyWEsJDvryYtAZsWOKh"
    });
    const spGLINLL = wzvDiDpcOq.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.28545870734493173,
                g: 0.25953646989180257,
                b: 1.2214308234989917,
                a: 1.9512443727520956
            },
            loadOp: "clear",
            storeOp: "store",
            view: fOLBVa
        }],
        label: "RjvdUKAaQQp",
        maxDrawCount: 1254752622,
        occlusionQuerySet: WZCMYy
    });
    spGLINLL.setVertexBuffer(0, sHTyofpEmWuxNbgxf);
    const cimhQ = jrjTClsNTJ.label
    VmiFouIvEiCke.setPipeline(eSOjOiFcYO);
    const ujYgp = VmiFouIvEiCke.label
    const zfZkAj = jrjTClsNTJ.limits
    const AKFFkYnceO = jrjTClsNTJ.createTexture({
        dimension: "1d",
        sampleCount: 1,
        format: "rg32sint",
        label: "oSboJmQgantJbyJ",
        size: {
            width: 294,
            height: 1,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.COPY_SRC,
        viewFormats: ["rg32sint"]
    });
    const faghqDab = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: hMEGTw,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "one-minus-dst-alpha",
                        srcFactor: "one-minus-dst"
                    }
                },
                format: "bgra8unorm-srgb",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.RED | GPUColorWrite.GREEN
            }]
        },
        label: "BrLGfibT",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "ccw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const QXhvWsZJJniG = wzvDiDpcOq.beginComputePass({
        label: "myyWwsuwPwbOvEZSTU"
    });
    const RiuudzUDxoge = jrjTClsNTJ.createBuffer({
        label: "ZHCjLhn",
        mappedAtCreation: true,
        size: 56444772,
        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDEX | GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX
    });
    const uwEGmhvS = qZjNghddGVNoE.isFallbackAdapter
    const WBzmbLZkVwmlshXocKHW = jrjTClsNTJ.createCommandEncoder({
        label: "NCLDRNurWFWCUzi"
    });
    const dzHSVmmJyqftgBA = WBzmbLZkVwmlshXocKHW.beginComputePass({
        label: "RbVvGlcEidPjonys"
    });
    const aBccweAfQeA = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const tbRrfHJzbftYalVlVn = bzGyoVFsFfFXIRlzkSKW.info
    const QpzswMabEuD = jrjTClsNTJ.createBuffer({
        label: "uPEpqt",
        mappedAtCreation: true,
        size: 5765760,
        usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_DST | GPUBufferUsage.VERTEX | GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC
    });
    spGLINLL.setPipeline(xQISsMBueev);
    const KfxNWFjcDHHRyAc = await navigator.gpu.getPreferredCanvasFormat();
    zslKRpNBCqMBWfiRlwS.submit([cyxRamAOB]);
    uJSGPlQiCYfKykCp.writeBuffer(lQVSCvDWxHTKFxr, 116806812, adOwI);
    const NBwBtftjGIYBuCjyvroQ = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: iatWN,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "one-minus-src",
                        srcFactor: "src"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rg16float",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.ALL | GPUColorWrite.GREEN | GPUColorWrite.RED
            }]
        },
        label: "VADaIzWFbJNRYib",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: krIBmczl
        }
    });
    const tVZsZXZwEaqWJdiaapC = spGLINLL.label
    const sjqQoAuFZCCBfdeSrAqD = spGLINLL.label
    const FXknApNuqAoQ = PnETWQ.count
    const QxCtuLSPgzPgeMTfc = jrjTClsNTJ.limits
    const dwzXjkaVaHpUh = jrjTClsNTJ.features
    kDLYAWoFbjD.submit([nWDUw]);
    const alPZWSBc = spGLINLL.label
    const JiivDxAlwla = jrjTClsNTJ.createQuerySet({
        count: 3438,
        label: "vRTanFJwQlF",
        type: "occlusion"
    });
    const dnxsd = EjnakLRPet.label
    const vjQxro = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: hMEGTw,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "one-minus-src-alpha",
                        srcFactor: "constant"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "one-minus-dst-alpha",
                        srcFactor: "dst-alpha"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.BLUE | GPUColorWrite.ALPHA | GPUColorWrite.GREEN
            }]
        },
        label: "TQVSZlThvYx",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "ccw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const clUncLslDcBQwgrvliD = jrjTClsNTJ.createShaderModule({
        label: "vertex",
        code: hfIEPt
    });
    const fbsnoCWmBBpxzyOyiF = jrjTClsNTJ.createBuffer({
        label: "zRxwKa",
        mappedAtCreation: true,
        size: 31287856,
        usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.UNIFORM | GPUBufferUsage.STORAGE | GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX
    });
    const NrJVxwcZoYJbxk = jrjTClsNTJ.createCommandEncoder({
        label: "ckfLhwNMntRcJvE"
    });
    const OVTlHXGCkIDHOfONnbMD = NrJVxwcZoYJbxk.beginComputePass({
        label: "WXoGffqyZcR"
    });
    const cxfIpVtzDj = BwQymHH.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 9,
        baseArrayLayer: 1,
        mipLevelCount: 4,
        baseMipLevel: 0,
        format: "depth32float",
        label: "LFiAGDVQajFk"
    });
    const SSchpqJSVpwXBFcX = jrjTClsNTJ.createBuffer({
        label: "zqzcUKkqOuHVbars",
        mappedAtCreation: true,
        size: 255023772,
        usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.QUERY_RESOLVE
    });
    const QiBxgKgFXMkjM = jrjTClsNTJ.createCommandEncoder({
        label: "FdBbfdvCJkWbRcSafu"
    });
    const SncccFUqFinwFXxXazu = QiBxgKgFXMkjM.beginComputePass({
        label: "hwhPJLMuTLOPeG"
    });
    spGLINLL.setPipeline(mNPNDZsYTqFqwa);
    MarwtaGheQa.submit([hkbPFRJjGruzgxZat]);
    const pujnxvdgQcHAYifhBuY = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: tjIKXNCAxoaqVnLM
        },
        label: "zQgrcDqUe",
        layout: "auto"
    });
    const oJcQzKxxTlgpXO = wzvDiDpcOq.label
    VmiFouIvEiCke.end();
    const uJiKDIaPLfwWSe = EjnakLRPet.finish();
    PqWITydmuGZMAeCS.writeBuffer(sHTyofpEmWuxNbgxf, 50042164, vvuQCkvLWaaZ);
    const sFuXxUrMlyAkBE = ekmZgmmfKQgcyapzrLY.label
    const jifuBT = QjBmhXpyhXUdc.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 2,
        format: "bgra8unorm-srgb",
        label: "sOeuAVIA"
    });
    const GxKiSiMMiVvVrELsVP = YPbuRD.type
    const KFKZpXzkkVxYYKj = jrjTClsNTJ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: xzeVbPQbWZJZxdOxr
        },
        label: "wrDXeF",
        layout: "auto"
    });
    spGLINLL.draw(10);
    const FLJnjLoFZsHDyhgmUhW = DeeHEFsOlLsbdDIxF.limits
    const MRxjwlkUqLg = jrjTClsNTJ.createCommandEncoder({
        label: "bwhXkGU"
    });
    const qBOfdKwGhne = MRxjwlkUqLg.beginComputePass({
        label: "tcGvCRxtUSIlJXz"
    });
    const AlHeUVsrdBbUrt = xldcLxvOJqwQmsjSEl.label
    const FkOEFYtfUR = jrjTClsNTJ.createCommandEncoder({
        label: "jhvVhjIRyVJeIjrMq"
    });
    const YVTbvEtxuzYWR = IKsEMsMQAtuM.features
    const pTNXGzkDRs = hBFauVYtNMVp.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 2,
        baseMipLevel: 2,
        format: "rgb10a2unorm",
        label: "FFqiRrdhymBCmftvz"
    });
    const hoyUxvQwsOh = jrjTClsNTJ.createShaderModule({
        label: "compute",
        code: jrovPoabUER
    });
    const EANpTfmnDnJaGdOUKlJs = jrjTClsNTJ.createTexture({
        dimension: "1d",
        sampleCount: 1,
        format: "rgba16float",
        label: "stsHvbG",
        size: {
            width: 637,
            height: 1,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.COPY_DST,
        viewFormats: ["rgba16float"]
    });
    const aicCiJwFemthOMhIkH = await navigator.gpu.getPreferredCanvasFormat();
    const ZxSDxsSgYZjSe = jrjTClsNTJ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: hMEGTw,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "one-minus-src-alpha",
                        srcFactor: "src-alpha-saturated"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "dst",
                        srcFactor: "one-minus-src-alpha"
                    }
                },
                format: "rg16float",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.ALPHA
            }]
        },
        label: "XvqXkicWrEsGSgxQjf",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: EZWFErGi
        }
    });
    const zGtVF = dCOwNQljGtVBJdYZI.isFallbackAdapter
    const JdIUaxODKtMDHJjxOPa = uKKWLRwvOUOm.count
    const sXIKKrfFPpr = WZCMYy.count
    const QUGAiBaGgKsvUgjJ = woaubOYOMMfqGFxvbb.label
    spGLINLL.draw(7);
    const FdTVWIfyDosgJalhHElG = GzrsqrVkSx.label

}
main().catch(console.error);