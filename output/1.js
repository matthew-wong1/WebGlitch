const {
    create,
    globals
} = require('../../dawn_newest/out/Debug/Debug/dawn.node');
const fs = require('fs');
Object.assign(globalThis, globals);
let navigator = {
    gpu: create([]),
};

if (!navigator.gpu) {
    throw new Error("WebGPU not supported on this browser");
}

function loadShader(file) {
    try {
        const data = fs.readFileSync(file, 'utf8');
        return data;
    } catch (err) {
        console.error('Failed to load shader:', err);
    }
}
const PFRWKbmZWTIh = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const dvtOioif = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const GHyucfPVUylW = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const MxzfoFmKva = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const DNcacQJGITkscr = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/fragment.wgsl');
const XylnWY = new Float32Array([-6692, -2673, 6413, -3918, 8899, 4948, 3841, -6071, 4689, -9428, 1467, -2791, 4290, -4698, 8009, -6972, 5604, -8413, 7295, -3044, -468, 3248, -8008, -4016, 923, -9741, 1248, -3728, 5496, -8611, -3291, -8848, 4777, -3959, 2266, 7192, 1038, 4926, 8875, 6101, -4896, 9004, -6969, 9876, 9728, 3973, -5355, 1628, -5669, 9450, 1452, 2790, -3858, -6451, 5568, 6481, -7661, 9785, 3995, -1068, 2628, -905, -7477, 4347, 1475, -6240, 7586, -7093, 6214, -1779, -1936, -2708, -2790, 7690, 2232, 4715, -1029, 3851, 5620, 1550, 8767, 9621, -1789, -1766, 8666, 2748, -9515, 5300, -8585, -1789, -5102, -6839, 3221, 4853, 6615, -6693, 9239, -3523, 6359, -3621, 6653, -8167, 3220, -1418, -3963, -80, -8578, -5865, 9034, -4654, 9767, -2872, -545, 7295, -1674, -1983, -5321, -5029, -4116, 5740, 6081, 6125, 7812, 8175, 5690, -40, -4435, -3440, 222, -4816, -8725, 3511, 7814, -1662, -7456, -286, -3520, -7006, 3303, 5718, -7195, 2700, 2539, 2086, 1023, -1525, -5367, -4855, 6285, 8859, 7693, -1218, -6955, -1016, -2283, 2737, 6439, 5531, 8626, -5473, -933, -7994, 1030, 3281, 4772, 5637, -8643, -476, -9462, 490, 2853, -4784, -5089, -9154, 7152, 3327, 1812, -2573, -632, 4606, -4874, 2676, -8380, 5711, 4637, -1194, 5345, 349, -3943, 9811, 3776, -1015, 4545, 534, 7146, -2465, 8836, -2144, -4552, 3023, -3058, -9949, -7762, -5900, 7956, -1989, -8218, 6688, -5087, -5290, -954, 7109, -3898, -8138, -2942, -2722, -8831, -9426, -9570, 9540, -5615, -4000, -9101, 1087, 9232, 578, -7580, 959, 5748, -2151, 7535, -676, -6585, 4634, 7727, 3938, 4265, -8273, -9477, -3980, 9445, 9073, 4557, -3155, 3507, 1096, -6288, -4553])
const fpBBIYyHvLVdCEL = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const JPEjK = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const bgGenxviIrAzrEb = new Uint8Array([9669, -7652, -2378, 7438, -2771, 4993, -5672, -424, 4701, -1196, -7854, -8725, -4556, 3283, -5293, -5288, -6215, 5562, -9912, 908, -4176, 7475, -7906, 1516, 2451, 7137, 9605, -5432, -6366, -4837, -2968, -8199, -6714, -31, -5945, 3090, 611, -9281, 59, -8641, 1257, -4013, 1554, -2595, -4366, -3032, -5688, 4008, 3459, 4933, 4380, 1157, -2317, -1206, 6545, -6915, -8327, -7424, 1502, -5924, 8273, -3451, 8869, 5007, 2170, 55, -5647, -6596, -4140, 3962, 260, -8751, -8286, 5022, -6839, 8449, 8244, 3009, -8696, -6482, 309, 78, 6249, 1936, -2887, -8523, 1103, -2855, 3456, 2669, -1753, -8096, -8131, -6074, 7702, -611, 7196, 2567, -9299, 7647, -800, 6728, 6587, 7719, -6564, 4772, 8430, -8898, 6069, 7443, 5266, 4975, -9432, 5505, -3884, -1164, -3020, 7623, -2922, 9261, 7342, 2239, 4697, 8513, -4927, 5295, -9524, 2601, -4229, 5986, -9829, -3675, 8246, -2431, -7797, -9679, 510, -591, -619, 359, 9382, -9058, -4475, -7487, 3973, 8749, 7887, -2180, -8764, 325, -6554, -4810, -1310, 7788, 4786, 2131, -1302, 4456, -9883, 9793, -1534, 2031, -6825, 6008, -4740, 1594, 4621, -2042, 5237, -133, -4929, 7918, -6285, -3797, -1625, 4398, 5155, -4231, -3018, 8019, 7162, -2037, -8954, -4286, -1275, -2014, 5103, 8383, 6170, 1724, -3712, -6262, 3477, 3086, 4729, 7252, 1813, 3391, 3290, 5791, 1107, -5519, 7564, 5505, -4492, 7955, 7826, 5213, -6332, 8261, 3846, -2712, -4595, -2664, -9271, -3018, -8684, -6311, 1578, -9497, 9513, 7843, 4222, -7484, -7374, 9787, 1084, -5523, 1119, -1076, 332, 5015, -9709, 9942, -508, -5034, -8363, -6249, -8708, -9163, 9175, -9700, 157, 9372, 9442, -628, 2420, -7338, 886, 2113, 9951, -9824, 8201, -5166, -5817, -370, -1781, -9840, -4311, -1974, -1950, -5938, 3692, 354, 6572, 5152, -3772, -214, -7831, 8543, 4635, 1099, 6650, 382, 4941, 552, -2048, -6785, -8158, -2334, 4721, 7283, -9481, -2190, 8991, 2846, 3190, -9238, -7862, -4793, 5626, -4405, -6879, 9528, 9477, -9825, -8381, -6913, 4774, 575, -4624, -910, -6245, -5486, -1855, -5796, 7093, 7681, -7335, -4079, 9343, 1568, -2421, 453, -1921, 2031, 4669, -6296, -4267, 1331, 6030, -5133, -1695, 5628, -8421, 2703, 5561, -4504, -4915, 2987, -433, 3626])
const UGXKAgvLyU = new Float32Array([5742, 6174, 1192, 6955, -3261, -8113, 9688, -3733, -3895, 3676, -1175, 3865, -8572, -5515, 9670, 8783, -9575, -600, -7598, 7486, 6003, -2110, -5462, 1581, -7035, 9601, 7337, 6457, 336, -5201, 7288, -4223, -4487, -1960, -1251, 6515, 284, -5504, 3594, -4089, -4648, 6623, 6340, -8541, -4111, 6727, -2916, 7259, -5002, -4317, -926, 7694, -1538, 4631, -2357, -4897, -2127, 1180, -3211, 6581, 9102, 2503, -3721, -5367, -1376, 761, 3381, -6411, 2609, -6058, 9572, 6085, -3884, -8328, 8261, 7511, -6296, 2908, -3476, 6334, 5694, -4846, 9747, -8298, -3249, 668, -698, 5903, -6303, -105, 8712, -7564, -7005, 9472, 9903, 5066, -4108, 2732, -5846, 4794, 4869, -4381, -2467, 8136, -6742, 2221, 9208, -4283, 2344, -2229, -2082, 2715, 4121, -9543, -6993, -1552, -1738, 4189, -8396, 1436, 3244, -1510, 4497, -9211, -9353, -8898, 2546, 428, 6672, 9735, -7584, -2731, 8767, -8971, -3973, 6236, -5521, -348, -9816, -3099, -9546, -3011, -9540, -1585, -4702, -7070, -9244, -2240, 499, 6519, -3841, -3089, 2800, -8577, 3214, -7452, 1681, 5108, 9746, -6087, -7220, -2383, 6963, 3931, -2213, -9222, -7115, 2668, -3824, -1495, 1519, -5368, 701, -6488, 5770, -8364, 6771, 8159, 6413, -7946, 3590, 6222, -9498, -1147, 4204, 7765, -6972, 5497, -1860, -1753, 2767, -677, 6930, 4602, -3847, -6825, -689, -3055, 8487, 3574, -1590, -3893, 3165, 135, 2030, -4209, 6851, 7370, 7464, 8254, 2503, -7878, 5666, 2002, 3731, -2839, 9852, 2144, -1319, -4973, -2690, -4020, 6548, -3452, 4045, -9086, 6726, 5810, -6115, -1692, -5588, -5070, 8500, -8691, 4189, 6466, 9744, 2988, -8999, 483, 3265, 2479, 8323, -8565, 5269, -5607, 9520, -9930, 414, -4354, -2638, -1785, -1502, 854, -1562, 7565, -2908, 4554, -6728, 4348, 4440, -3885, -5052, -5889, 2334, -3708, 4509, 6603, -5024, 5550, -3799, -5195, -4863, -500, -2086, 8039, 4528, -4460, -4654, -7520, -1717, 7307, -6556, 4951, -177, -2008, -9688, -66, -487, 2740, -5110, -933, 6153, -9616, -6956, 6558, 6880, 5392, 4653, -3829, 5709, -2115, 41, 4937, 7903, -7830, -2814, -2492, 4023, -127, -6722, 9748, 2337, -2125, -5835, -5263, -7088, -910, 7761, -573, 8444, -8859, 9232, 4098, 8816, 1393, -6459, 5474, 6906, -5805, -834, -2712, -5138, -9641, -1576, -1306, -8662, 3694, -2370, -1375, 2132, 6585, 5575, -3748, -3891, 9309, -7465, 6606, -2392, 4680, 8926, 2702, -1734, 4828, 5586, 7958, -3874, -391, -6348, 1753, -6160, -622, 7806, -7851, 9698, -4277, 526, -8871, -628, -6459, -8730, -7568, 1422, -6764, 3012, 7787, -4361, 5360, -9731, 1432, 2026, -1160, -8421, 6551, 64, -9280, 8854, 6205, 6323, 9418, -4181, 9480, 2567, 6493, 6657, -2253, -6593, -2828, 3514, 1976, 6715, 2886, 114, 2846, 2771, -223, 4543, 2904, 9812, -9776, 4229, 2017, 1223, -2930, -3871, -7906, -9998, 5721, 2558, -3555, 8350, 2212, -6126, -4844, 9419, 9655, -157, -4559, 8008, -4969, 4940, -6972, -129, -9513, -7106, -1904, -4163, -7481, 5479, -8411, -7081, 4560, 1248, -3256, -3426, -834, 1982, 5994, 3627, -6457, 412, -2211, 6803, 8873, 6693, 5295, 4157, -5938, 3231, 3986, -6838, 7176, 2326, 2915, 9306, 5768, -6029, 222, 9363, -2861, 3764])
const BpKnxvEgkpMgI = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const ebITXneQNycmbwNlm = new Float32Array([-2962, 3371, 8933, -9054, -8286, 9713, -1858, 1145, 2587, 1497, -6094, -1323, -611, -8662, 7853, 3034, -4928, -6855, 3014, 5588, 323, 4598, -1967, 4763, 5795, -5731, 3200, 4757, 6431, 9480, -3900, -9133, -2605, 4158, -2881, -7980, 4130, -9138, -6745, -8235, 939, 2678, 3623, 5439, -6352, 419, -5915, 7608, -4838, -548, 4551, 8934, -2374, -98, -1244, -6230, 7108, -3731, 8260, 8250, -5811, 7489, 6121, 9916, -2633, -9921, -628, -8974, -8955, -8047, -1196, 8883, 1191, 6716, -7151, 5344, -3064, -5630, 4549, -7125, -831, 3386, -5718, -7330, -5025, -7812])
const cWwDIRsZrgQSW = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const vvJwJxeARLhGuSU = new Int8Array([-6408, 4115, 3988, -66, -5002, 6778, -4695, 2440, 768, -275, -822, -7367, -3047, -3939, -2675, -7442])
const gifNaxCTesOJDb = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const puAkujHOMCtr = new Int8Array([6087, -8302, -4767, -5709, 4014, -1251, 5541, -1860, -7527, 396, -1928, -5245, -5981, 9131, -4867, -1143, 4445, -5910, -2491, -8334, -5437, 7657, -6819, -6739, -8433, 743, 4471, -1728, 4578, -8793, -9467, -3543, -2754, 6225, -3870, 7223, 217, 3257, 5947, 4465, 4423, 1491, -4838, -1, -2620, 9833, -7218, 3150, -2828, 3837, 7309, 7791, 7596, 7777, -7811, -5252, -9820, -9024, 4766, -8217, -7547, -849, -7783, 4925, -4315, -5719, -226, 1058, -2759, 5580, 5594, 1741, -7845, 3215, -6388, -699, -4029, -3962, -4930, 5039, -1275, 9325, -3400, 2899, 7366, -5951, 4895, -9456, 8378, 5295, -6665, 104, -6811, 1097, 4388, 9196, -9837, -6381, -5400, -1365, -5174, 5956, -7178, 6803, 3264, 955, 5856, -380, -4837, -3248, 5, 9728, -5967, 2161, -3019, 641, 4190, -9006, -5324, 7073, 6978, -598, -8396, -9749, -6898, -4808, 914, 1610, -4233, 4574, 9201, 1826, 344, 3644, -3174, 7591, 3336, 6705, 2240, -9285, -3565, 2297, 754, -4015, 1612, 6516, -8817, -8644, 1814, 6178, -723, -1037, -425, 2548, -7894, -9001, 8657, 9139, 4673, -9226, 8784, 4425, 715, -8074, -5378, -7659, 955, -6289, 9762, -8938, -3544, 9632, 2398, 8598, -2430, -7804, 2965, -9369, -7902, -6003, -7517, -1066, -8362, 8352, -9028, -3334, 9988, 7929, -3612, -5506, 1054, 8868, -4526, 6699, 944, 3298, -3114, 8667, 4286, -701, 5197, 837, 2352, 1165, 5278, -868, -2289, -7462, 9974, -7068, 337, -896, -4826, 9485, -6448, -8297, 1197, 3545, 2980, -513, 7101, 4118, -1123, -8001, 7544, 3797, 9254, 5851, -6789, 7429, -5968, -9507, 8589, 7358, 510, 6178, 955, 8021, -9454, 7969, 5826, 7632, -368, -429, -7410, 9607, 3283, 9282, -5589, 5848, 9399, 1223, 6903, -6591, 7780, -1969, 5457, 4822, 3205, -2017, -5673, 8567, 8556, 5673, -5301, 8981, 5969, -3401, -9341, 7290, 5536, 8507, -2587, -180, -4108, 7572, 1564, -7709, 5296, -185, 5963, 8726, 4846, -6649, -8641, -5072, 5327, 6291, 5660, 437, 4814, 7433, -745, -2611, -3675, 7291, 954, -1731, -4053, 1060, 9151, 8768, 9125, -7126, -127, 6567, -1252, -3523, -6630, -4939, -3698, -3579, -9861, 6451, -5395, 3011, -7473, 7982, -8226, -2917, -5274, -5913, -7094, 1192, -9387, 7642, 6874, -5623, 9299, -9199, 6152, 6054, 9382, -4729, -1539, 7117, -4606, -2738, -225, -8265, 3736, 410, 8279, -3445, -6022, 2190, 4282, 4728, 5615, 3898, 8495, -1805, -2832, 5379, 7846, 9374, -33, 9036, -2762, -2197, -888, 4699, 7088, -3899, 175, 2699, -1324, 7783, 4169, 3699, -7259, -5816, 3922, -1730, 6878, 4386, -5901, -3478, 5201, 5347])
const wEVPliAPk = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const amGJLYHkZEvcKVabX = loadShader('../WebGlitch/rsrcs/shaders/compute/1/compute.wgsl');
const qrSOKASyJYWm = new Float32Array([3136, -835, -4425, 8648, 5015, 1166, -6375, 8185, -4462, 8117, -7631, 7982, 4448, -3168, 7899, -4480, 560, 4789, 395, 1948, -826, -7983, 7503, 5757, -6205, 8555, -7638, 5660, -6532, 704, -8865, 320, 2618, 3725, -5753, -993, 7406, -1707, -7393, 9603, -2317, -6949, 2437, -391, 2871, -7293, 1696, 8997, 4451, -6839, 8887, -9692, -7721, -6421, -881, 818, 4207, 5016, 5832, -2314, -9503, 5686, -8836, -3165, 6512, -2357, 3819, 2427, -9886, 4761, -4331, 1398, -6957, -5874, 4418, -7739, -364, -3803, -9307, 3373, 8785, 7421, 7557, -1225, 6528, -5798, -722, -2429, -5570, -347, 7644, -1708, -9040, -5174, 9452, 1035, -6551, 6395, 6166, -1903, 6655, 3523, 4278, -3348, -603, -8389, 8358, 9720, -8639, 2119, 8671, 5185, -9599, -9951, 3277, 675, -7993, 1667, -9744, 9441, 1815, 7764, 1971, 9713, 2479, 5831, -4763, -119, 2705, 1123, 6301, -411, -2822, 6828, 9931, 2660, 4869, 6707, 591, 6877, 5589, -8714, -9233, -4576, -9653, 3160, -7460, -6273, 7852, -3207, -9757, -9989, 265, -980, 2997, -2630, -3886, 7293, -2894, -2196, -5270, 8317, -8420, -1284, -5941, 8663, -4279, -9274, -6069, -1212, -9984, 8070, -5120, 109, 5107, -9924, 2486, 1192, -7707, -9148, 6879, -8891, 7627, 8609, -1618, 2370, -590, 6530, -5739, -5122, -6079, 4152, -1270, 4559, 7353, 5089, -5871, -4041, 5377, -3939, -4479, 3938, 9132, 8491, 2865, 7501, 8805, 6049, 5791, -3512, -9191, 1909, 5841, 3170, -8546, -9286, 2832, 4654, -5063, 3759, -4043, 9365, 2589, 8688, 3328, 292, 7424, -4909, -1254, 1589, 910, -850, 6962, 5703, 2141, -5742, 620, 3978, -6763, -6374, -2254, 1666, 1642, -4575, 1527, 4442, -7725, 6746, -1184, -9347, 30, -6781, -2480, 5579, 1939, -1140, -3409, -7620, -8805, 2598, -6924, -3886, -6215, 6972, 9756, 5287, -7516, 5566, 6623, -4257, 4856, 5470, -5339, 3473, -6106, -4082, 3642, 5705, -848, -6428, 8343, 8021, 4701, 6622, -1488, -3317, 7391, -8365, 6824, 1980, 1673, -1827, 9493, 7380, -7849, 7337, 1667, 9076])
const FJLbHDUteoSULLKImXY = loadShader('../WebGlitch/rsrcs/shaders/compute/1/compute.wgsl');
const EWJOXSq = new Int8Array([-5596, 1093, 2707, -8187, -2041, 6085, 1486, 5491, -266, -4022, 5484, 3998, 5176, -7785, 3185, 3765, -4695, 4706, -6405, 4249, 2025, 3591, -7273, 3131, 7125, 698, 5356, 4117, 617, -1511, 3774, -2917, 51, -2925, 935, -8117, 7784, -7614, 204, -6450, 1788, 7579, -4486, -4258, -9138, -3442, 6298, 5890, -3392, 994, 7850, 7321, 163, 6596, -23, 9746, -2900, -5547, -1863, 3026, -9826, 3844, -2601, -9486, -2928, 8338, -2756, -2599, 4264, -2458, -6907, 8535, 9859, 5954, -7120, -1938, -1881, 9516, -5388, 1621, -194, 8288, -5995, -1555, 7657, -1755, -4001, 2450, -618, -1320, 9056, 2503, 1642, 157, 9663, -7348, 1733, -1036, -2253, -3676, 5423, 5112, 8179, 3817, -4444, -7144, -4262, 691, 9560, 9640, 6218, 6150, -1984, 6958, -4371, -5981, -2877, 6394, -811, -9579, 3957, 6071, 9779, -3279, 7402, -3320, -9767, 4217, 6231, 2407, -6946, 4607, -2237, 6435, -7922, -287, -2600, 7394, -349, -1159, 4182, 897, -3910, -2514, -8428, 2742, 1788, 9792, -2240, -7273, 4167, 4445, -515, 729, -8127, 6652, -718, 2493, -1919, 5865, 3459, -1931, 4436, -6696, -4381, -4031, -3637, -8629, -499, -7334, -8818, -7808, -7139, -6669, -45, 4723, 8208, -7982, -6771, 3010, 5510, -9632, -4020, -9016, 7261, -956, 9332, -3376, -7594, -2208, 2101, 8194, -5109, 2889, 5529, -1737, -2338, 4145, -5815, -309, -4143, 128, -9776, 6418, -6501, -7182, 1155, 3445, -5371, 1019, 3983, -1569, -5548, -180, -7859, 2662, 3924, 7704, -7495, 8652, 9956, -6330, 4176, 1342, -6085, -5128, 8662, -5979, 6846, 7491, 7433, -3826, -4617, -7649, -3816, -9515, 8856, 9436, 9150, -8923, 1076, -7296, -1848, -7156, -2899, 9510, 5761, -4875, -8694, -7440, -3514, -1064, -5300, 1576, -4866, 216, 6221, 5568, -7240, 5185, 60, -5109, -2352, -5457, 2785, -7648, 5706, -2119, 6353, 9794, 8921, -9221, -9250, 2453, 7259, 4864, -6637, -4408, -3480, -154, 1072, -6535, 6017, 2825, 7965, -6413, -6860, -4174, 4246, -613, 3318, 4796, 2622, -3774, -4633, 12, -1224, 4818, -5754, 7341, -6868, -7354, -8222, 5518, 1304, -5097, -5136, 9273, 1894, 1704, 5069, -1345, 5564, 4852, 2277, 90, -927, 2585, -2222, 5984, 2410, 1857, 6503, 7395, -1477, 9462, -4440, 6702, -142, 8997, -6167, 6106, 1919, -7359, 6847, 5319, 968, 4961, 9649, 9191, 9416, -3414, 9207, 3052, -4466, 4606, -6349, 2622, 4565, 696, 7489, -9299, 6389, 5886, 448, -9535, 5511, 7811, 2649, 6225, -4880, -2544, 2588, 129, 3294, -1490, -5600, -1331, -3262, -6559, 2054, -9524, -9198, -8348, 3500, 7339, -2892, -3408, 927, 3824, 4385, -7480, -2182, -9328, -6581, -2812, 6726, -4309, -3836, -7227, -2098, 3459, 3528, 7425, 1596, 7269, 8778, -7105, 9663, -2908, -12, 838, -7365, 5116, 2018, -7295, 5330, -1837, 7723, -5041, -969, -3519, -6094, -4546, 9546, 2091, -3586, -3661, 9234, 3248, -2714, -5299, 5253, 5829, -8979, 4521, -2971, -3040, 4047, -1761, -5499, -4973, 3682, 6888, 714, 2881, -839, -9792, 1113, 201, -1262, -1628, 8084, 8605, 4088, 3636, 861, -805, -900, 6023, 6756, 8691, 9245, 626, 8327, -9060, 8114, 5107, 7285, -3388, -5644, 1519, 37, 2895, -3926, -582, 7078, 7332, -3582, -9789, -105, 1978, -6223, 918, -2736, -3415, -7197, -6114, 3378, 8037, -5034, 4214, 3169, -7117, -1484, -615, -5741, -9499, -6671, -3855, 5612, 1217])
const ASwfFSDhcdW = new Int8Array([9869, 6796, 2792, -4087, -158, -9816, 6773, -7642, 388, 40, 4071, 5990, -3785, -3039, -5035, -7961, -8321, 3854, -5203, -7327, -8579, 6205, 1751, 224, 3283, -9836, -5914, 154, -3366, 867, 8055, -578, -3366, -6860, 4030, 2400, 9109, -1734, -6883, -4874, -3494, 7462, 5853, 5252, 1567, -5555, 2325, 3482, 2933, 581, -5474, 6717])
const IoEXyPRm = new Int8Array([8563, -1110, 3233, 8625, 3892, -4368, 4340, 8056, 8893, 9742, 5155, -9770, 9179, -1212, -9799, 9507, -1430, -5019, -6170, -9970, 3203, -665, 652, 5048, -6045, -940, 3581, -5444, -5465, -2745, 6860, 8869, 1023, 7320, -3819, 5692, -3459, -6627, -9582, 1444])
const LILsQQMJDLsFaFizKWY = new Int8Array([6962, 7726, -5893, 9888, 4225, 2142, -7965, -7958, 7911, -2445, -3253, -4530, 2318, 6736, -2814, 4638, 6167, -8035, 745, 8006, 8110, 3250, -2703, 491, -763, -206, -4221, 7763, -6627, -3418, -1578, -7749, 3382, 1262, 6001, 7204, -7429, -5577, 789, -1015, -3143, -5279, -2739, 6315, -6928, 5822, 1832, -5819, 9049, 8712, 7782, -9633, 4667, -5603, -4598, -6929, -667, -9604, -1027, -2476, 7949, -1078, 969, -1633, 2615, 984, 8304, 2881, 4276, 302, 5294, -4742, 6427, 5404, -8918, -6047, -1599, -7375, 716, -1167, -224, -8097, 2392, 2226, 7915, 3125, 6433, 688, -2482, 6853, -5484, 7250, -466, -2436, 447, 1464, 4303, 8183, -9407, -5063, 9595, -1580, -7360, -9023, -6478, 6788, -8931, 1925, -7700, 9268, 8023, 6204, -4157, 8395, -7814, 9276, 2079, -4792, 9288, -2869, 2237, 1769, -1350, -8690, -5962, 9605, -5140, -7209, 6833, -5209, -7861, 1628, 4063, -9009, 9709, -5379, -514, -7162, 5405, 4800, -301, -2319, -6644, -9484, -337, -3964, 8507, 5218, 8945, -2547, 4625, 6853, -9583, 1560, -9190, -2292, 9147, -640, 9463, 4899, -4391, 7194, -4539, -2491, 4691, -2899, -4774, -1733, -2484, 3767, -5799, -9716, 410, 7219, 6818, 5275, 3188, -1692, -1068, -3481, -7706, 5873, -2811, 8885, 6888, 3449, -6541, 1406, -8507, 5937, -7339, 8762, 4186, -4188, -8561, 8230, 8401, -114, 5563, 1058, 1009, -8098, 9481, -3726, 3882, -8111, 7765, -2187, -3577, -2362, 7038, -3987, -5296, -7727, 8511, 3515, -2364, 854, -8090, 1317, 3118, -6194, 8039, 585, -7338, 6973, -7028, 5666, -9384, -2412, 1475, 2284, 50, 5605, 3398, 3068, 1944, 8629, -9026, -5196, 7512, -293, 3372, 4627, -5156, 2514, 9500, -9210, -9824, -5868, -8412, -5328, 9043, -4546, -6566, -3336, -2454, -3654, -7253, -6135, 9350, -2202, -241, -2662, 7681, 740, 1217, -397, -1608, 7997, 6721, 8734, 2079, 7604, 6944, 5671, -5655, -5890, 4815, 8057, -8537, 2277, -9838, -2619, -8172, -7609, -3853, -6275, 4000, -7409, 713, -3259, 3394, 2546, 7248, 48, -7092, 8805, 1146, -1193, 9127, 8227, -6863, -6076, 9029, -6513, 9552, 3548, -8325, 1785, -1944, 6778, 3155, -1434, -9171, -8001, -9031, 4045, 3569, -2673, -3005, 7213, -376, 6802, -3983, -9469, -1694, 8801, -7669, 9365, 322, -936, 2855, -8532, 9945, -3915, 4195, 1021, -1933, 6178, 2799, -5081, -1037, 2340, 7914, -6321, 6760, 6808, 4137, -3588, 6681, -60, 6008, -260, -2505, 4003, 201, 2767, 7251, -8403, -6372, 6103, 3927, 3626, 1186, -7306, 5854, -8583, -1872, 4382, -9278, 5790, 7916, 635, -3444, -8498, 5604, 3703, 2968, 2031, -6722, -5121, -2411, -5953, -1142, -4362, 8361, 2150, 5654, 7683, 7978, -1366, -3739, -7692, 1390, 8941, -9559, -838, -5234, -5879, 343, -8461, -3531, -6792, -8981, -4022, -1071, 3306, -9227, -4175, 9337, 2517, -935, 1904, -6589, 1437, -1134, -8376, 4826, 303, -3784, 3595, 1064, -9918, 6374, -4676, -2658, -4430, -3407, -2572, 1949, 3702])
const FLOJZUosTZv = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const UvBluVnMfNxxpC = new Float32Array([935, 9052, 1582, 3359, -4678, 1837, 8264, -4471, 2800, 1117, 4706, -3265, -706, -6358, -3840, -846, 5610, -158, 5218, 722, 5245, 5543, -4934, -4232, 7816, 3239, -1667, -3584, 5434, -5368, -9124, -5411, -4451, 6031, -2772, -2830, 7115, 4763])
const krQrbHJaoXGX = new Int8Array([-6199, 323, -5073, 8634, 1163, 7171, 4899, -9969, 9926, -8357, 242, -6297, 7929, 2942, -8506, -779, 1512, 6318, -9930, -5870, -9477, -9370, 9304, -8397, 6934, 9350, -263, 6668, 9236, -6333, 5948, 7919, -2088, 5103, 2490, -3771, 9880, -5439, 8864, 1696, 3394, 8706, 3593, -9884, -8986, -6714, 7934, 724, 1410, 2767, -3503, -8154, 3760, -8995, 3866, -9022, -9829, -2239, -7896, -1575, 750, 3980, 4600, -792, -929, -47, -6446, 6898, -6588, 1153, 8602, 4969, 4918, 7467, 4246, -2572, 1480, -1060, -2102, -8298, 89, -9130, -1718, 9786, -6769, 1837, 2216, -4352, -3172, -9154, -7667, 4758, 7458, 6329, -2654, -757, 1031, -4295, 8304, -8142, -1595, 7599, -9846, 5980, 5799, 2760, -6490, 2757, 3799, -2612, 2193, -1505, 6331, 7063, 3974, -5153, 5242, -3630, 3451, 8483, 6609, -7544, 289, -3560, -8220, 4829, 8821, -7979, -9819, -2061, 850, 1410, -8414, 2539, 4434, 5340, 3987, 5204, 8561, -3201, 7827, -9469, -8839, -2927, 4937, 2793, 9094, -5413, 893, 9370, -5746, 2122, 130, 5901, 9272, -190, 5502, 3818, 7405, 1634, 2878, -5671, -4085, 1162, -559, -3115, 3100, 2842, -623, 7684, -391, -5295, -8417, 7690, -4095, -7391, -71, 5012, 9439, -2979, -4838, -4432, 9932, -1828, -7724, 4254, -3585, -8815, -9585, -5932, 2616, 5140, 9349, -145, 2188, 6518, -4767, -8504, -6710, -7522, 4938, 810, -9315, -1133, 7846, -9682, -6572, -6969, -1135, -6051, -3472, 3912, -1431, 1420, 7207, -2944, -1534, 199, 7041, -1329, 8250, 1551, -434, -7683, -3739, 7077, 9103, -8546, -4040, 2242, 9130, -2684, -1468, 5004, -6692, -2191, -4283, -1763, 9177, -9734, 3146, -6717, -2251, 2430, -8566, 8515, 4364, -4482, -2203, 7749, 2473, 6446, -6874, -112, 467, -7924, 8203, 1726, 4012, 4401, 6186, 324, 6260, 4913, -6647, 5517, 5382, 1879, -3991, -1030, -1849, -5449, -2429, -9852, -3682, -6907, 2131, -2264, 4317, 5028, -1148, 5841, 9261, 1336, -657, -2073, -7507, 4825, 6421, -3159, -2094, -5309])
const ZTVQndguHIaY = new Int8Array([7342, -8272, -7331, -3911, -4212, 1044, -7803, -6598, -6209, -3636, -5677, 3111, 3373, -9275, 127, 1957, -4640, 3998, -685, -9596, 4576, -3416, 2455, -1190, 8527, 9148, 5746, -7493, -354, 6848, 137, 5647, 6548, -2368, -6977, 2355, -9017, -3042, 9746, -9834, -6024, -7326, -6889, -9238, 6522, -5206, -7362, -1876, 9575, -3774, 2289, 6311, 2339, -9117, -5767, 8699, 8703, 1927, -9646, -3367, 6751, -1451, -2690, 5249, 3346, 4378, -3131, 5039, 4383, -8369, -258, 1957, -924, 7260, 8369, -6361, 34, -4385, 5395, -4938, -9946, -6833, -5167, -8771, 572, -7038, 251, -3946, -8593, 7493, -3017, -3045, 6363, 7449, 9807, -897, 6678, -1738, -4260, 6930, 1557, -7868, 9781, -4977, -1279, 9829, -2593, 8595, -7366, 9974, -279, 8989, -5173, 8067, 89, -240, -4679, -7278, -6932, 1701, -96, 6953, -8995, -1248, 632, 2911, -5549, 2617, 6409, 6179, 4333, -3046, -4257, 2673, 8290, -3256, -8789, -3066, -1919, -589, -7085, -7206, -2656, -687, 4763, -4890, 2516, -6013, 5857, 9342, -8418, 7173, -6319, 9089, -3965, -6564, -1807, -7657, 7515, -4736, 8757, -4009, -1507, 5607, 1274, -9073, -6086, 6836, -548, 4916, -2698, -6599, -4253, -1241, -5419, -3992, 8092, -1570, -8360, 1807, 7467, 4918, 4004, 2766, -5268, 7710, 4581, -820, 9561, -8954, 8863, -6643, 9150, 607, -2539, -4112, 2655, 3363, 6686, -8998, 8216, -1875, -8560, 8792, -4805, 2186, 3601, -9252, -3817, 9335, 3907, -3320, 4896, 4232, 4139, -7220, 8523, -2575, -2798, -4997, 4263, 909, 8881, 1825, -533, 9715, -7520, -6322, 5561, 2858, 4018, 3309, -315, 6143, -3022, 2892, -6043, 4250, -6901, -4214, -819, -5189, -6438, 6488, -6829, -9378, -8550, 535, -7103, -4032, 8555, -296, -7707, -5999, 8654, 1985, -7296, -9667, 8502, 4769, -5357, -470, -1983, -7617, 5202, 1383, -6956, 2203, 5370, -1528, 9081, -839, -5710, 3100, 7220, -3648, -3247, 6590, 6741, 8266, 6792, -3900, -857, 4256, -8979, 8736, 598, 8086, -3078, 6195, 2013, 1574, -9064, 9890, 4136, -5982, 9253, 1511, 8147, 5878, -640, -7620, -6809, -9573, -1428, 530, -4172, -821, 3508, -8090, 9278, 5159, -5680, -6172, 9314, -9549, -1252, -231, -4173, -2951, 6601, -5230, -2904, 6264, -1606, -3358, -7462, 1090, -9415, 5273, -1665, 9719, 6095, 2332, 9066, -8904, -1418, 324, 4282, -4490, -2993, -6089, 9563, -3224, 8676, -9605, -7557, 9048, 3957, 6512, 817, 5131, 9798, -7105, 2707, 3574, -6250, 7057, -831, 6386, -7685, 1509, -6258, -6238, 3573, 777, -2623, 5824, -9438, -1071, -1580, 9467, 8772, 375, -6706, 6344, 3964, -8488, 8039, -5612])
const hrXoxSzMLODDyxhFRM = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const VPXQYrOeITxeJeeBwxsk = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const TZKbqAixIonqcSwjdq = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/fragment.wgsl');
const odZmwKThYRMhDeYSRt = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const RBZFuVRPLElERUV = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const fvTTAM = loadShader('../WebGlitch/rsrcs/shaders/compute/1/compute.wgsl');
const fTBWkbsAbpRhe = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/fragment.wgsl');
const BlpVUCnDTpbpaWFNn = new Uint8Array([9979, -6072, 3233, -1698, -4381, -5206, 8555, -763, 4719, 7765, -7487, -5135, 2330, -5114, 8359, -813, -5749, 3378, 6900, -1562, -7640, 1320, -6003, 8406, -1269, 7418, 9284, 3465, -3191, 4634, -31, -7145, -8806, -5076, 503, 7493, 8505, 2028, 7677, -9685, -3822, -2555, -623, 4927, 2131, -3637, -5249, 3453, 7605, -4267, -8159, -9769, -2933, -3994, 2438, 7859, 5461, 668, -9237, -5379, -1996, 5269, 5395, -6466, -8233, 8042, -9150, -8900, 9279, 6399, -6716, -5674, -5601, -8742, 8755, -9678, 2426, 150, -1653, 9153, -3038, 8686, -4687, -207, 868, 6847, 2641, -245, -4241, -2932, 3350, -1570, 6314, -836, 2155, 7170, -8440, 2484, -8601, 815, 7786, -7296, -966, -509, -3169, 4300, 9568, 1430, 1703, -7012, 7863, 6295, -7424, -5891, -376, 8950, 4362, -3056, -6668, -4111, -6638, -9512, 367, 7947, 7867, 1349, 3497, -4022, 4567, 613, 8780, -5330, 7981, -3811, 7289, -2101, 5252, 3253, 9300, -8270, -8313, 1724, -2457, -6570, 3777, 6214, 3091, 5353, 247, -6939, 6704, 843, -3577, -9911, 7395, -2552, 5465, 5706, 7625, 313, -8497, -9420, 6305, -4571, 114, 9341, 7189, 1140, 2996, -4042, -6493, 1714, 3840, 1155, 1140, -6194, 7052, -4287, -8074, 2240, 3830, 2892, -4690, 9451, -4793, 8604, -2256, 4200, -463, -9291, 8506, 3363, 9598, -1759, -1579, 7017, -6075, -2521, -2465, 9777, -7193, -7703, 9530, -6207, -641, 5047, 3897, -6801, 4220, 1293, 689, 3105, 8602, 8911, 7863, -3871, 2833, -2837, -4728, -8183, -8922, -3429, -5194, 9974, 4437, 7428, 7103, -2402, 2354, 4764, -153, -7308, -2596, 5470, 1614, 338, -6404, 6097, 700, 8967, 6743, 952, -9623, -2906, 8496, -3286, -8196, 1865, -6739, 876, 3861, 8018, -2503, 3330, 9277, 3548, 7847, 899, -2836, 4910, -5376, -6351, 6459, -8085, 4369, 8315, -5561, -2405, -2534, 9761, 4791, -1538, -8946, -4469, 5318, 3034, 6617, -2847, 9904, 520, 5839, -4170, 7011, -6268, -7234, -8023, 5110, -1532, -3565, 3141, 5598, 324, 4966, 1263, 2509, 4281, 6317, 7693, 2934, 172, -7661, -6216, -9922, -406, -3212, -9282, -9057, -4651, 889, 5746, -3815, 6517, 3581, -8970, 9920, -831, 7946, 3736, 3689, -3353, 5007, -9648, 6113, -5772, 8386, -9371, -3539, 3925, -7165, -5159, -7191, -6036, 1924, -3529, 7747, -4136, -8182, 5197, -9155, 6047, 807, -5517, -9482, 1829, 9178, 7581, -3209, -2253, 4826, 9813, -7918, -6449, -6798, -7953, 3049, 7592, 5565, 2079, 8709, 6744, -908, -7131, -2371, 9645, -5150, -7017, 1566, -5051, 1606, 990, 1914, 9995, 1125, 8365, 9310, -3073, 5912, -3248, -6586, -4645, 9944, -1621, -9226, 4631, -3234, -2475, 1416, 5768, 1310, -45, -6650, 6365, 3426, -8621, 2876, 2049, 9347, 1775, 8674, 1521, -8129, 3674, 2707, -8623, 7107, -8004, -4238, 5905, 2796, 4132, -6642, -4850, -5704, -3326, -6761, -1570, -5160, 5111, -1120, -8488, 9351, 1846, -9384, 1393, 674, 7996, -8806, -4778, -3463, -944, -8387, -2428, -1185, -1739, -1479, 9263, 3688, -478, -2586, 9508, 4167, 9867, -9186, -917, 3174, 567, 3650, 340, 7930, 5104, -2422, 8608, -2805, 6826, 2697, 5332, 3086, -7622, 1152, 8259, -1150, -1724, -5564, -8140, -807, 4271, 3395, -4027, 1326, 3458, -8853, -1601, 244, -2220, 2186, -1552, 7046, -750, 3644, 8151, -6713, -3339, -8158, 9821])
const mHhOQgxsOpI = new Uint8Array([-7298, -3638, 7607, 2265, 5455, 1867, -4921, 7639, 1249, -2419, -9262, 721, 8080, -9622, -6713, 8942, 6290, 2017, -9163, -5607, -7402, -3104, -188, 251, -1840, 433, 4886, 8028, 8135, -8940, -8805, -3916, -2274, 4379, 9798, -7229, -4760, 9454, -3410, -7789, 3024, -3620, -3809, 4674, -3255, 1937, 4709, -2010, -7390, -9604, 1758, 3031, -2226, 6800, -3810, -7051, -60, -6013, -6584, 1034, -4800, -41, -4938, 8966, -983, 5389, -775, -1233, -8052, 5582, 2164, -4463, 6639, 8451, 2613, 5052, 4875, -2216, -1573, 4228, -5816, -6606, -2231, -2471, 4845, 8872, -7126, 7972, -8991, 8951, 4614, 559, 8738, 9304, -1901, 391, 9474, 4811, -7660, 2151, 1640, -3171, 6745, 8016, -8041, -505, -282, -1202, -2665, -5019, 1687, 3064, 4863, 3468, 1212, 4496, -9459, -7595, -6328, -7606, -7219, 4421, 4038, -1715, 3111, -9307, 4100, -3073, -9339, -8781, -2915, -6295, 457, -4042, -7776, -654, -3023, -8549, 433, 4825, -6679, -3329, -9904, 5144, 5591, -4540, 6124, 9025, 7385, -3991, -3260, 6713, 3792, -5589, 5476, 1462, -3670, 6273, 9040, -5810, -142, 3924, 2125, -6042, 7300, -3703, -714, 9928, -8720, -113, 2118, 9245, 4323, -5780, -440, 28, -877, 3091, -2241, 5107, 130, -8774, -1262, 9747, 9551, -9138, -8632, -5589, 8858, 5657, 3078, 7726, 9827, -766, 3109, 6117, 5148, 6864, 1248, 4092, -5931, -6274, 4510, -6670, -8860, -2042, -3343, 4442, -7749, 2370, -8656, 4072, 47, 9564, -2395, 5715, 1455, 6546, 7530, 5450, -1456, 8090, -4460, 1345, 9009, 5398, 141, -3785, 7530, 7989, -4978, 4925, -266, -4765, -4189, -9045, -9114, 8353, -6245, -6552, 5763, 8236, -9699, -4777, -4154, 8983, 245, 1641, 6877, 4613, -3423, -1033, -8050, 3996, -5713, 9925, 968, -2857, -2606, -8126, -8698, 7688, 5232, -1633, 7042, -6508, -5897, -6122])
const LpMUnPIKylxZAN = loadShader('../WebGlitch/rsrcs/shaders/compute/1/compute.wgsl');
const HXknNrjwlGpqjKk = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const NfhgiIfUSAlLUsn = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/vertex.wgsl');
const wHdykndgXnFLV = loadShader('../WebGlitch/rsrcs/shaders/graphics/helloTriangle/fragment.wgsl');
const oPwvjaliYuVlAhBNj = new Uint8Array([17, 251, 246, 66, 58, 181, 113, 125, 23, 109, 64, 232, 100, 188, 134, 185, 214, 6, 230, 20, 63, 112, 44, 51, 131, 9, 213, 42, 184, 165, 30, 158])
const hxNFefCfJwSeAjolsOy = loadShader('../WebGlitch/rsrcs/shaders/compute/1/compute.wgsl');

async function main() {
    const VBYjejGjEILQp = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    const gQBLHugDZ = await VBYjejGjEILQp.requestDevice();
    const sFsKXMvNlrvUZlFkRd = gQBLHugDZ.label
    const bOPPyCnhhudpcgiA = gQBLHugDZ.createCommandEncoder({
        label: "aVlUJUrY"
    });
    const hANhVHFOQ = bOPPyCnhhudpcgiA.beginComputePass({
        label: "ywrFpnFpQcSyjuDGnhOa"
    });
    const CJGKBmReDuWShda = gQBLHugDZ.createShaderModule({
        label: "compute",
        code: hxNFefCfJwSeAjolsOy
    });
    const pFVKRpgdhIajVkwJrMIT = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CJGKBmReDuWShda
        },
        label: "RNLapvBWrgM",
        layout: "auto"
    });
    const LKfAFrV = gQBLHugDZ.createBuffer({
        label: "HNhmFA",
        mappedAtCreation: false,
        size: 32,
        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE | GPUBufferUsage.INDEX
    });
    const VwdOwFnRotAWnXCoAQ = gQBLHugDZ.queue
    VwdOwFnRotAWnXCoAQ.writeBuffer(LKfAFrV, 0, oPwvjaliYuVlAhBNj);
    const mZUfwzfl = gQBLHugDZ.createBindGroup({
        label: "pFVKRpgdhIajVkwJrMIT.bindGroup",
        layout: pFVKRpgdhIajVkwJrMIT.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    hANhVHFOQ.setBindGroup(0, mZUfwzfl);
    const eUAPCMgQKCjeS = gQBLHugDZ.limits
    const NUNAp = hANhVHFOQ.label
    const jZifHrrK = gQBLHugDZ.createBuffer({
        label: "gXMKsGqVLHr",
        mappedAtCreation: true,
        size: 44871724,
        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT | GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.INDEX | GPUBufferUsage.VERTEX
    });
    const PzJsliCrmjDLxdzR = await navigator.gpu.getPreferredCanvasFormat();
    const grVQfvXTVsbcH = VBYjejGjEILQp.isFallbackAdapter
    hANhVHFOQ.end();
    const RuACZXSXxVtVQ = bOPPyCnhhudpcgiA.finish();
    VwdOwFnRotAWnXCoAQ.submit([RuACZXSXxVtVQ]);
    const ztDPlftO = VBYjejGjEILQp.info
    const UjnVxQRvH = gQBLHugDZ.createCommandEncoder({
        label: "FJeuqmnEyJLvZEDb"
    });
    const wkbhTksmYKDhxYyWsTa = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "rgba8unorm",
        label: "atbtLeGvzUoIaMC",
        size: {
            width: 1890,
            height: 1212,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["rgba8unorm"]
    });
    const rbyrqYJflbMGO = wkbhTksmYKDhxYyWsTa.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgba8unorm",
        label: "hEcqoYeQ"
    });
    const spJiBvxKXymELWWbJ = gQBLHugDZ.createQuerySet({
        count: 3754,
        label: "JySfTmtDkTHbWrbka",
        type: "occlusion"
    });
    const VpOEUrxGubTyvlLclsO = UjnVxQRvH.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.6118893862462331,
                g: 1.8615395265797419,
                b: 1.2177078337096536,
                a: 1.9477718346889885
            },
            loadOp: "load",
            storeOp: "store",
            view: rbyrqYJflbMGO
        }],
        label: "CpEXXyN",
        maxDrawCount: 1413517156,
        occlusionQuerySet: spJiBvxKXymELWWbJ
    });
    const yvkpWwlerfoxmH = gQBLHugDZ.createShaderModule({
        label: "fragment",
        code: wHdykndgXnFLV
    });
    const JeZqPihRgciXCFHYlOb = gQBLHugDZ.createShaderModule({
        label: "vertex",
        code: NfhgiIfUSAlLUsn
    });
    const udtLxZDwFQxJsnNZ = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "src-alpha-saturated",
                        srcFactor: "src-alpha"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.RED | GPUColorWrite.BLUE | GPUColorWrite.GREEN
            }]
        },
        label: "jaIARmjsSliaNeUJKB",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    VpOEUrxGubTyvlLclsO.setPipeline(udtLxZDwFQxJsnNZ);
    const DjNsLLdZeyruE = pFVKRpgdhIajVkwJrMIT.label
    const itSTffeTGDxPiWZXq = spJiBvxKXymELWWbJ.type
    const OcLSYfEJYMylVhkASKQt = gQBLHugDZ.createShaderModule({
        label: "vertex",
        code: HXknNrjwlGpqjKk
    });
    const gOcUjlhmRUG = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "rg32uint",
        label: "TpYdOelaVjyFVUx",
        size: {
            width: 2324,
            height: 325,
            depthOrArrayLayers: 9
        },
        mipLevelCount: 5,
        usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,
        viewFormats: ["rg32uint"]
    });
    const qSOcOiYzDUjSSQQVN = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "src-alpha-saturated",
                        srcFactor: "one"
                    }
                },
                format: "bgra8unorm",
                writeMask: GPUColorWrite.GREEN | GPUColorWrite.BLUE | GPUColorWrite.RED | GPUColorWrite.ALPHA
            }]
        },
        label: "aQQYPjKfjNWi",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: OcLSYfEJYMylVhkASKQt
        }
    });
    const PdxhFmmleFQhPJ = gQBLHugDZ.createCommandEncoder({
        label: "EpngZGlKoUjmnS"
    });
    const tjxTEvqhizBgVxVBB = PdxhFmmleFQhPJ.beginComputePass({
        label: "INjrZDCsuiPewqyW"
    });
    const MRpDg = gQBLHugDZ.createShaderModule({
        label: "compute",
        code: LpMUnPIKylxZAN
    });
    tjxTEvqhizBgVxVBB.setBindGroup(0, mZUfwzfl);
    const oolbTqGCxJpSRyVVlCum = gQBLHugDZ.createCommandEncoder({
        label: "YpxhLoFpbgxrKBZbK"
    });
    const SyGFqroFoBZIM = spJiBvxKXymELWWbJ.label
    const GGqGVUbRCLvkRhug = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "bgra8unorm",
        label: "MuQvb",
        size: {
            width: 1041,
            height: 693,
            depthOrArrayLayers: 11
        },
        mipLevelCount: 8,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["bgra8unorm"]
    });
    const ZpQkhgLc = GGqGVUbRCLvkRhug.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 6,
        format: "bgra8unorm",
        label: "rtpWrxp"
    });
    const JckHMxiqRLUHX = oolbTqGCxJpSRyVVlCum.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.5679404194940836,
                g: 0.07504394547214055,
                b: 0.340415693606275,
                a: 0.3017168393808771
            },
            loadOp: "clear",
            storeOp: "discard",
            view: ZpQkhgLc
        }],
        label: "sFpyvirGFWMBaWEvt",
        maxDrawCount: 345728768,
        occlusionQuerySet: spJiBvxKXymELWWbJ
    });
    const MhFuZ = wkbhTksmYKDhxYyWsTa.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgba8unorm",
        label: "fAJpsK"
    });
    const pNAvJe = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rg16float",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.ALPHA | GPUColorWrite.BLUE | GPUColorWrite.RED
            }]
        },
        label: "AIrfsSAEEdvDfK",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "none",
            frontFace: "ccw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    const zEnKbIaAehmzQkfMgJ = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CJGKBmReDuWShda
        },
        label: "FCLesIvyYH",
        layout: "auto"
    });
    VpOEUrxGubTyvlLclsO.draw(3);
    const eLhWkcLLiSgG = zEnKbIaAehmzQkfMgJ.getBindGroupLayout(0);
    tjxTEvqhizBgVxVBB.setPipeline(pFVKRpgdhIajVkwJrMIT);
    const hEdAmxyeX = gQBLHugDZ.createQuerySet({
        count: 1008,
        label: "ybYpsPODOvRuCCLpaN",
        type: "occlusion"
    });
    VwdOwFnRotAWnXCoAQ.writeBuffer(LKfAFrV, 0, mHhOQgxsOpI);
    tjxTEvqhizBgVxVBB.setPipeline(zEnKbIaAehmzQkfMgJ);
    VwdOwFnRotAWnXCoAQ.writeBuffer(LKfAFrV, 16, BlpVUCnDTpbpaWFNn);
    const xIHFrIenMTZNEus = gQBLHugDZ.createCommandEncoder({
        label: "UAHXeqrFqehLvi"
    });
    const oQDfzlqZtMRNAQ = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "r16float",
        label: "lWorqurkLD",
        size: {
            width: 751,
            height: 1505,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
        viewFormats: ["r16float"]
    });
    const hCJlMdUpIkDgwPTFP = oQDfzlqZtMRNAQ.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r16float",
        label: "oMcsYBtRFaiFGmzUchl"
    });
    const grHaX = xIHFrIenMTZNEus.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.0937026860739127,
                g: 1.9950545106011015,
                b: 0.959227699449702,
                a: 1.4379600594187185
            },
            loadOp: "clear",
            storeOp: "discard",
            view: hCJlMdUpIkDgwPTFP
        }],
        label: "LPGKrwoHqV",
        maxDrawCount: 1504443104,
        occlusionQuerySet: spJiBvxKXymELWWbJ
    });
    tjxTEvqhizBgVxVBB.setPipeline(pFVKRpgdhIajVkwJrMIT);
    tjxTEvqhizBgVxVBB.setBindGroup(0, mZUfwzfl);
    const hrUezKFtRefSvOsd = gQBLHugDZ.createBuffer({
        label: "DDsWMPjTVYpyvVvlnT",
        mappedAtCreation: false,
        size: 121688960,
        usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_DST | GPUBufferUsage.QUERY_RESOLVE
    });
    const mhmmX = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "src-alpha",
                        srcFactor: "one"
                    }
                },
                format: "rgba16float",
                writeMask: GPUColorWrite.BLUE
            }]
        },
        label: "DrFqfWINhvrGRfjPPxy",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "ccw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: OcLSYfEJYMylVhkASKQt
        }
    });
    const LhPfeWdY = zEnKbIaAehmzQkfMgJ.getBindGroupLayout(0);
    const vRDJOqHey = gQBLHugDZ.limits
    tjxTEvqhizBgVxVBB.end();
    const pRJXiR = qSOcOiYzDUjSSQQVN.label
    const wypgZj = gQBLHugDZ.label
    const MRwCYxLFpQxcPogC = navigator.gpu.wgslLanguageFeatures
    const BcNkqRqr = spJiBvxKXymELWWbJ.count
    const CORNFc = await navigator.gpu.getPreferredCanvasFormat();
    const nCytCAglFrEpouO = VBYjejGjEILQp.features
    const voHZHnWYjiufReJkm = UjnVxQRvH.label
    const qSsAZ = PdxhFmmleFQhPJ.beginComputePass({
        label: "QgbutsVivWLjyF"
    });
    qSsAZ.setPipeline(zEnKbIaAehmzQkfMgJ);
    qSsAZ.setBindGroup(0, mZUfwzfl);
    qSsAZ.dispatchWorkgroups(70, 243, 45);
    const lpOhFGMvpwedBnpGC = gQBLHugDZ.createShaderModule({
        label: "fragment",
        code: fTBWkbsAbpRhe
    });
    const DwYTXqrkzWphgsqRanNk = gQBLHugDZ.createCommandEncoder({
        label: "wtOPY"
    });
    const qkpIORDvx = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "bgra8unorm",
        label: "XKoRzfhoflDylkTq",
        size: {
            width: 3059,
            height: 3512,
            depthOrArrayLayers: 11
        },
        mipLevelCount: 7,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["bgra8unorm"]
    });
    const tulnl = qkpIORDvx.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 5,
        format: "bgra8unorm",
        label: "bCSzQAmaMiYpnlFa"
    });
    const KZWGKv = DwYTXqrkzWphgsqRanNk.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.7642360810336715,
                g: 0.2683646276800815,
                b: 1.164756780238663,
                a: 0.8558353296267303
            },
            loadOp: "clear",
            storeOp: "discard",
            view: tulnl
        }],
        label: "uusWkk",
        maxDrawCount: 3696726986,
        occlusionQuerySet: hEdAmxyeX
    });
    const HPeoZOwZIxVDkIMeD = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "constant",
                        srcFactor: "dst-alpha"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.BLUE | GPUColorWrite.ALL | GPUColorWrite.RED
            }]
        },
        label: "JhscRiSZP",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "cw",
            topology: "line-strip"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    const MVdZEgC = await navigator.gpu.getPreferredCanvasFormat();
    const dXJebbUpXZLduULuFK = gOcUjlhmRUG.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 4,
        baseMipLevel: 0,
        format: "rg32uint",
        label: "AwBcXwxUcZBaSULF"
    });
    const dRQCzkWhuCJT = await navigator.gpu.getPreferredCanvasFormat();
    const FzaBe = gQBLHugDZ.createBuffer({
        label: "TMSZRcTZSUunIqIHtaf",
        mappedAtCreation: false,
        size: 194623348,
        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC
    });
    VpOEUrxGubTyvlLclsO.setVertexBuffer(0, FzaBe);
    const ybYuyTaDN = gQBLHugDZ.createCommandEncoder({
        label: "JlNsvtPqxsGPhQrQx"
    });
    const BmwyFRpMJV = gQBLHugDZ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rgba8unorm-srgb",
        label: "CWOcCT",
        size: {
            width: 226,
            height: 299,
            depthOrArrayLayers: 50
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC,
        viewFormats: ["rgba8unorm-srgb"]
    });
    const CRRODnAmdFy = BmwyFRpMJV.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgba8unorm-srgb",
        label: "CFFXexlpjg"
    });
    const AnPjHCYtagDa = ybYuyTaDN.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.3327881854236312,
                g: 0.4579163229187777,
                b: 1.6218877225976862,
                a: 1.9549416751090098
            },
            loadOp: "clear",
            storeOp: "discard",
            view: CRRODnAmdFy,
            depthSlice: 17
        }],
        label: "YDHMatQL",
        maxDrawCount: 2197082126,
        occlusionQuerySet: hEdAmxyeX
    });
    const IutKndBY = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const CWzVzXQqQesbloIui = gQBLHugDZ.createShaderModule({
        label: "compute",
        code: fvTTAM
    });
    const HxmxWCkSWlu = gQBLHugDZ.createCommandEncoder({
        label: "abhFDAnSg"
    });
    const QYINAUcZaWvUwfYN = HxmxWCkSWlu.beginComputePass({
        label: "sTDrMXgdwar"
    });
    qSsAZ.setPipeline(pFVKRpgdhIajVkwJrMIT);
    qSsAZ.setBindGroup(0, mZUfwzfl);
    QYINAUcZaWvUwfYN.dispatchWorkgroups(87, 106, 40);
    const RJYMJAwt = dXJebbUpXZLduULuFK.label
    QYINAUcZaWvUwfYN.setPipeline(pFVKRpgdhIajVkwJrMIT);
    VwdOwFnRotAWnXCoAQ.writeBuffer(LKfAFrV, 0, RBZFuVRPLElERUV);
    const YWUwefQUQYzEaWG = gQBLHugDZ.createBindGroup({
        label: "zEnKbIaAehmzQkfMgJ.bindGroup",
        layout: zEnKbIaAehmzQkfMgJ.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    const LnMPormwDXXb = spJiBvxKXymELWWbJ.label
    const euhZDDYifBluEKpT = VBYjejGjEILQp.isFallbackAdapter
    const MMFwNbrz = grHaX.label
    const YSIJfsJCyc = gQBLHugDZ.queue
    const YTRAgHxOP = gQBLHugDZ.createCommandEncoder({
        label: "EWmKyBBgSTwcgoq"
    });
    const fqcDaNtdElmcGANHk = YTRAgHxOP.beginComputePass({
        label: "vvKHvkUGmrLDswLhtXs"
    });
    const iWWZFkEfFZMdHttGYv = gQBLHugDZ.label
    const OBXfS = pFVKRpgdhIajVkwJrMIT.getBindGroupLayout(0);
    const PpKOjUtkC = VBYjejGjEILQp.limits
    const oCThYObrP = await navigator.gpu.getPreferredCanvasFormat();
    const uMtZjlMsoLZC = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "src-alpha",
                        srcFactor: "one-minus-dst-alpha"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.GREEN | GPUColorWrite.RED
            }]
        },
        label: "wOlWb",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "ccw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: OcLSYfEJYMylVhkASKQt
        }
    });
    const SjAGvPgbqD = gQBLHugDZ.label
    const AYWSpcMz = spJiBvxKXymELWWbJ.label
    const jJpsihmmu = VpOEUrxGubTyvlLclsO.label
    const kHTJMoZJlIhdaEXFJQQX = IutKndBY.limits
    VpOEUrxGubTyvlLclsO.end();
    const vglKimP = spJiBvxKXymELWWbJ.label
    const EePfNYw = gQBLHugDZ.label
    const CttyXEHF = gQBLHugDZ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rg16float",
        label: "nUkpK",
        size: {
            width: 5,
            height: 473,
            depthOrArrayLayers: 20
        },
        mipLevelCount: 3,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
        viewFormats: ["rg16float"]
    });
    const BYxvYITLBtXKSJk = CttyXEHF.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 1,
        format: "rg16float",
        label: "DidBRBMuffBhqJXDDTi"
    });
    const cNTYpwofxSrkuzImoe = UjnVxQRvH.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.1805633865595315,
                g: 0.6081691611629818,
                b: 1.793077030413733,
                a: 1.148581083097511
            },
            loadOp: "load",
            storeOp: "store",
            view: BYxvYITLBtXKSJk,
            depthSlice: 1
        }],
        label: "JhdRYqWknVAREvMj",
        maxDrawCount: 364930858,
        occlusionQuerySet: hEdAmxyeX
    });
    QYINAUcZaWvUwfYN.end();
    const IRpREtgQ = HxmxWCkSWlu.finish();
    VwdOwFnRotAWnXCoAQ.submit([IRpREtgQ]);
    const mWbNxZXJGhByKa = gQBLHugDZ.label
    const LNIYbLunw = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "one-minus-dst",
                        srcFactor: "one-minus-src"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "src-alpha",
                        srcFactor: "one-minus-src-alpha"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.ALL
            }]
        },
        label: "ajLmySRWDgLFnmzZUfX",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: OcLSYfEJYMylVhkASKQt
        }
    });
    const pxhjvl = gQBLHugDZ.limits
    const KxHMWxPTWetErrI = gQBLHugDZ.createTexture({
        dimension: "1d",
        sampleCount: 1,
        format: "rg8unorm",
        label: "cxXOKQMHWkcKTXRD",
        size: {
            width: 1349,
            height: 1,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.COPY_DST,
        viewFormats: ["rg8unorm"]
    });
    const ZQWIkbwFDXIfyqQ = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CWzVzXQqQesbloIui
        },
        label: "TviYpq",
        layout: "auto"
    });
    JckHMxiqRLUHX.end();
    const aqePcRglgsfZm = oolbTqGCxJpSRyVVlCum.finish();
    VwdOwFnRotAWnXCoAQ.writeBuffer(LKfAFrV, 0, odZmwKThYRMhDeYSRt);
    const YOWMqoFHmACibzZOZ = gQBLHugDZ.createBindGroup({
        label: "ZQWIkbwFDXIfyqQ.bindGroup",
        layout: ZQWIkbwFDXIfyqQ.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    const aNZPrVAirzG = gQBLHugDZ.createCommandEncoder({
        label: "xKseSIDCFHWBZqExs"
    });
    const JAmFyOcgdaQixPpIAs = aNZPrVAirzG.beginComputePass({
        label: "LGluNPHEX"
    });
    const rkIXEjVOXdMGIJLproP = gQBLHugDZ.createQuerySet({
        count: 19,
        label: "LOShxhsyAaH",
        type: "occlusion"
    });
    const moJncxsSQzXmwrzFT = IutKndBY.features
    const YmUFr = gQBLHugDZ.createCommandEncoder({
        label: "iveCQrjHTmwVwQq"
    });
    const XHvgsTpTqZiXzoM = YmUFr.beginComputePass({
        label: "GEFKUGhhqHonkhxbCiWd"
    });
    const wmVRgt = UjnVxQRvH.label
    const tSfoVt = gQBLHugDZ.label
    const LZSCiHlbsAFdreTtziIe = gQBLHugDZ.createQuerySet({
        count: 2650,
        label: "HJHDmpo",
        type: "occlusion"
    });
    const GEzCJb = YSIJfsJCyc.label
    const YeHdAaZTKjRYILj = gQBLHugDZ.createShaderModule({
        label: "fragment",
        code: TZKbqAixIonqcSwjdq
    });
    YSIJfsJCyc.submit([aqePcRglgsfZm]);
    JAmFyOcgdaQixPpIAs.end();
    AnPjHCYtagDa.end();
    const zKAOAsWwiE = ybYuyTaDN.finish();
    const WwQUN = aNZPrVAirzG.label
    VwdOwFnRotAWnXCoAQ.submit([zKAOAsWwiE]);
    const OGwXrvAv = udtLxZDwFQxJsnNZ.label
    fqcDaNtdElmcGANHk.setPipeline(pFVKRpgdhIajVkwJrMIT);
    fqcDaNtdElmcGANHk.setBindGroup(0, mZUfwzfl);
    XHvgsTpTqZiXzoM.dispatchWorkgroups(249, 110, 16);
    const wfEwfqsjrzRw = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CWzVzXQqQesbloIui
        },
        label: "oDvFYGttRzh",
        layout: "auto"
    });
    const WevVDfZPUHlwKuKqsF = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: MRpDg
        },
        label: "yGUCMQaigEutavDR",
        layout: "auto"
    });
    XHvgsTpTqZiXzoM.setBindGroup(0, YWUwefQUQYzEaWG);
    const AUDuWLPf = VBYjejGjEILQp.info
    const EdotnMXFbSrmdZ = KZWGKv.label
    XHvgsTpTqZiXzoM.setPipeline(zEnKbIaAehmzQkfMgJ);
    const sbeLBFZahESuWBzsf = fqcDaNtdElmcGANHk.label
    const vHtTvlEjjv = gQBLHugDZ.createBuffer({
        label: "sWDlXKWUKkNZxdg",
        mappedAtCreation: true,
        size: 208538852,
        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDIRECT | GPUBufferUsage.VERTEX | GPUBufferUsage.UNIFORM | GPUBufferUsage.STORAGE
    });
    const lSMaWJfeYhBj = ZQWIkbwFDXIfyqQ.getBindGroupLayout(0);
    const lhytTLLY = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CJGKBmReDuWShda
        },
        label: "opwaUgOXxxGRnecgci",
        layout: "auto"
    });
    qSsAZ.end();
    const aUFcTwUTkokrRhxER = PdxhFmmleFQhPJ.finish();
    const HDiboYaKGmX = gQBLHugDZ.features
    const sbCIJPwvFDqcMdpGjebv = gQBLHugDZ.createQuerySet({
        count: 117,
        label: "GIoxiLfYvNWa",
        type: "occlusion"
    });
    const yHvgPeTPMSNicZfje = gQBLHugDZ.createBuffer({
        label: "lgfUmnVvvJ",
        mappedAtCreation: true,
        size: 12380156,
        usage: GPUBufferUsage.MAP_READ
    });
    const qXdVHI = gQBLHugDZ.createCommandEncoder({
        label: "Rbfgbi"
    });
    const BUOMUgavSJ = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "src",
                        srcFactor: "one-minus-dst"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "src",
                        srcFactor: "one"
                    }
                },
                format: "bgra8unorm",
                writeMask: GPUColorWrite.GREEN | GPUColorWrite.ALL | GPUColorWrite.RED
            }]
        },
        label: "jbuDrNCtJKxlUqolIq",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    KZWGKv.setPipeline(BUOMUgavSJ);
    const yrgmYeUjul = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "src-alpha",
                        srcFactor: "one-minus-dst-alpha"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "one",
                        srcFactor: "one-minus-dst"
                    }
                },
                format: "bgra8unorm-srgb",
                writeMask: GPUColorWrite.RED
            }]
        },
        label: "EQocyzw",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "front",
            frontFace: "ccw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: OcLSYfEJYMylVhkASKQt
        }
    });
    const OcwiNsEXyh = VBYjejGjEILQp.limits
    const zEcJONdQ = XHvgsTpTqZiXzoM.label
    const wqHcIdRaZaAXykz = navigator.gpu.wgslLanguageFeatures
    YSIJfsJCyc.submit([aUFcTwUTkokrRhxER]);
    const NQGbtHAoxXlo = aNZPrVAirzG.beginComputePass({
        label: "iYIDaVofA"
    });
    const TWHQrDOhBGMEzPJJww = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: MRpDg
        },
        label: "VIOOcELNXY",
        layout: "auto"
    });
    const gKNXSHaseOVvTDOF = VBYjejGjEILQp.isFallbackAdapter
    const ShdLQspGjycwISHhHh = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "rgba8unorm-srgb",
        label: "XDSJdVmMrXTCcIHAPjvY",
        size: {
            width: 3540,
            height: 2839,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["rgba8unorm"]
    });
    grHaX.end();
    const ZOcnBufFOJkVSTOcMva = xIHFrIenMTZNEus.finish();
    VwdOwFnRotAWnXCoAQ.submit([ZOcnBufFOJkVSTOcMva]);
    const QUUcPfNdsRoAVEDf = GGqGVUbRCLvkRhug.createView({
        aspect: "all",
        dimension: "2d-array",
        arrayLayerCount: 4,
        baseArrayLayer: 0,
        mipLevelCount: 5,
        baseMipLevel: 0,
        format: "bgra8unorm",
        label: "CiXvdWqLribjLJId"
    });
    const JhEVbliSru = oQDfzlqZtMRNAQ.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r16float",
        label: "cnEfcRtqdIcNOLtwuy"
    });
    const OYFNkDwSSrCgmfgk = IutKndBY.features
    const MjztiBcZ = VBYjejGjEILQp.features
    NQGbtHAoxXlo.setBindGroup(0, YWUwefQUQYzEaWG);
    KZWGKv.setVertexBuffer(0, FzaBe);
    const SauKyxyGQaqOoEiKJv = gQBLHugDZ.createQuerySet({
        count: 755,
        label: "JqciVCePsWmubueYx",
        type: "occlusion"
    });
    cNTYpwofxSrkuzImoe.end();
    const HIkHGUojcPeYOBUN = UjnVxQRvH.finish();
    VwdOwFnRotAWnXCoAQ.submit([HIkHGUojcPeYOBUN]);
    const yBgDZrCBCibTAxR = VBYjejGjEILQp.limits
    const UwHhiVx = BmwyFRpMJV.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgba8unorm-srgb",
        label: "WVkmypfvpcN"
    });
    const tREWhtOpQEr = rkIXEjVOXdMGIJLproP.count
    const sGOTrz = gQBLHugDZ.createBuffer({
        label: "nhhyMBngTXYvVqvBqFXJ",
        mappedAtCreation: false,
        size: 8925776,
        usage: GPUBufferUsage.INDEX | GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC
    });
    const TwPCIbXIzGWEir = gQBLHugDZ.createShaderModule({
        label: "vertex",
        code: VPXQYrOeITxeJeeBwxsk
    });
    const FDyhAv = XHvgsTpTqZiXzoM.label
    const uxbMzhsKmwCqUkX = gQBLHugDZ.createShaderModule({
        label: "vertex",
        code: hrXoxSzMLODDyxhFRM
    });
    const YbNcimJin = SauKyxyGQaqOoEiKJv.label
    const cXFQJCeM = YTRAgHxOP.label
    const vVrcvvnufomUOituxhW = zEnKbIaAehmzQkfMgJ.label
    const LJrbANvtyfwZxkwi = gQBLHugDZ.label
    const jFBvtlexsZeMKhL = rkIXEjVOXdMGIJLproP.type
    const zEshlKVplvfEhvO = KZWGKv.label
    const TUhWpfGcWRJRgWroUMZ = gQBLHugDZ.features
    const nJlkdGLI = BYxvYITLBtXKSJk.label
    const kTGQbmlsfmPPW = DwYTXqrkzWphgsqRanNk.label
    const IlmioESQjGQrHIq = TWHQrDOhBGMEzPJJww.label
    KZWGKv.setPipeline(BUOMUgavSJ);
    const ijNKwFCIvZVuS = gQBLHugDZ.features
    XHvgsTpTqZiXzoM.setPipeline(TWHQrDOhBGMEzPJJww);
    fqcDaNtdElmcGANHk.setBindGroup(0, YWUwefQUQYzEaWG);
    XHvgsTpTqZiXzoM.dispatchWorkgroups(54, 110, 4);
    const ZmPkmbylpVzRwnuUU = pFVKRpgdhIajVkwJrMIT.label
    const zjNjBAK = uMtZjlMsoLZC.label
    const GsOEUv = gQBLHugDZ.limits
    const JbXSUOPg = mhmmX.label
    NQGbtHAoxXlo.end();
    const GCyQTqLChUOkDE = aNZPrVAirzG.finish();
    const gHzQZliBFCj = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CJGKBmReDuWShda
        },
        label: "HWcipgRfgWOubqnqBU",
        layout: "auto"
    });
    const aIzJGvg = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "one",
                        srcFactor: "src"
                    },
                    color: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgba16float",
                writeMask: GPUColorWrite.GREEN
            }]
        },
        label: "HxCUlhJwcSgxw",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: TwPCIbXIzGWEir
        }
    });
    XHvgsTpTqZiXzoM.end();
    const TwdezVmzleRIr = gQBLHugDZ.label
    const CjTQDtce = navigator.gpu.wgslLanguageFeatures
    YSIJfsJCyc.writeBuffer(LKfAFrV, 20, ZTVQndguHIaY);
    fqcDaNtdElmcGANHk.setBindGroup(0, mZUfwzfl);
    const SLmmaDDgd = ZQWIkbwFDXIfyqQ.getBindGroupLayout(0);
    const pxLKyjVtGK = IutKndBY.limits
    const jZoiaQaeBWSmpVz = oQDfzlqZtMRNAQ.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r16float",
        label: "DxtthUq"
    });
    const oWLUwKQRYlbcVpUhhnj = navigator.gpu.wgslLanguageFeatures
    fqcDaNtdElmcGANHk.end();
    const uyLeQqEuJyfzOVVyy = YTRAgHxOP.label
    const sBOXNOPkMYG = hEdAmxyeX.count
    YSIJfsJCyc.writeBuffer(LKfAFrV, 4, krQrbHJaoXGX);
    const YbrCZCmeATe = YTRAgHxOP.beginComputePass({
        label: "pPJvONmMZVJGCV"
    });
    YbrCZCmeATe.setPipeline(pFVKRpgdhIajVkwJrMIT);
    YbrCZCmeATe.setBindGroup(0, mZUfwzfl);
    YbrCZCmeATe.dispatchWorkgroups(223, 194, 2);
    const gRhpBeyCAasmjSnvaU = VwdOwFnRotAWnXCoAQ.label
    const aziCenYbRtH = VwdOwFnRotAWnXCoAQ.label
    KZWGKv.draw(2);
    const vQLlPDFmJSgvvfuoK = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "rgb10a2unorm",
        label: "fsIDagiUsxbbRb",
        size: {
            width: 3868,
            height: 47,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["rgb10a2unorm"]
    });
    const eVBLCUUZYOoOjAwh = vQLlPDFmJSgvvfuoK.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgb10a2unorm",
        label: "eyVzdAJUR"
    });
    const fFPFRWgBqRrommM = YmUFr.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.7775729519663688,
                g: 1.8024706758675966,
                b: 1.6550182936774467,
                a: 1.3804581752438732
            },
            loadOp: "load",
            storeOp: "store",
            view: eVBLCUUZYOoOjAwh
        }],
        label: "NFVCaiYY",
        maxDrawCount: 3002512814,
        occlusionQuerySet: sbCIJPwvFDqcMdpGjebv
    });
    YbrCZCmeATe.setBindGroup(0, YWUwefQUQYzEaWG);
    YSIJfsJCyc.writeBuffer(LKfAFrV, 20, UvBluVnMfNxxpC);
    YSIJfsJCyc.submit([GCyQTqLChUOkDE]);
    const lfECdiDk = gQBLHugDZ.createCommandEncoder({
        label: "ZuqgdC"
    });
    const oXzBcEMzGZ = gQBLHugDZ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rg8unorm",
        label: "UuNoLWoCwuCNVqCBQr",
        size: {
            width: 662,
            height: 573,
            depthOrArrayLayers: 14
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT,
        viewFormats: ["rg8unorm"]
    });
    const EYSXq = oXzBcEMzGZ.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rg8unorm",
        label: "XFNHxnKnVul"
    });
    const VuGNRC = lfECdiDk.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.9357249653863036,
                g: 1.7989882479750812,
                b: 0.4999717807891,
                a: 0.4197784028981415
            },
            loadOp: "clear",
            storeOp: "store",
            view: EYSXq,
            depthSlice: 8
        }],
        label: "uQhNyXcZKDSNVB",
        maxDrawCount: 411077014,
        occlusionQuerySet: sbCIJPwvFDqcMdpGjebv
    });
    const QayJomMzUJTqzm = BYxvYITLBtXKSJk.label
    YSIJfsJCyc.writeBuffer(LKfAFrV, 0, FLOJZUosTZv);
    const YbegLzaxaovZqcGn = gQBLHugDZ.createBindGroup({
        label: "zEnKbIaAehmzQkfMgJ.bindGroup",
        layout: zEnKbIaAehmzQkfMgJ.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    KZWGKv.end();
    YbrCZCmeATe.setPipeline(TWHQrDOhBGMEzPJJww);
    YbrCZCmeATe.setBindGroup(0, YbegLzaxaovZqcGn);
    YbrCZCmeATe.dispatchWorkgroups(132, 71, 25);
    const BvNeq = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CJGKBmReDuWShda
        },
        label: "CEDWKouxD",
        layout: "auto"
    });
    YbrCZCmeATe.end();
    const olijgjlaLFsUODiX = gQBLHugDZ.features
    const tdRdyXVUnjLuJZ = await navigator.gpu.getPreferredCanvasFormat();
    const rwfwgyreqHqCbBxghpis = gOcUjlhmRUG.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 4,
        baseMipLevel: 0,
        format: "rg32uint",
        label: "JNOczXKzHTyshAUyAF"
    });
    const lhFPDnstefxasO = DwYTXqrkzWphgsqRanNk.finish();
    const EPywZdJdtxAEaMIZ = qXdVHI.beginComputePass({
        label: "zLsPO"
    });
    EPywZdJdtxAEaMIZ.end();
    YSIJfsJCyc.writeBuffer(hrUezKFtRefSvOsd, 41166412, LILsQQMJDLsFaFizKWY);
    const ofvVeRPOQ = gQBLHugDZ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "r8unorm",
        label: "gQcyhKVDhhJXlvELy",
        size: {
            width: 179,
            height: 976,
            depthOrArrayLayers: 20
        },
        mipLevelCount: 8,
        usage: GPUTextureUsage.RENDER_ATTACHMENT,
        viewFormats: ["r8unorm"]
    });
    const bPrwSpiWtaHsbpaXt = ofvVeRPOQ.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 3,
        format: "r8unorm",
        label: "EEwTMFVMUzJwiCTe"
    });
    const sqtjSFeuPGxUCrJe = YTRAgHxOP.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.6866548585965484,
                g: 0.20729454566405736,
                b: 0.5848610451940766,
                a: 0.7050043055600659
            },
            loadOp: "load",
            storeOp: "store",
            view: bPrwSpiWtaHsbpaXt,
            depthSlice: 0
        }],
        label: "asmftGmagOuQn",
        maxDrawCount: 3931752093,
        occlusionQuerySet: SauKyxyGQaqOoEiKJv
    });
    const ngDWSlr = gQBLHugDZ.createQuerySet({
        count: 3690,
        label: "HTDktPCTLnZELnilo",
        type: "occlusion"
    });
    const yHPkG = gQBLHugDZ.features
    const vebUjcTkXIEFUcdKhKTz = IutKndBY.features
    const CIcgjDpALrjoZYDho = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: YeHdAaZTKjRYILj,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "one-minus-src",
                        srcFactor: "src"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "dst",
                        srcFactor: "src-alpha"
                    }
                },
                format: "r8unorm",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.ALPHA
            }]
        },
        label: "JWolIcYgQkHTNfaLXIQd",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "ccw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    sqtjSFeuPGxUCrJe.setPipeline(CIcgjDpALrjoZYDho);
    const GrZXLhJdDAGPupahUk = gQBLHugDZ.createTexture({
        dimension: "1d",
        sampleCount: 1,
        format: "rgb10a2unorm",
        label: "SAKuaGyrRejBBPKoXe",
        size: {
            width: 2993,
            height: 1,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["rgb10a2unorm"]
    });
    const amktzqdtgpzDuVYQ = qXdVHI.beginComputePass({
        label: "CSXbg"
    });
    amktzqdtgpzDuVYQ.setBindGroup(0, YOWMqoFHmACibzZOZ);
    const rNPClqYTMcOO = sqtjSFeuPGxUCrJe.label
    const inatLwBlhowwM = CttyXEHF.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 2,
        baseMipLevel: 1,
        format: "rg16float",
        label: "YCrLteJ"
    });
    YSIJfsJCyc.submit([lhFPDnstefxasO]);
    const LfbDmAakgT = oQDfzlqZtMRNAQ.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r16float",
        label: "sLYHOd"
    });
    const nxZIyyB = YmUFr.label
    const UbNmVisArjsrk = gQBLHugDZ.queue
    UbNmVisArjsrk.writeBuffer(sGOTrz, 7085624, IoEXyPRm);
    const tAjHEMkMjClPD = gQBLHugDZ.features
    const lULEGrmUcNYSyhgKEA = YSIJfsJCyc.label
    const ZVLcMUHKvxTdBTjX = gQBLHugDZ.features
    const AzzzyUas = gQBLHugDZ.createCommandEncoder({
        label: "QVfgSJV"
    });
    const HwSmjrgy = AzzzyUas.beginComputePass({
        label: "JwsNGNu"
    });
    const oayGTPQlncURozykUjI = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: YeHdAaZTKjRYILj,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rg8unorm",
                writeMask: GPUColorWrite.GREEN
            }]
        },
        label: "yZtXAGDsONee",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "line-strip"
        },
        vertex: {
            entryPoint: "main",
            module: uxbMzhsKmwCqUkX
        }
    });
    VuGNRC.setPipeline(oayGTPQlncURozykUjI);
    VuGNRC.draw(9);
    const dVlwksMwneljejaIlUY = UwHhiVx.label
    const kqQTrtQXyw = gQBLHugDZ.createCommandEncoder({
        label: "mQZaLGvqSLXVcwwg"
    });
    const feLLAGaxTokbuEhmnixG = gQBLHugDZ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "rgb10a2unorm",
        label: "uzKqfICcpkpmLEGUji",
        size: {
            width: 289,
            height: 894,
            depthOrArrayLayers: 5
        },
        mipLevelCount: 4,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC,
        viewFormats: ["rgb10a2unorm"]
    });
    const UrDKSh = feLLAGaxTokbuEhmnixG.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 3,
        format: "rgb10a2unorm",
        label: "DeIkZiKUdQx"
    });
    const KeQSjdKQ = kqQTrtQXyw.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.40938963624189495,
                g: 0.910036916114414,
                b: 0.10371932218163571,
                a: 1.170763130451653
            },
            loadOp: "clear",
            storeOp: "discard",
            view: UrDKSh,
            depthSlice: 0
        }],
        label: "zzkXK",
        maxDrawCount: 2334772020,
        occlusionQuerySet: sbCIJPwvFDqcMdpGjebv
    });
    const fHNLuEsPAexm = sbCIJPwvFDqcMdpGjebv.type
    VuGNRC.setPipeline(oayGTPQlncURozykUjI);
    const wZPHc = sbCIJPwvFDqcMdpGjebv.label
    const JLvknwrWT = gQBLHugDZ.label
    const OKcyQPiL = gQBLHugDZ.queue
    const mABtqUSHioWzZmO = gQBLHugDZ.features
    const SEQMAx = JhEVbliSru.label
    const RikOuh = gQBLHugDZ.createTexture({
        dimension: "1d",
        sampleCount: 1,
        format: "rg32uint",
        label: "vqpmzLOgdQOGZYpLJ",
        size: {
            width: 1639,
            height: 1,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["rg32uint"]
    });
    const bfnHfUThGXXNVE = sbCIJPwvFDqcMdpGjebv.label
    const YhjYpFFq = HwSmjrgy.label
    const eAKpfIqcGi = WevVDfZPUHlwKuKqsF.label
    const DsCVKfmxAYLyTdhvK = gQBLHugDZ.label
    const fhxJO = await navigator.gpu.getPreferredCanvasFormat();
    const rtBIUIRIewwuUphTee = gQBLHugDZ.limits
    const TYDBgPNzJkj = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "one-minus-dst-alpha",
                        srcFactor: "src"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.ALPHA
            }]
        },
        label: "erhWGkfKPqzu",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "triangle-list"
        },
        vertex: {
            entryPoint: "main",
            module: uxbMzhsKmwCqUkX
        }
    });
    const jWdcmfsq = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "min",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "src-alpha",
                        srcFactor: "one-minus-dst"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.ALL
            }]
        },
        label: "XOSDCaXS",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "none",
            frontFace: "ccw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    amktzqdtgpzDuVYQ.end();
    const FZEvguHRBUMoovbwWSVp = jZoiaQaeBWSmpVz.label
    const zrCFBcLsOlQ = VuGNRC.label
    const ZSWLiwYUE = IutKndBY.info
    const hkBcSpKOolDoT = gQBLHugDZ.features
    const eNODOyHXVFcHaUkS = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "rgba8unorm",
        label: "VNIPBBXOtfRad",
        size: {
            width: 2831,
            height: 1714,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["rgba8unorm-srgb"]
    });
    const aVmffEjwICNJr = eNODOyHXVFcHaUkS.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgba8unorm-srgb",
        label: "SCgFfYvKrVSmyeDiR"
    });
    const UcrQTvZtnLhKfnViPWO = qXdVHI.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.3334191095615568,
                g: 0.03316354665637,
                b: 0.04784482359245734,
                a: 1.830598690698351
            },
            loadOp: "clear",
            storeOp: "store",
            view: aVmffEjwICNJr
        }],
        label: "BBsArJWkWuZyQH",
        maxDrawCount: 1776361647,
        occlusionQuerySet: hEdAmxyeX
    });
    KeQSjdKQ.end();
    const rJQMMZycVkm = gQBLHugDZ.label
    HwSmjrgy.setPipeline(lhytTLLY);
    const QYkyfVTrLkXQux = UcrQTvZtnLhKfnViPWO.label
    const fTJVxzgWhyruHPxgwisc = rbyrqYJflbMGO.label
    const psGSeERuqaNGbS = IutKndBY.info
    const ujLoSYXcTGj = kqQTrtQXyw.finish();
    OKcyQPiL.submit([ujLoSYXcTGj]);
    OKcyQPiL.writeBuffer(hrUezKFtRefSvOsd, 49372664, ASwfFSDhcdW);
    const HIiyZMOUZQVoyOOIDCZL = await navigator.gpu.getPreferredCanvasFormat();
    const pvFDaRkTAx = gQBLHugDZ.createCommandEncoder({
        label: "rzLIoSjjszIdBoHcMWl"
    });
    const rxYQNG = gQBLHugDZ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "r16float",
        label: "WzpbmjNQHQoFD",
        size: {
            width: 868,
            height: 193,
            depthOrArrayLayers: 49
        },
        mipLevelCount: 10,
        usage: GPUTextureUsage.RENDER_ATTACHMENT,
        viewFormats: ["r16float"]
    });
    const NlQaGijwAeMtQ = rxYQNG.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 7,
        format: "r16float",
        label: "yKRCNVNWuFKDFo"
    });
    const rCPYpTUpdKyikdjXyvg = pvFDaRkTAx.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.1494374794582654,
                g: 0.3863774067803294,
                b: 0.08943116862501976,
                a: 1.5762949646641284
            },
            loadOp: "clear",
            storeOp: "store",
            view: NlQaGijwAeMtQ,
            depthSlice: 0
        }],
        label: "JJBmGqBGsXzKlqSeCHms",
        maxDrawCount: 3987378327,
        occlusionQuerySet: spJiBvxKXymELWWbJ
    });
    HwSmjrgy.setBindGroup(0, YOWMqoFHmACibzZOZ);
    const mJZPYlOGrmQPjv = gQBLHugDZ.features
    const SZGUBmfqczS = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CJGKBmReDuWShda
        },
        label: "AXUsridJW",
        layout: "auto"
    });
    const YabEmaItD = gQBLHugDZ.createQuerySet({
        count: 2508,
        label: "tMqiWlhiWE",
        type: "occlusion"
    });
    const jTaeKHnWNpzkpnz = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgba8unorm-srgb",
                writeMask: GPUColorWrite.RED
            }]
        },
        label: "bXweFENSXEmaV",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "front",
            frontFace: "cw",
            topology: "line-strip"
        },
        vertex: {
            entryPoint: "main",
            module: OcLSYfEJYMylVhkASKQt
        }
    });
    const LJGMULqlXaKQu = IutKndBY.info
    const RZBTIfrlQoxdqg = navigator.gpu.wgslLanguageFeatures
    const fWJWYavhYwlhW = IutKndBY.limits
    const jSlwtr = gQBLHugDZ.createBuffer({
        label: "hZSFexvZmwWjNyOnw",
        mappedAtCreation: true,
        size: 17153064,
        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.INDEX | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.UNIFORM
    });
    const voKxpdnvH = gQBLHugDZ.label
    const LxoWU = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "subtract",
                        dstFactor: "src-alpha-saturated",
                        srcFactor: "constant"
                    },
                    color: {
                        operation: "subtract",
                        dstFactor: "src",
                        srcFactor: "one-minus-src"
                    }
                },
                format: "r16float",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.BLUE | GPUColorWrite.ALL | GPUColorWrite.RED
            }]
        },
        label: "QYzQfDYplFo",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    rCPYpTUpdKyikdjXyvg.setPipeline(LxoWU);
    const qsVqBEK = await navigator.gpu.getPreferredCanvasFormat();
    VwdOwFnRotAWnXCoAQ.writeBuffer(sGOTrz, 3605584, EWJOXSq);
    const foUcJ = gQBLHugDZ.queue
    const huBRSGQoYpV = pNAvJe.label
    const CAjtARrIrFtuzCqMIvU = YabEmaItD.count
    const otAfKbFYVwfToE = sbCIJPwvFDqcMdpGjebv.type
    HwSmjrgy.setPipeline(gHzQZliBFCj);
    const NCrXs = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "rgba16float",
        label: "UquoJIvBYSUXIqgwprc",
        size: {
            width: 2053,
            height: 2806,
            depthOrArrayLayers: 62
        },
        mipLevelCount: 9,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_DST,
        viewFormats: ["rgba16float"]
    });
    UcrQTvZtnLhKfnViPWO.setPipeline(jTaeKHnWNpzkpnz);
    const DyUezacH = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "one",
                        srcFactor: "src-alpha"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.BLUE
            }]
        },
        label: "aHVUIPRvw",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: TwPCIbXIzGWEir
        }
    });
    fFPFRWgBqRrommM.setPipeline(DyUezacH);
    fFPFRWgBqRrommM.draw(10);
    sqtjSFeuPGxUCrJe.end();
    const aazkIPMyDZOqttQU = YTRAgHxOP.finish();
    foUcJ.submit([aazkIPMyDZOqttQU]);
    const DAgWfqmKBIrMu = IutKndBY.info
    HwSmjrgy.end();
    const NAMFXQHhtYKYkxDKqRDc = AzzzyUas.beginComputePass({
        label: "SicNSRgEe"
    });
    NAMFXQHhtYKYkxDKqRDc.setBindGroup(0, YOWMqoFHmACibzZOZ);
    NAMFXQHhtYKYkxDKqRDc.setPipeline(zEnKbIaAehmzQkfMgJ);
    const pQAqi = gQBLHugDZ.label
    const jbnWOfGvwIGnGgGhiey = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    rCPYpTUpdKyikdjXyvg.setVertexBuffer(0, FzaBe);
    const fpnKBrDPfnQol = VBYjejGjEILQp.features
    const vRyuKUbwfuvs = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CWzVzXQqQesbloIui
        },
        label: "SMtjDJe",
        layout: "auto"
    });
    const XjwIoZTVRuK = gQBLHugDZ.createShaderModule({
        label: "compute",
        code: FJLbHDUteoSULLKImXY
    });
    const zUnOGFlYAyjbdCYPTQm = gQBLHugDZ.createTexture({
        dimension: "1d",
        sampleCount: 1,
        format: "rgba8unorm",
        label: "eTAlpOaaDBxbWaJ",
        size: {
            width: 1692,
            height: 1,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC,
        viewFormats: ["rgba8unorm"]
    });
    const hnuAfrVv = sbCIJPwvFDqcMdpGjebv.type
    UcrQTvZtnLhKfnViPWO.end();
    UbNmVisArjsrk.writeBuffer(sGOTrz, 502184, qrSOKASyJYWm);
    const qYOfG = navigator.gpu.wgslLanguageFeatures
    const ssMOmnt = SauKyxyGQaqOoEiKJv.type
    const tHBcZPbuGPHPUBmIpr = IutKndBY.features
    const kXisIvYNsIoeogk = gQBLHugDZ.queue
    const RDmhLvVqDtqL = foUcJ.label
    const gdsxoHFoqxfKmcj = pvFDaRkTAx.label
    const ziQMuuoiZyNeGl = rCPYpTUpdKyikdjXyvg.label
    const aVSdHKiQXBWJX = gQBLHugDZ.limits
    const AfbwhkVhobxwiyoF = NAMFXQHhtYKYkxDKqRDc.label
    const hIfRzpVTwK = gQBLHugDZ.createTexture({
        dimension: "1d",
        sampleCount: 1,
        format: "rgba8unorm-srgb",
        label: "cjOYguSFWqNajAn",
        size: {
            width: 2844,
            height: 1,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.COPY_DST,
        viewFormats: ["rgba8unorm-srgb"]
    });
    const XPScRBmAeM = spJiBvxKXymELWWbJ.type
    const exXoGIshWYeDPb = gQBLHugDZ.createCommandEncoder({
        label: "zeZniUCelckNnGegM"
    });
    const UtOEEX = IutKndBY.limits
    const KEOVtKwSsuVqa = gQBLHugDZ.createShaderModule({
        label: "compute",
        code: amGJLYHkZEvcKVabX
    });
    const gGqRfpyCKYGdGCLmPvLl = hEdAmxyeX.type
    YSIJfsJCyc.writeBuffer(LKfAFrV, 0, wEVPliAPk);
    const uNxXtqxQlrqdZL = gQBLHugDZ.createBindGroup({
        label: "TWHQrDOhBGMEzPJJww.bindGroup",
        layout: TWHQrDOhBGMEzPJJww.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    VuGNRC.setPipeline(oayGTPQlncURozykUjI);
    VuGNRC.setPipeline(oayGTPQlncURozykUjI);
    const bDrvmQCeKuwyjIJGpmrL = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const TNIUncBNsBX = gQBLHugDZ.queue
    const VylOhjYjdrhNCY = YabEmaItD.count
    const cIwbDvg = IutKndBY.features
    const WSsdCpCqcI = qXdVHI.finish();
    const lELrUCqFInmIQogBCXq = exXoGIshWYeDPb.beginComputePass({
        label: "xcLtCgdq"
    });
    const lKUCvde = gQBLHugDZ.features
    const RdwnNAjqpdy = IutKndBY.limits
    OKcyQPiL.writeBuffer(LKfAFrV, 28, puAkujHOMCtr);
    const GblenmYtBUcSiXJRx = YSIJfsJCyc.label
    const kRGQSRLIlnIjKj = gQBLHugDZ.limits
    kXisIvYNsIoeogk.submit([WSsdCpCqcI]);
    const HmnGUSMtGq = YmUFr.label
    const uOOYMoJiVlQrOe = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: MRpDg
        },
        label: "rIgtTiezqtSVhuAfVh",
        layout: "auto"
    });
    const cMygxBzuFstzUJBsClk = jZoiaQaeBWSmpVz.label
    const NCzVpIdAHzKAYFg = LxoWU.label
    const jlprzXRZUCnmXPrpSzl = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rg8unorm",
                writeMask: GPUColorWrite.ALL
            }]
        },
        label: "beIUPLXFqizJkI",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "line-strip"
        },
        vertex: {
            entryPoint: "main",
            module: OcLSYfEJYMylVhkASKQt
        }
    });
    const JkmIqpRhbA = gQBLHugDZ.createShaderModule({
        label: "vertex",
        code: gifNaxCTesOJDb
    });
    const GlWhGUSrXuFRVjTTb = gQBLHugDZ.createBuffer({
        label: "kJJAIJzHIekZLmTLvD",
        mappedAtCreation: false,
        size: 106953132,
        usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_SRC
    });
    const LTmCTKVdeEmmRgshntV = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "zero",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgba16float",
                writeMask: GPUColorWrite.GREEN | GPUColorWrite.ALL | GPUColorWrite.ALPHA
            }]
        },
        label: "ICFyIS",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    UbNmVisArjsrk.writeBuffer(LKfAFrV, 32, vvJwJxeARLhGuSU);
    NAMFXQHhtYKYkxDKqRDc.end();
    const zMBOEFfXAArXzYsjibu = AzzzyUas.finish();
    const eLVgPeSidJcnyRoqYQJX = IutKndBY.info
    TNIUncBNsBX.writeBuffer(LKfAFrV, 0, cWwDIRsZrgQSW);
    const FygqkOpiXfdElIFsX = gQBLHugDZ.createBindGroup({
        label: "wfEwfqsjrzRw.bindGroup",
        layout: wfEwfqsjrzRw.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    const bZOcpzoHYEShQIVqNpK = gQBLHugDZ.createQuerySet({
        count: 831,
        label: "vXmhIIkWuFUyO",
        type: "occlusion"
    });
    lELrUCqFInmIQogBCXq.setPipeline(lhytTLLY);
    lELrUCqFInmIQogBCXq.setBindGroup(0, uNxXtqxQlrqdZL);
    lELrUCqFInmIQogBCXq.dispatchWorkgroups(134, 20, 40);
    const CmlXMDbZkqkscAWCC = BmwyFRpMJV.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "rgba8unorm-srgb",
        label: "YcjEBGKIDhAWglihIZ"
    });
    const jHhIGyQ = gQBLHugDZ.createCommandEncoder({
        label: "MlAvwzxcwzDgYs"
    });
    const JgBTF = gQBLHugDZ.createTexture({
        dimension: "3d",
        sampleCount: 1,
        format: "r16float",
        label: "cqhQOnbPQHpXb",
        size: {
            width: 841,
            height: 30,
            depthOrArrayLayers: 32
        },
        mipLevelCount: 3,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["r16float"]
    });
    const cgAlQtginMMLF = JgBTF.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r16float",
        label: "vCzVBtUFXQitOiK"
    });
    const wKiBHNLBf = jHhIGyQ.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 0.4744429437914359,
                g: 0.10057584328589053,
                b: 1.5149351570636067,
                a: 0.055289702509162764
            },
            loadOp: "load",
            storeOp: "store",
            view: cgAlQtginMMLF,
            depthSlice: 10
        }],
        label: "sergMSBaNDoFzmEymY",
        maxDrawCount: 597076217,
        occlusionQuerySet: spJiBvxKXymELWWbJ
    });
    const oLdSROWbjWuR = vRyuKUbwfuvs.getBindGroupLayout(0);
    lELrUCqFInmIQogBCXq.setPipeline(lhytTLLY);
    const WRLibZQDgRKMRMNzXrd = pFVKRpgdhIajVkwJrMIT.getBindGroupLayout(0);
    lELrUCqFInmIQogBCXq.setPipeline(SZGUBmfqczS);
    lELrUCqFInmIQogBCXq.end();
    fFPFRWgBqRrommM.draw(6);
    const YtITHFdFHau = jbnWOfGvwIGnGgGhiey.features
    const sEknNU = VuGNRC.label
    const rezWCUguIAEo = gQBLHugDZ.limits
    const cWnlYgCAJolRygqMx = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 1,
        format: "r8unorm",
        label: "FrTzlT",
        size: {
            width: 3130,
            height: 3355,
            depthOrArrayLayers: 46
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,
        viewFormats: ["r8unorm"]
    });
    const HVwwuoDIBiSMuzUm = cWnlYgCAJolRygqMx.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "r8unorm",
        label: "tFcOx"
    });
    const rJdISpSmCaXWISs = exXoGIshWYeDPb.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.0533553340254544,
                g: 1.7034224438018029,
                b: 1.5930846047736873,
                a: 0.18937093899636603
            },
            loadOp: "clear",
            storeOp: "discard",
            view: HVwwuoDIBiSMuzUm
        }],
        label: "srWMKScXpZaOZlzgeiTa",
        maxDrawCount: 2749110141,
        occlusionQuerySet: bZOcpzoHYEShQIVqNpK
    });
    kXisIvYNsIoeogk.writeBuffer(LKfAFrV, 24, ebITXneQNycmbwNlm);
    const YYnqXqY = bDrvmQCeKuwyjIJGpmrL.isFallbackAdapter
    const rwATUzQ = YSIJfsJCyc.label
    const MbZJHSWI = gQBLHugDZ.createBuffer({
        label: "BbTHB",
        mappedAtCreation: false,
        size: 242084264,
        usage: GPUBufferUsage.MAP_READ
    });
    wKiBHNLBf.setPipeline(LxoWU);
    fFPFRWgBqRrommM.end();
    const NonAKLDQIkcuz = YmUFr.finish();
    const rhZgLzFoEEHEZWwch = EYSXq.label
    const bSpOrSPhoRUkUP = IutKndBY.isFallbackAdapter
    const BkYhXaOapGjHMEGxU = gQBLHugDZ.queue
    const JFHuzAT = gQBLHugDZ.createCommandEncoder({
        label: "udJsbkhnVRp"
    });
    const AMiiPbCb = gQBLHugDZ.createShaderModule({
        label: "vertex",
        code: BpKnxvEgkpMgI
    });
    const UvnBZy = gQBLHugDZ.queue
    const jvloUwtGZTuXg = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: MRpDg
        },
        label: "AcfCBs",
        layout: "auto"
    });
    OKcyQPiL.writeBuffer(hrUezKFtRefSvOsd, 66327320, UGXKAgvLyU);
    const VZfmcY = gQBLHugDZ.queue
    const ZdKEKcblVmhv = SauKyxyGQaqOoEiKJv.type
    const nmgsCLHPKUdqpQO = bDrvmQCeKuwyjIJGpmrL.isFallbackAdapter
    const PkHjtfP = YSIJfsJCyc.label
    const XCtHPzwBP = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    const vCexyQyKqyjFSyIr = LNIYbLunw.label
    UbNmVisArjsrk.writeBuffer(hrUezKFtRefSvOsd, 109674788, bgGenxviIrAzrEb);
    const lQrrqc = VuGNRC.label
    const HXoKkkJEisDqjOL = UbNmVisArjsrk.label
    const gCzazPGRGnsWB = gQBLHugDZ.label
    const rCZeKsy = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    VuGNRC.end();
    const zwJrZaoAqHaFAAp = lfECdiDk.finish();
    const mFqlt = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: MRpDg
        },
        label: "lifJYmWvwOYLn",
        layout: "auto"
    });
    const gJHrDv = gQBLHugDZ.queue
    const AuiNWb = gQBLHugDZ.createQuerySet({
        count: 564,
        label: "XWUKvxTOlA",
        type: "occlusion"
    });
    const heQWGCd = ofvVeRPOQ.createView({
        aspect: "all",
        dimension: "3d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 6,
        baseMipLevel: 0,
        format: "r8unorm",
        label: "YmJtsLeX"
    });
    const keEHO = vRyuKUbwfuvs.label
    const xeBfzPDeL = JFHuzAT.beginComputePass({
        label: "jJFHhyUTjQPJGlZMcnos"
    });
    xeBfzPDeL.setBindGroup(0, YOWMqoFHmACibzZOZ);
    const aYkTUVOkUnsaw = CRRODnAmdFy.label
    xeBfzPDeL.setBindGroup(0, FygqkOpiXfdElIFsX);
    const vBtpOzPd = gQBLHugDZ.label
    const qfmikqZiX = wKiBHNLBf.label
    const KraJGCsyfrlh = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "add",
                        dstFactor: "src",
                        srcFactor: "one-minus-src-alpha"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "constant",
                        srcFactor: "one-minus-src-alpha"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.GREEN | GPUColorWrite.ALL | GPUColorWrite.ALPHA | GPUColorWrite.BLUE
            }]
        },
        label: "DPbeymbcV",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "line-list"
        },
        vertex: {
            entryPoint: "main",
            module: JkmIqpRhbA
        }
    });
    const uyVabr = WevVDfZPUHlwKuKqsF.getBindGroupLayout(0);
    rJdISpSmCaXWISs.end();
    const ZdVGDcQaEJhcooyzSM = sbCIJPwvFDqcMdpGjebv.type
    const ddELptbLCkoBwUgTcPPW = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: yvkpWwlerfoxmH,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "dst",
                        srcFactor: "dst"
                    }
                },
                format: "rgba16float",
                writeMask: GPUColorWrite.ALPHA | GPUColorWrite.ALL | GPUColorWrite.RED
            }]
        },
        label: "NYIUSQF",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "front",
            frontFace: "cw",
            topology: "triangle-strip"
        },
        vertex: {
            entryPoint: "main",
            module: JeZqPihRgciXCFHYlOb
        }
    });
    const AiUoodTYMBpWAoOxKldO = gQBLHugDZ.queue
    const GqLsjJwrlvXdG = exXoGIshWYeDPb.beginComputePass({
        label: "JYHHRdr"
    });
    const lcOwxLblXGmDuWVF = hEdAmxyeX.count
    const XcHIcEluQSJnC = gQBLHugDZ.createBuffer({
        label: "NhqcZTdEvhLP",
        mappedAtCreation: true,
        size: 91742944,
        usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC
    });
    const pCKRpBQwLpatustydIUi = navigator.gpu.wgslLanguageFeatures
    const OfomdrCxy = navigator.gpu.wgslLanguageFeatures
    rCPYpTUpdKyikdjXyvg.setPipeline(LxoWU);
    const HCmqWsNVlmp = gQBLHugDZ.queue
    const KLbrFIagMXQ = GqLsjJwrlvXdG.label
    const XKZDgbekgaLVTtyxF = gQBLHugDZ.limits
    const UHFhfoMpE = gQBLHugDZ.createCommandEncoder({
        label: "bfPGtbGkGyblAUIPYH"
    });
    const hUveDlSSpzMbnIVMua = XCtHPzwBP.features
    UvnBZy.writeBuffer(LKfAFrV, 0, JPEjK);
    const YZpkEHFFp = gQBLHugDZ.createBindGroup({
        label: "SZGUBmfqczS.bindGroup",
        layout: SZGUBmfqczS.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    UbNmVisArjsrk.writeBuffer(LKfAFrV, 0, fpBBIYyHvLVdCEL);
    const asxrbMPs = gQBLHugDZ.createBindGroup({
        label: "uOOYMoJiVlQrOe.bindGroup",
        layout: uOOYMoJiVlQrOe.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    UbNmVisArjsrk.writeBuffer(hrUezKFtRefSvOsd, 54195504, XylnWY);
    const XmWPmURxILWq = wKiBHNLBf.label
    const aFlTsHoQ = BkYhXaOapGjHMEGxU.label
    const mMIqJAadBtetmtI = gQBLHugDZ.createQuerySet({
        count: 2152,
        label: "mOOMOHd",
        type: "occlusion"
    });
    const fExWbfFIVHXeLI = VBYjejGjEILQp.isFallbackAdapter
    const appsUgYRTnbQyKY = gQBLHugDZ.features
    const WQxjOhEbfFJPxLp = JFHuzAT.label
    const uPpcTTtuxkKofC = gQBLHugDZ.features
    const DUbFdqckaxY = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CJGKBmReDuWShda
        },
        label: "LOYSinWPWZiFulvv",
        layout: "auto"
    });
    xeBfzPDeL.end();
    const qMdgEkMz = rkIXEjVOXdMGIJLproP.label
    const xhUVseYKuIDKmU = await navigator.gpu.requestAdapter({
        powerPreference: "low-power"
    });
    GqLsjJwrlvXdG.setPipeline(vRyuKUbwfuvs);
    GqLsjJwrlvXdG.setBindGroup(0, asxrbMPs);
    GqLsjJwrlvXdG.dispatchWorkgroups(13, 246, 45);
    GqLsjJwrlvXdG.setBindGroup(0, mZUfwzfl);
    const fhBEf = uOOYMoJiVlQrOe.label
    const ZlocSKVSgzfO = TYDBgPNzJkj.label
    YSIJfsJCyc.submit([zwJrZaoAqHaFAAp]);
    const HMgfeGxdm = gQBLHugDZ.createBuffer({
        label: "mYTUHBSXTnVyYkKKDwJ",
        mappedAtCreation: false,
        size: 4518092,
        usage: GPUBufferUsage.MAP_WRITE
    });
    rCPYpTUpdKyikdjXyvg.draw(7);
    const DjUzsKbAJPreETgptlK = rkIXEjVOXdMGIJLproP.type
    const IMFNamgAbI = await navigator.gpu.getPreferredCanvasFormat();
    const gTxPRIzRHfrJUzqZRB = LTmCTKVdeEmmRgshntV.label
    const FGUHLKYYuzgulKoeJHa = pvFDaRkTAx.label
    const bxcaggrolsrdqlZOA = wKiBHNLBf.label
    const IrHtTCqfHNxeWLuOSMzj = xhUVseYKuIDKmU.info
    const kXZSpjSdSTtQjvcs = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    }
                },
                format: "rgba8unorm",
                writeMask: GPUColorWrite.BLUE | GPUColorWrite.ALL
            }]
        },
        label: "GIkPvdpslsyXC",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "none",
            frontFace: "ccw",
            topology: "line-strip"
        },
        vertex: {
            entryPoint: "main",
            module: OcLSYfEJYMylVhkASKQt
        }
    });
    const saVshapzlhhaTYk = pvFDaRkTAx.label
    const pCPgRwKrRAzErhdqmqJi = gQBLHugDZ.createShaderModule({
        label: "fragment",
        code: DNcacQJGITkscr
    });
    const WuDGwMVdCZVn = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const pfhudYBAwiiarbzQE = gQBLHugDZ.createQuerySet({
        count: 3033,
        label: "bdKVAKwNtH",
        type: "occlusion"
    });
    const bjPrrSCsZrXXMPq = gQBLHugDZ.createQuerySet({
        count: 1491,
        label: "mMXeAm",
        type: "occlusion"
    });
    const SnjCRjZncMEheHyxx = gQBLHugDZ.label
    const IwZoZfPhErAAIljSE = GqLsjJwrlvXdG.label
    const dUFSgMNi = gJHrDv.label
    const xucffJFKTdgMfgiJwcwx = navigator.gpu.wgslLanguageFeatures
    const SmdASDclyfqvRNtq = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: CJGKBmReDuWShda
        },
        label: "KzlFjZI",
        layout: "auto"
    });
    const ymxbJdTONKpVUcWiTCZQ = GqLsjJwrlvXdG.label
    const nWIrvnSztjgB = await navigator.gpu.requestAdapter({
        powerPreference: "high-performance"
    });
    const DKFsfcDDRcqkZCTYdU = gQBLHugDZ.limits
    const vCjlEKy = TNIUncBNsBX.label
    const OJdJAAreLMdUBhKT = gQBLHugDZ.label
    const tyPRuBOTAi = gQBLHugDZ.createTexture({
        dimension: "2d",
        sampleCount: 4,
        format: "bgra8unorm-srgb",
        label: "lOEeqRUOmHEsa",
        size: {
            width: 1336,
            height: 2646,
            depthOrArrayLayers: 1
        },
        mipLevelCount: 1,
        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,
        viewFormats: ["bgra8unorm-srgb"]
    });
    const ryjtsYqIfuoSNyLnX = tyPRuBOTAi.createView({
        aspect: "all",
        dimension: "2d",
        arrayLayerCount: 1,
        baseArrayLayer: 0,
        mipLevelCount: 1,
        baseMipLevel: 0,
        format: "bgra8unorm-srgb",
        label: "pliSckHlFg"
    });
    const qzBFvwRjBhCOS = UHFhfoMpE.beginRenderPass({
        colorAttachments: [{
            clearValue: {
                r: 1.4089018896118959,
                g: 0.46550172825591285,
                b: 1.4474135926850182,
                a: 1.7830620492478932
            },
            loadOp: "load",
            storeOp: "store",
            view: ryjtsYqIfuoSNyLnX
        }],
        label: "EjOUxkEM",
        maxDrawCount: 2673442471,
        occlusionQuerySet: mMIqJAadBtetmtI
    });
    const ODpxDFDNOXwKHiQqnCQw = JFHuzAT.beginComputePass({
        label: "GxBZg"
    });
    ODpxDFDNOXwKHiQqnCQw.setPipeline(gHzQZliBFCj);
    rCPYpTUpdKyikdjXyvg.setVertexBuffer(0, sGOTrz);
    const OPFgb = gQBLHugDZ.createComputePipeline({
        compute: {
            entryPoint: "main",
            module: KEOVtKwSsuVqa
        },
        label: "ZrkYUCvxipZ",
        layout: "auto"
    });
    const UqWTvlctKhOCk = gQBLHugDZ.features
    const FTohwxyOEHlR = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "max",
                        dstFactor: "one",
                        srcFactor: "one"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "one-minus-dst-alpha",
                        srcFactor: "one"
                    }
                },
                format: "r16float",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.RED | GPUColorWrite.BLUE | GPUColorWrite.GREEN
            }]
        },
        label: "HGORJhURSmHuulb",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: JkmIqpRhbA
        }
    });
    qzBFvwRjBhCOS.setPipeline(yrgmYeUjul);
    kXisIvYNsIoeogk.submit([zMBOEFfXAArXzYsjibu]);
    const LZepmOL = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: lpOhFGMvpwedBnpGC,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "dst-alpha",
                        srcFactor: "src-alpha-saturated"
                    },
                    color: {
                        operation: "reverse-subtract",
                        dstFactor: "one-minus-src",
                        srcFactor: "constant"
                    }
                },
                format: "r8unorm",
                writeMask: GPUColorWrite.ALL | GPUColorWrite.GREEN | GPUColorWrite.RED | GPUColorWrite.BLUE
            }]
        },
        label: "cfdzdmiMXPlBSwcMC",
        layout: "auto",
        multisample: {
            count: 1
        },
        primitive: {
            cullMode: "back",
            frontFace: "ccw",
            topology: "line-strip"
        },
        vertex: {
            entryPoint: "main",
            module: JkmIqpRhbA
        }
    });
    wKiBHNLBf.setVertexBuffer(0, sGOTrz);
    HCmqWsNVlmp.writeBuffer(LKfAFrV, 0, MxzfoFmKva);
    const dwkTENggNVhJVWfEa = gQBLHugDZ.createBindGroup({
        label: "DUbFdqckaxY.bindGroup",
        layout: DUbFdqckaxY.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    const skzJJOJbQuwK = WuDGwMVdCZVn.info
    const IytgZIAPYDX = bjPrrSCsZrXXMPq.label
    ODpxDFDNOXwKHiQqnCQw.setBindGroup(0, YbegLzaxaovZqcGn);
    const vmfQXsz = gQBLHugDZ.createCommandEncoder({
        label: "NyrXsKOwdcGcc"
    });
    const PNbRBbsRNZYEdgTk = vmfQXsz.beginComputePass({
        label: "jzNkdzrCaB"
    });
    const KRZGqgZH = JFHuzAT.label
    const jkSKORKrEjnnqHNoWO = gQBLHugDZ.createCommandEncoder({
        label: "CeUxzuQGLjHRaCIl"
    });
    const NeSqldkcs = uMtZjlMsoLZC.label
    const OHAmoTJa = gQBLHugDZ.features
    const fEIdofURkoFRXBvEQ = gQBLHugDZ.createRenderPipeline({
        fragment: {
            entryPoint: "main",
            module: pCPgRwKrRAzErhdqmqJi,
            targets: [{
                blend: {
                    alpha: {
                        operation: "reverse-subtract",
                        dstFactor: "src",
                        srcFactor: "dst-alpha"
                    },
                    color: {
                        operation: "add",
                        dstFactor: "one-minus-src",
                        srcFactor: "src-alpha"
                    }
                },
                format: "rgb10a2unorm",
                writeMask: GPUColorWrite.GREEN | GPUColorWrite.ALL
            }]
        },
        label: "rEFTCldYMdJGPOfIqH",
        layout: "auto",
        multisample: {
            count: 4
        },
        primitive: {
            cullMode: "none",
            frontFace: "cw",
            topology: "point-list"
        },
        vertex: {
            entryPoint: "main",
            module: JkmIqpRhbA
        }
    });
    const xAlhzHuWBhLDjfOX = gQBLHugDZ.features
    const nGjGrEppeFWkAbLN = rCZeKsy.isFallbackAdapter
    const PpXcxTF = gQBLHugDZ.features
    const hXJbdovaVCYjyV = await navigator.gpu.getPreferredCanvasFormat();
    const kadaTIAVbdxJtPb = YSIJfsJCyc.label
    qzBFvwRjBhCOS.end();
    UbNmVisArjsrk.writeBuffer(LKfAFrV, 0, GHyucfPVUylW);
    const pqBIeYnYEDgJfzQKM = gQBLHugDZ.createBindGroup({
        label: "wfEwfqsjrzRw.bindGroup",
        layout: wfEwfqsjrzRw.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    const GjiZaAVVwTRPzlI = gQBLHugDZ.createBuffer({
        label: "alDimjpQZBwGhPwLdlQG",
        mappedAtCreation: true,
        size: 98105664,
        usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDEX | GPUBufferUsage.STORAGE
    });
    wKiBHNLBf.draw(4);
    const BkeqtRaoHIJ = gQBLHugDZ.createCommandEncoder({
        label: "gvpTWKAbMMUUgpnmK"
    });
    const DniVT = VZfmcY.label
    wKiBHNLBf.draw(8);
    const fXNMJ = gQBLHugDZ.createShaderModule({
        label: "vertex",
        code: dvtOioif
    });
    wKiBHNLBf.draw(1);
    const WWZjD = wKiBHNLBf.label
    const uUzceiuC = tulnl.label
    const QjiWLHZIHmq = dXJebbUpXZLduULuFK.label
    const gfVcdPxOaphgXHBudnPR = VBYjejGjEILQp.info
    const kklTZuKtTEQyJDNynsa = jkSKORKrEjnnqHNoWO.beginComputePass({
        label: "oMZiWTDRPwQVEZJGAbo"
    });
    const aiziz = YabEmaItD.label
    const OPmLvQtHmTc = qSOcOiYzDUjSSQQVN.label
    AiUoodTYMBpWAoOxKldO.writeBuffer(LKfAFrV, 0, PFRWKbmZWTIh);
    const InRdIqlKHwzEWpYWtXPX = gQBLHugDZ.createBindGroup({
        label: "vRyuKUbwfuvs.bindGroup",
        layout: vRyuKUbwfuvs.getBindGroupLayout(0),
        entries: [{
            binding: 0,
            resource: {
                buffer: LKfAFrV
            },
            binding: 1,
            resource: {
                buffer: LKfAFrV
            }
        }]
    });
    const nsPGuBvybFhhNuUglu = gQBLHugDZ.features
    ODpxDFDNOXwKHiQqnCQw.setPipeline(SZGUBmfqczS);
    PNbRBbsRNZYEdgTk.setPipeline(ZQWIkbwFDXIfyqQ);
    const WrvcVIxUazEPf = HCmqWsNVlmp.label
    const Mxczsj = await navigator.gpu.getPreferredCanvasFormat();
    const AEFTCBUVPZCCYB = VBYjejGjEILQp.info
    const jjGaiRhNEDxOS = HCmqWsNVlmp.label
    wKiBHNLBf.draw(4);
    ODpxDFDNOXwKHiQqnCQw.setPipeline(jvloUwtGZTuXg);
    const rPJQrxwGxLhxEuavzDq = gQBLHugDZ.features
    ODpxDFDNOXwKHiQqnCQw.setBindGroup(0, FygqkOpiXfdElIFsX);
    const UQLDU = xhUVseYKuIDKmU.limits
    const oOHuVMzsQzOp = zEnKbIaAehmzQkfMgJ.getBindGroupLayout(0);
    wKiBHNLBf.setPipeline(LxoWU);

}
main().catch(console.error);