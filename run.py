# API to interface WebGlitch with Google's ClusterFuzz

import argparse
import os
import shutil
import subprocess
import sys

webglitch_dir = os.path.dirname(os.path.realpath(__file__))
java_path = os.path.join(webglitch_dir, 'jdk', 'bin', 'java')
webglitch_jar_path = os.path.join(webglitch_dir, 'app', 'build', 'libs', 'app.jar')

def run_webglitch(args_to_use):
    try:
        subprocess.run([java_path, '-jar', webglitch_jar_path] + args_to_use, check=True)
    except subprocess.CalledProcessError as e:
        print("Error running Java command: " + str(e))
        sys.exit(e.returncode)

arg_parser = argparse.ArgumentParser(
    description="WebGlitch WebGPU program generator"
)


arg_parser.add_argument(
    "--input_dir", 
    type=str, 
    help="Corpus of WebGPU programs to mutate (unsupported)"
)

arg_parser.add_argument(
    "--output_dir",
    type=str, 
    help="Output directory WebGlitch writes to"
)

arg_parser.add_argument(
    "--no_of_files",
    type=int,
    help="Number of testcases for WebGlitch to generate"
)

args = arg_parser.parse_args()

input_dir = args.input_dir
output_dir = args.output_dir
no_of_files = args.no_of_files

if not no_of_files or no_of_files <= 0:
    raise ValueError("Number of files to generate must be greater than 0")

# Output dir must include all dependencies to execute testcase so need copy shaders folder over
shaders_dir = os.path.join(webglitch_dir, "rsrcs", "html", "shaders")
output_dir_shaders_dir = os.path.join(output_dir, "shaders")

if not os.path.exists(output_dir_shaders_dir):
    shutil.copytree(shaders_dir, output_dir_shaders_dir)
else:
    print("Shaders directory already exists. Skipping copy.")

for file_no in range(no_of_files):
     # Testcases generated by fuzzer must be filename prefix 'fuzz-'
     output_file = os.path.join(output_dir, "fuzz-" + str(file_no) + ".js").replace("\\", "/")
     run_webglitch(["-o", os.path.abspath(output_file), "-m", "-z"])